===========================================
GESTIONALE CROCE VERDE - CONTENUTO COMPLETO
===========================================

Data esportazione: Mon Jun 30 10:16:57 PM UTC 2025
Directory: /root/gestionale/gestionalecv
Utente: root


=== STRUTTURA PROGETTO ===

Struttura cartelle principali:
.
./app
./app/Http
./app/Http/Controllers
./app/Http/Middleware
./app/Models
./app/Providers
./bootstrap
./bootstrap/cache
./database
./database/factories
./database/migrations
./database/seeders
./node_modules
./public
./public/build
./public/build/assets
./public/vendor
./public/vendor/telescope
./resources
./resources/css
./resources/js
./resources/views
./resources/views/auth
./resources/views/dashboard
./resources/views/layouts
./storage
./tests
./tests/Feature
./tests/Unit

Lista file principali:
Controllers: 11
Models: 19
Views: 4
Migrations: 29


=== CONTROLLERS ===

--- AuthController.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use App\Models\User;
use Illuminate\Validation\ValidationException;

class AuthController extends Controller
{
    /**
     * Mostra il form di login
     */
    public function showLoginForm()
    {
        return view('auth.login');
    }

    /**
     * Gestisce il login
     */
    public function login(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|email',
            'password' => 'required|min:6',
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput($request->only('email'));
        }

        $credentials = $request->only('email', 'password');
        $remember = $request->boolean('remember');

        if (!Auth::attempt($credentials, $remember)) {
            throw ValidationException::withMessages([
                'email' => 'Le credenziali fornite non sono corrette.',
            ]);
        }

        $user = Auth::user();

        if (!$user->isAttivo()) {
            Auth::logout();
            return back()->withErrors([
                'email' => 'Il tuo account è stato disattivato. Contatta l\'amministratore.',
            ]);
        }

        $request->session()->regenerate();

        return redirect()->intended('/dashboard');
    }

    /**
     * Gestisce il logout
     */
    public function logout(Request $request)
    {
        Auth::logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect('/login')->with('success', 'Logout effettuato con successo.');
    }

    /**
     * Mostra il form di registrazione
     */
    public function showRegistrationForm()
    {
        return view('auth.register');
    }

    /**
     * Gestisce la registrazione
     */
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'nome' => 'required|string|max:255',
            'cognome' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }

        $user = User::create([
            'nome' => $request->nome,
            'cognome' => $request->cognome,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'ruolo' => 'volontario',
            'attivo' => false,
        ]);

        return redirect()->route('login')->with('success', 'Registrazione completata!');
    }

    /**
     * Aggiorna ultimo accesso (AJAX)
     */
    public function updateAccesso(Request $request)
    {
        if (Auth::check()) {
            return response()->json(['status' => 'success']);
        }
        
        return response()->json(['status' => 'error'], 401);
    }
}
--- Controller.php ---
<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}
--- DashboardController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Evento;
use App\Models\Volontario;
use App\Models\Mezzo;
use App\Models\Ticket;
use App\Models\Magazzino;
use App\Models\Dpi;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

class DashboardController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Dashboard principale del gestionale
     */
    public function index(Request $request)
    {
        try {
            $user = Auth::user();
            
            // Statistiche generali
            $statistiche = $this->getStatisticheGenerali();
            
            // Quick actions per l'utente
            $quickActions = $this->getQuickActions($user);
            
            // Alerts semplici
            $alerts = $this->getAlerts();

            return view('dashboard.index', compact(
                'statistiche',
                'quickActions',
                'alerts'
            ));

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento dashboard: ' . $e->getMessage());
            return view('dashboard.index')->with('error', 'Errore nel caricamento della dashboard');
        }
    }

    /**
     * Statistiche generali del sistema
     */
    private function getStatisticheGenerali()
    {
        try {
            return [
                'eventi' => [
                    'totali' => Evento::count(),
                    'futuri' => Evento::where('data_inizio', '>', now())->count(),
                ],
                'volontari' => [
                    'totali' => Volontario::count(),
                    'attivi' => Volontario::where('stato', 'attivo')->count(),
                ],
                'mezzi' => [
                    'totali' => Mezzo::count(),
                    'disponibili' => Mezzo::where('stato', 'disponibile')->count(),
                ],
                'tickets' => [
                    'totali' => Ticket::count(),
                    'aperti' => Ticket::whereIn('stato', ['aperto', 'in_lavorazione'])->count(),
                ]
            ];

        } catch (\Exception $e) {
            Log::error('Errore nel calcolo statistiche: ' . $e->getMessage());
            return [
                'eventi' => ['totali' => 0, 'futuri' => 0],
                'volontari' => ['totali' => 0, 'attivi' => 0],
                'mezzi' => ['totali' => 0, 'disponibili' => 0],
                'tickets' => ['totali' => 0, 'aperti' => 0]
            ];
        }
    }

    /**
     * Quick actions personalizzate per l'utente
     */
    private function getQuickActions($user)
    {
        try {
            $actions = [];

            // Azioni base per tutti
            $actions[] = [
                'titolo' => 'Nuovo Evento',
                'descrizione' => 'Crea un nuovo evento formativo',
                'icona' => 'calendar-plus',
                'url' => route('eventi.create'),
                'colore' => 'primary'
            ];

            // Se può gestire volontari
            if ($user->hasPermission('volontari', 'create')) {
                $actions[] = [
                    'titolo' => 'Nuovo Volontario',
                    'descrizione' => 'Registra un nuovo volontario',
                    'icona' => 'user-plus',
                    'url' => route('volontari.create'),
                    'colore' => 'success'
                ];
            }

            // Se può gestire mezzi
            if ($user->hasPermission('mezzi', 'visualizza')) {
                $actions[] = [
                    'titolo' => 'Gestione Mezzi',
                    'descrizione' => 'Visualizza stato mezzi',
                    'icona' => 'truck',
                    'url' => route('mezzi.index'),
                    'colore' => 'warning'
                ];
            }

            $actions[] = [
                'titolo' => 'Nuovo Ticket',
                'descrizione' => 'Apri un ticket di supporto',
                'icona' => 'ticket-perforated',
                'url' => route('tickets.create'),
                'colore' => 'info'
            ];

            // Se è admin
            if ($user->isAdmin()) {
                $actions[] = [
                    'titolo' => 'Amministrazione',
                    'descrizione' => 'Pannello amministrativo',
                    'icona' => 'gear',
                    'url' => route('admin.index'),
                    'colore' => 'secondary'
                ];
            }

            return $actions;

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento quick actions: ' . $e->getMessage());
            return [];
        }
    }

    /**
     * Alerts semplici
     */
    private function getAlerts()
    {
        try {
            $alerts = [];

            // Scorte minime magazzino
            try {
                $scorteMinime = Magazzino::whereRaw('quantita_disponibile <= scorta_minima')
                                       ->where('scorta_minima', '>', 0)
                                       ->count();
                
                if ($scorteMinime > 0) {
                    $alerts[] = [
                        'tipo' => 'warning',
                        'titolo' => 'Scorte Minime',
                        'messaggio' => "$scorteMinime articoli hanno raggiunto la scorta minima"
                    ];
                }
            } catch (\Exception $e) {
                // Ignora errori se la tabella magazzino non esiste
            }

            // DPI in scadenza
            try {
                $dpiScadenza = Dpi::where('data_scadenza', '<=', now()->addDays(30))
                                 ->where('data_scadenza', '>=', now())
                                 ->count();
                
                if ($dpiScadenza > 0) {
                    $alerts[] = [
                        'tipo' => 'warning',
                        'titolo' => 'DPI in Scadenza',
                        'messaggio' => "$dpiScadenza DPI scadranno nei prossimi 30 giorni"
                    ];
                }
            } catch (\Exception $e) {
                // Ignora errori se la tabella dpi non esiste
            }

            return $alerts;

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento alerts: ' . $e->getMessage());
            return [];
        }
    }

    /**
     * API per statistiche dashboard
     */
    public function apiStats(Request $request)
    {
        try {
            return response()->json($this->getStatisticheGenerali());
        } catch (\Exception $e) {
            Log::error('Errore API stats dashboard: ' . $e->getMessage());
            return response()->json(['error' => 'Errore nel caricamento dati'], 500);
        }
    }

    /**
     * Sezione amministrazione (solo admin)
     */
    public function admin()
    {
        if (!Auth::user()->isAdmin()) {
            abort(403, 'Accesso negato');
        }

        return view('admin.index');
    }
}
--- DpiController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Dpi;
use App\Models\AssegnazioneDpi;
use App\Models\Volontario;
use App\Models\User;
use App\Models\LogAttivita;
use App\Models\Notifica;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Carbon\Carbon;

class DpiController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('permission:dpi,visualizza')->only(['index', 'show']);
        $this->middleware('permission:dpi,crea')->only(['create', 'store']);
        $this->middleware('permission:dpi,modifica')->only(['edit', 'update', 'assegna', 'restituzione', 'verifica']);
        $this->middleware('permission:dpi,elimina')->only(['destroy']);
    }

    // ===================================
    // INDEX - Lista DPI
    // ===================================
    public function index(Request $request)
    {
        $query = Dpi::with(['assegnazioneAttuale.volontario.user']);

        // Filtri
        if ($request->filled('categoria')) {
            $query->where('categoria', $request->categoria);
        }

        if ($request->filled('stato')) {
            $query->where('stato', $request->stato);
        }

        if ($request->filled('disponibilita')) {
            switch ($request->disponibilita) {
                case 'disponibili':
                    $query->where('disponibile', true)
                          ->where('in_manutenzione', false)
                          ->whereIn('stato', ['nuovo', 'buono']);
                    break;
                case 'assegnati':
                    $query->whereHas('assegnazioneAttuale');
                    break;
                case 'manutenzione':
                    $query->where('in_manutenzione', true);
                    break;
                case 'da_verificare':
                    $query->whereDate('prossima_verifica', '<=', now());
                    break;
            }
        }

        if ($request->filled('taglia')) {
            $query->where('taglia', $request->taglia);
        }

        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('nome', 'like', "%{$search}%")
                  ->orWhere('descrizione', 'like', "%{$search}%")
                  ->orWhere('codice_dpi', 'like', "%{$search}%")
                  ->orWhere('marca', 'like', "%{$search}%")
                  ->orWhere('modello', 'like', "%{$search}%");
            });
        }

        $sortField = $request->get('sort', 'nome');
        $sortDirection = $request->get('direction', 'asc');
        $query->orderBy($sortField, $sortDirection);

        $dpi = $query->paginate(20);

        $statistiche = [
            'totale_dpi' => Dpi::count(),
            'dpi_disponibili' => Dpi::where('disponibile', true)->count(),
            'dpi_assegnati' => Dpi::whereHas('assegnazioneAttuale')->count(),
            'dpi_in_manutenzione' => Dpi::where('in_manutenzione', true)->count(),
            'dpi_in_scadenza' => Dpi::whereDate('scadenza', '<=', now()->addDays(30))
                                   ->whereDate('scadenza', '>=', now())
                                   ->count(),
            'dpi_scaduti' => Dpi::whereDate('scadenza', '<', now())->count(),
            'dpi_da_verificare' => Dpi::whereDate('prossima_verifica', '<=', now())->count()
        ];

        $categorie = Dpi::select('categoria')
                        ->distinct()
                        ->orderBy('categoria')
                        ->pluck('categoria', 'categoria');

        $taglie = Dpi::select('taglia')
                     ->whereNotNull('taglia')
                     ->distinct()
                     ->orderBy('taglia')
                     ->pluck('taglia', 'taglia');

        if ($request->ajax()) {
            return response()->json([
                'html' => view('dpi.partials.table', compact('dpi'))->render(),
                'pagination' => $dpi->links()->render()
            ]);
        }

        return view('dpi.index', compact('dpi', 'statistiche', 'categorie', 'taglie'));
    }

    // ===================================
    // CREATE - Form creazione DPI
    // ===================================
    public function create()
    {
        $categorie = [
            'protezione_testa' => 'Protezione Testa',
            'protezione_occhi' => 'Protezione Occhi',
            'protezione_respiratoria' => 'Protezione Respiratoria',
            'protezione_mani' => 'Protezione Mani',
            'protezione_piedi' => 'Protezione Piedi',
            'protezione_corpo' => 'Protezione Corpo',
            'protezione_cadute' => 'Protezione Cadute',
            'divise' => 'Divise e Abbigliamento',
            'altro' => 'Altro'
        ];

        return view('dpi.create', compact('categorie'));
    }

    // ===================================
    // STORE - Salva nuovo DPI
    // ===================================
    public function store(Request $request)
    {
        $validated = $request->validate([
            'nome' => 'required|string|max:255',
            'descrizione' => 'nullable|string',
            'codice_dpi' => 'nullable|string|max:255|unique:dpi,codice_dpi',
            'categoria' => 'required|in:protezione_testa,protezione_occhi,protezione_respiratoria,protezione_mani,protezione_piedi,protezione_corpo,protezione_cadute,divise,altro',
            'taglia' => 'nullable|string|max:10',
            'colore' => 'nullable|string|max:50',
            'materiale' => 'nullable|string|max:100',
            'marca' => 'nullable|string|max:100',
            'modello' => 'nullable|string|max:100',
            'certificazione_ce' => 'nullable|string|max:100',
            'normative_riferimento' => 'nullable|array',
            'classe_protezione' => 'nullable|string|max:50',
            'data_certificazione' => 'nullable|date',
            'scadenza_certificazione' => 'nullable|date|after:data_certificazione',
            'data_acquisto' => 'nullable|date|before_or_equal:today',
            'scadenza' => 'nullable|date|after:today',
            'durata_mesi' => 'nullable|integer|min:1|max:120',
            'max_utilizzi' => 'nullable|integer|min:1',
            'costo_acquisto' => 'nullable|numeric|min:0',
            'fornitore' => 'nullable|string|max:255',
            'numero_fattura' => 'nullable|string|max:100',
            'ubicazione' => 'nullable|string|max:255',
            'armadio_scaffale' => 'nullable|string|max:100',
            'istruzioni_uso' => 'nullable|string',
            'istruzioni_manutenzione' => 'nullable|string',
            'istruzioni_pulizia' => 'nullable|string',
            'note' => 'nullable|string',
            'foto' => 'nullable|image|max:5120'
        ]);

        DB::beginTransaction();
        
        try {
            if (empty($validated['codice_dpi'])) {
                $validated['codice_dpi'] = $this->generaCodiceDpi($validated['categoria']);
            }

            if (!$validated['scadenza'] && $validated['durata_mesi'] && $validated['data_acquisto']) {
                $validated['scadenza'] = Carbon::parse($validated['data_acquisto'])
                                               ->addMonths($validated['durata_mesi']);
            }

            if ($request->hasFile('foto')) {
                $validated['foto'] = $request->file('foto')->store('dpi/foto', 'public');
            }

            $dpi = Dpi::create([
                ...$validated,
                'stato' => 'nuovo',
                'disponibile' => true,
                'in_manutenzione' => false,
                'utilizzi_effettuati' => 0
            ]);

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'creazione_dpi',
                'modulo' => 'dpi',
                'risorsa_id' => $dpi->id,
                'descrizione' => "Creato DPI: {$dpi->nome} ({$dpi->codice_dpi})",
                'ip_address' => $request->ip(),
                'user_agent' => $request->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => 'DPI creato con successo',
                    'redirect' => route('dpi.show', $dpi->id)
                ]);
            }

            return redirect()->route('dpi.show', $dpi->id)
                           ->with('success', 'DPI creato con successo');

        } catch (\Exception $e) {
            DB::rollback();
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Errore durante la creazione: ' . $e->getMessage()
                ], 500);
            }

            return back()->withInput()
                        ->withErrors(['error' => 'Errore durante la creazione: ' . $e->getMessage()]);
        }
    }

    // ===================================
    // SHOW - Dettagli DPI
    // ===================================
    public function show(Dpi $dpi)
    {
        $dpi->load([
            'assegnazioni' => function($query) {
                $query->with(['volontario.user'])
                      ->orderBy('data_assegnazione', 'desc');
            },
            'assegnazioneAttuale.volontario.user',
            'tickets'
        ]);

        $statistiche = [
            'utilizzi_effettuati' => $dpi->utilizzi_effettuati,
            'utilizzi_residui' => $dpi->utilizzi_residui,
            'percentuale_utilizzo' => $dpi->percentuale_utilizzo,
            'eta_dpi' => $dpi->eta_dpi,
            'giorni_residui' => $dpi->giorni_residui,
            'assegnazioni_totali' => $dpi->assegnazioni->count(),
            'disponibile_per_assegnazione' => $dpi->disponibile_per_assegnazione
        ];

        $storicoAssegnazioni = $dpi->assegnazioni()
                                  ->with(['volontario.user'])
                                  ->orderBy('data_assegnazione', 'desc')
                                  ->limit(10)
                                  ->get();

        $volontariDisponibili = [];
        if ($dpi->disponibile_per_assegnazione) {
            $volontariDisponibili = Volontario::with('user')
                                             ->where('attivo', true)
                                             ->whereHas('user', function($query) {
                                                 $query->where('attivo', true);
                                             })
                                             ->orderBy('user.cognome')
                                             ->get();
        }

        return view('dpi.show', compact(
            'dpi', 
            'statistiche', 
            'storicoAssegnazioni', 
            'volontariDisponibili'
        ));
    }

    // ===================================
    // EDIT - Form modifica DPI
    // ===================================
    public function edit(Dpi $dpi)
    {
        $categorie = [
            'protezione_testa' => 'Protezione Testa',
            'protezione_occhi' => 'Protezione Occhi',
            'protezione_respiratoria' => 'Protezione Respiratoria',
            'protezione_mani' => 'Protezione Mani',
            'protezione_piedi' => 'Protezione Piedi',
            'protezione_corpo' => 'Protezione Corpo',
            'protezione_cadute' => 'Protezione Cadute',
            'divise' => 'Divise e Abbigliamento',
            'altro' => 'Altro'
        ];

        return view('dpi.edit', compact('dpi', 'categorie'));
    }

    // ===================================
    // UPDATE - Aggiorna DPI
    // ===================================
    public function update(Request $request, Dpi $dpi)
    {
        $validated = $request->validate([
            'nome' => 'required|string|max:255',
            'descrizione' => 'nullable|string',
            'categoria' => 'required|in:protezione_testa,protezione_occhi,protezione_respiratoria,protezione_mani,protezione_piedi,protezione_corpo,protezione_cadute,divise,altro',
            'taglia' => 'nullable|string|max:10',
            'colore' => 'nullable|string|max:50',
            'materiale' => 'nullable|string|max:100',
            'marca' => 'nullable|string|max:100',
            'modello' => 'nullable|string|max:100',
            'stato' => 'required|in:nuovo,buono,usato,da_controllare,da_sostituire,dismesso',
            'in_manutenzione' => 'boolean',
            'scadenza' => 'nullable|date',
            'costo_acquisto' => 'nullable|numeric|min:0',
            'ubicazione' => 'nullable|string|max:255',
            'note' => 'nullable|string',
            'foto' => 'nullable|image|max:5120'
        ]);

        DB::beginTransaction();
        
        try {
            if ($request->hasFile('foto')) {
                if ($dpi->foto) {
                    Storage::disk('public')->delete($dpi->foto);
                }
                $validated['foto'] = $request->file('foto')->store('dpi/foto', 'public');
            }

            if (in_array($validated['stato'], ['da_sostituire', 'dismesso']) || $validated['in_manutenzione']) {
                $validated['disponibile'] = false;
            } elseif (in_array($validated['stato'], ['nuovo', 'buono']) && !$validated['in_manutenzione']) {
                $validated['disponibile'] = true;
            }

            $dpi->update($validated);

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'modifica_dpi',
                'modulo' => 'dpi',
                'risorsa_id' => $dpi->id,
                'descrizione' => "Modificato DPI: {$dpi->nome}",
                'ip_address' => $request->ip(),
                'user_agent' => $request->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => 'DPI aggiornato con successo'
                ]);
            }

            return redirect()->route('dpi.show', $dpi->id)
                           ->with('success', 'DPI aggiornato con successo');

        } catch (\Exception $e) {
            DB::rollback();
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Errore durante l\'aggiornamento: ' . $e->getMessage()
                ], 500);
            }

            return back()->withInput()
                        ->withErrors(['error' => 'Errore durante l\'aggiornamento: ' . $e->getMessage()]);
        }
    }

    // ===================================
    // ASSEGNA - Assegna DPI a volontario
    // ===================================
    public function assegna(Request $request, Dpi $dpi)
    {
        $validated = $request->validate([
            'volontario_id' => 'required|exists:volontari,id',
            'motivo_assegnazione' => 'nullable|string|max:255',
            'formazione_effettuata' => 'boolean',
            'ricevuta_firmata' => 'boolean',
            'note' => 'nullable|string'
        ]);

        if (!$dpi->disponibile_per_assegnazione) {
            return response()->json([
                'success' => false,
                'message' => 'Il DPI non è disponibile per l\'assegnazione'
            ], 422);
        }

        DB::beginTransaction();
        
        try {
            $assegnazione = $dpi->assegnaA(
                $validated['volontario_id'],
                auth()->id(),
                [
                    'motivo_assegnazione' => $validated['motivo_assegnazione'],
                    'formazione_effettuata' => $validated['formazione_effettuata'] ?? false,
                    'ricevuta_firmata' => $validated['ricevuta_firmata'] ?? false,
                    'note' => $validated['note']
                ]
            );

            $volontario = Volontario::find($validated['volontario_id']);

            Notifica::crea([
                'destinatari' => [$volontario->user_id],
                'titolo' => 'DPI Assegnato',
                'messaggio' => "Ti è stato assegnato il DPI: {$dpi->nome} ({$dpi->codice_dpi})",
                'tipo' => 'generale'
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'DPI assegnato con successo',
                'assegnazione' => [
                    'volontario' => $volontario->user->nome_completo,
                    'data' => $assegnazione->data_assegnazione->format('d/m/Y')
                ]
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante l\'assegnazione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // RESTITUZIONE - Gestisce restituzione DPI
    // ===================================
    public function restituzione(Request $request, Dpi $dpi)
    {
        $validated = $request->validate([
            'stato_restituzione' => 'required|in:buono,usato,danneggiato,perso,non_restituito',
            'motivo_restituzione' => 'nullable|string|max:255',
            'note' => 'nullable|string'
        ]);

        $assegnazione = $dpi->assegnazioneAttuale;
        if (!$assegnazione) {
            return response()->json([
                'success' => false,
                'message' => 'Nessuna assegnazione attiva trovata per questo DPI'
            ], 422);
        }

        DB::beginTransaction();
        
        try {
            $assegnazione = $dpi->registraRestituzione(
                $validated['stato_restituzione'],
                $validated['motivo_restituzione'],
                ['note' => $validated['note']]
            );

            Notifica::crea([
                'destinatari' => [$assegnazione->volontario->user_id],
                'titolo' => 'DPI Restituito',
                'messaggio' => "La restituzione del DPI {$dpi->nome} è stata registrata",
                'tipo' => 'generale'
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Restituzione registrata con successo',
                'nuovo_stato' => $dpi->fresh()->stato_label,
                'disponibile' => $dpi->fresh()->disponibile
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante la restituzione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // VERIFICA - Registra verifica DPI
    // ===================================
    public function verifica(Request $request, Dpi $dpi)
    {
        $validated = $request->validate([
            'esito' => 'required|boolean',
            'note_verifica' => 'nullable|string',
            'prossima_verifica' => 'nullable|date|after:today'
        ]);

        DB::beginTransaction();
        
        try {
            $dpi->registraVerifica(
                $validated['esito'],
                $validated['note_verifica'],
                $validated['prossima_verifica']
            );

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Verifica registrata con successo',
                'esito' => $validated['esito'] ? 'CONFORME' : 'NON CONFORME',
                'nuovo_stato' => $dpi->fresh()->stato_label,
                'prossima_verifica' => $dpi->fresh()->prossima_verifica?->format('d/m/Y')
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante la verifica: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // SCADENZE - Vista scadenze DPI
    // ===================================
    public function scadenze()
    {
        $dpiInScadenza = Dpi::whereDate('scadenza', '<=', now()->addDays(60))
                           ->whereDate('scadenza', '>=', now())
                           ->orderBy('scadenza')
                           ->get()
                           ->groupBy(function($dpi) {
                               $giorni = now()->diffInDays($dpi->scadenza, false);
                               if ($giorni <= 7) return 'urgenti';
                               if ($giorni <= 30) return 'vicine';
                               return 'future';
                           });

        $dpiDaVerificare = Dpi::whereDate('prossima_verifica', '<=', now())
                              ->where('disponibile', true)
                              ->orderBy('prossima_verifica')
                              ->get();

        $dpiScaduti = Dpi::whereDate('scadenza', '<', now())
                         ->orderBy('scadenza', 'desc')
                         ->get();

        $statisticheScadenze = [
            'scadenze_urgenti' => $dpiInScadenza->get('urgenti', collect())->count(),
            'scadenze_vicine' => $dpiInScadenza->get('vicine', collect())->count(),
            'da_verificare' => $dpiDaVerificare->count(),
            'gia_scaduti' => $dpiScaduti->count()
        ];

        return view('dpi.scadenze', compact(
            'dpiInScadenza',
            'dpiDaVerificare',
            'dpiScaduti',
            'statisticheScadenze'
        ));
    }

    // ===================================
    // EXPORT - Esporta dati DPI
    // ===================================
    public function export(Request $request)
    {
        $query = Dpi::with(['assegnazioneAttuale.volontario.user']);

        if ($request->categoria) {
            $query->where('categoria', $request->categoria);
        }

        if ($request->stato) {
            $query->where('stato', $request->stato);
        }

        $dpi = $query->orderBy('nome')->get();

        $filename = 'dpi_' . now()->format('Y-m-d_H-i-s') . '.csv';
        
        $headers = [
            'Content-Type' => 'text/csv; charset=UTF-8',
            'Content-Disposition' => "attachment; filename=\"{$filename}\""
        ];

        $callback = function() use ($dpi) {
            $file = fopen('php://output', 'w');
            
            fputs($file, "\xEF\xBB\xBF");
            
            fputcsv($file, [
                'Codice DPI',
                'Nome',
                'Categoria',
                'Taglia',
                'Marca',
                'Modello',
                'Stato',
                'Assegnato A',
                'Data Acquisto',
                'Scadenza',
                'Prossima Verifica',
                'Utilizzi Effettuati'
            ], ';');

            foreach ($dpi as $item) {
                fputcsv($file, [
                    $item->codice_dpi,
                    $item->nome,
                    $item->categoria_label,
                    $item->taglia,
                    $item->marca,
                    $item->modello,
                    $item->stato_label,
                    $item->assegnazioneAttuale?->volontario->user->nome_completo,
                    $item->data_acquisto?->format('d/m/Y'),
                    $item->scadenza?->format('d/m/Y'),
                    $item->prossima_verifica?->format('d/m/Y'),
                    $item->utilizzi_effettuati
                ], ';');
            }

            fclose($file);
        };

        return response()->stream($callback, 200, $headers);
    }

    // ===================================
    // DESTROY - Elimina DPI
    // ===================================
    public function destroy(Dpi $dpi)
    {
        if ($dpi->assegnazioneAttuale) {
            return response()->json([
                'success' => false,
                'message' => 'Impossibile eliminare DPI attualmente assegnato'
            ], 422);
        }

        if ($dpi->assegnazioni()->count() > 0) {
            return response()->json([
                'success' => false,
                'message' => 'Impossibile eliminare DPI con storico assegnazioni'
            ], 422);
        }

        DB::beginTransaction();
        
        try {
            $nomeDpi = $dpi->nome;
            $codiceDpi = $dpi->codice_dpi;
            
            if ($dpi->foto) {
                Storage::disk('public')->delete($dpi->foto);
            }
            
            $dpi->delete();

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'eliminazione_dpi',
                'modulo' => 'dpi',
                'risorsa_id' => $dpi->id,
                'descrizione' => "Eliminato DPI: {$nomeDpi} ({$codiceDpi})",
                'ip_address' => request()->ip(),
                'user_agent' => request()->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'DPI eliminato con successo'
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante l\'eliminazione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // METODI HELPER PRIVATI
    // ===================================

    private function generaCodiceDpi($categoria)
    {
        $prefisso = strtoupper(substr($categoria, 0, 3));
        $ultimoCodice = Dpi::where('codice_dpi', 'like', $prefisso . '%')
                           ->max('codice_dpi');

        if ($ultimoCodice) {
            $numero = intval(substr($ultimoCodice, -4)) + 1;
        } else {
            $numero = 1;
        }

        return $prefisso . str_pad($numero, 4, '0', STR_PAD_LEFT);
    }
}
--- EventiController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Evento;
use App\Models\Volontario;
use App\Models\Mezzo;
use App\Models\Magazzino;
use App\Models\Dpi;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class EventiController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('check.permission:eventi.view')->only(['index', 'show']);
        $this->middleware('check.permission:eventi.create')->only(['create', 'store']);
        $this->middleware('check.permission:eventi.edit')->only(['edit', 'update']);
        $this->middleware('check.permission:eventi.delete')->only(['destroy']);
    }

    /**
     * Display a listing of eventi
     */
    public function index(Request $request)
    {
        try {
            $query = Evento::with(['volontari', 'mezzi', 'createdBy']);

            // Filtri di ricerca
            if ($request->filled('search')) {
                $search = $request->search;
                $query->where(function($q) use ($search) {
                    $q->where('titolo', 'like', "%{$search}%")
                      ->orWhere('descrizione', 'like', "%{$search}%")
                      ->orWhere('luogo', 'like', "%{$search}%");
                });
            }

            // Filtro per tipo evento
            if ($request->filled('tipo')) {
                $query->where('tipo_evento', $request->tipo);
            }

            // Filtro per stato
            if ($request->filled('stato')) {
                $query->where('stato', $request->stato);
            }

            // Filtro per periodo
            if ($request->filled('data_da')) {
                $query->where('data_inizio', '>=', $request->data_da);
            }
            if ($request->filled('data_a')) {
                $query->where('data_fine', '<=', $request->data_a);
            }

            // Ordinamento
            $sortField = $request->get('sort', 'data_inizio');
            $sortDirection = $request->get('direction', 'asc');
            $query->orderBy($sortField, $sortDirection);

            $eventi = $query->paginate(15)->withQueryString();

            // Statistiche per dashboard
            $stats = [
                'totali' => Evento::count(),
                'programmati' => Evento::where('stato', 'programmato')->count(),
                'in_corso' => Evento::where('stato', 'in_corso')->count(),
                'completati' => Evento::where('stato', 'completato')->count(),
                'questo_mese' => Evento::whereMonth('data_inizio', now()->month)->count()
            ];

            return view('eventi.index', compact('eventi', 'stats'));

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento eventi: ' . $e->getMessage());
            return back()->with('error', 'Errore nel caricamento degli eventi');
        }
    }

    /**
     * Show the form for creating a new evento
     */
    public function create()
    {
        try {
            $volontari = Volontario::where('stato', 'attivo')
                                 ->orderBy('cognome')
                                 ->get();

            $mezzi = Mezzo::where('stato', 'disponibile')
                         ->orderBy('targa')
                         ->get();

            $materiali = Magazzino::where('quantita', '>', 0)
                                 ->orderBy('nome')
                                 ->get();

            $dpi = Dpi::where('quantita_disponibile', '>', 0)
                     ->orderBy('nome')
                     ->get();

            $tipi_evento = [
                'formazione' => 'Formazione',
                'emergenza' => 'Emergenza',
                'esercitazione' => 'Esercitazione',
                'evento_pubblico' => 'Evento Pubblico',
                'servizio' => 'Servizio',
                'altro' => 'Altro'
            ];

            return view('eventi.create', compact('volontari', 'mezzi', 'materiali', 'dpi', 'tipi_evento'));

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento form creazione evento: ' . $e->getMessage());
            return back()->with('error', 'Errore nel caricamento del modulo');
        }
    }

    /**
     * Store a newly created evento
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'titolo' => 'required|string|max:255',
            'descrizione' => 'required|string',
            'tipo_evento' => 'required|in:formazione,emergenza,esercitazione,evento_pubblico,servizio,altro',
            'data_inizio' => 'required|date|after_or_equal:today',
            'data_fine' => 'required|date|after_or_equal:data_inizio',
            'luogo' => 'required|string|max:255',
            'indirizzo' => 'nullable|string|max:500',
            'coordinate_lat' => 'nullable|numeric|between:-90,90',
            'coordinate_lng' => 'nullable|numeric|between:-180,180',
            'max_partecipanti' => 'nullable|integer|min:1',
            'note' => 'nullable|string',
            'volontari' => 'nullable|array',
            'volontari.*' => 'exists:volontari,id',
            'mezzi' => 'nullable|array',
            'mezzi.*' => 'exists:mezzi,id',
            'materiali' => 'nullable|array',
            'materiali.*.id' => 'exists:magazzino,id',
            'materiali.*.quantita' => 'integer|min:1',
            'dpi' => 'nullable|array',
            'dpi.*.id' => 'exists:dpi,id',
            'dpi.*.quantita' => 'integer|min:1'
        ]);

        DB::beginTransaction();

        try {
            // Verifica disponibilità volontari
            if ($request->filled('volontari')) {
                $volontariOccupati = $this->checkVolontariDisponibilita(
                    $request->volontari,
                    $request->data_inizio,
                    $request->data_fine
                );

                if (!empty($volontariOccupati)) {
                    $nomi = Volontario::whereIn('id', $volontariOccupati)
                                    ->pluck('nome', 'cognome')
                                    ->map(fn($nome, $cognome) => "$cognome $nome")
                                    ->join(', ');
                    
                    return back()->withInput()
                                ->with('error', "I seguenti volontari non sono disponibili nel periodo selezionato: $nomi");
                }
            }

            // Verifica disponibilità mezzi
            if ($request->filled('mezzi')) {
                $mezziOccupati = $this->checkMezziDisponibilita(
                    $request->mezzi,
                    $request->data_inizio,
                    $request->data_fine
                );

                if (!empty($mezziOccupati)) {
                    $targhe = Mezzo::whereIn('id', $mezziOccupati)->pluck('targa')->join(', ');
                    return back()->withInput()
                                ->with('error', "I seguenti mezzi non sono disponibili nel periodo selezionato: $targhe");
                }
            }

            // Verifica disponibilità materiali
            if ($request->filled('materiali')) {
                foreach ($request->materiali as $materiale) {
                    $item = Magazzino::find($materiale['id']);
                    if ($item->quantita < $materiale['quantita']) {
                        return back()->withInput()
                                    ->with('error', "Quantità insufficiente per: {$item->nome}. Disponibili: {$item->quantita}");
                    }
                }
            }

            // Verifica disponibilità DPI
            if ($request->filled('dpi')) {
                foreach ($request->dpi as $dpi) {
                    $item = Dpi::find($dpi['id']);
                    if ($item->quantita_disponibile < $dpi['quantita']) {
                        return back()->withInput()
                                    ->with('error', "Quantità insufficiente per DPI: {$item->nome}. Disponibili: {$item->quantita_disponibile}");
                    }
                }
            }

            // Crea l'evento
            $evento = Evento::create([
                'titolo' => $validated['titolo'],
                'descrizione' => $validated['descrizione'],
                'tipo_evento' => $validated['tipo_evento'],
                'data_inizio' => $validated['data_inizio'],
                'data_fine' => $validated['data_fine'],
                'luogo' => $validated['luogo'],
                'indirizzo' => $validated['indirizzo'],
                'coordinate_lat' => $validated['coordinate_lat'],
                'coordinate_lng' => $validated['coordinate_lng'],
                'max_partecipanti' => $validated['max_partecipanti'],
                'note' => $validated['note'],
                'stato' => 'programmato',
                'created_by' => Auth::id()
            ]);

            // Assegna volontari
            if ($request->filled('volontari')) {
                $evento->volontari()->attach($request->volontari, [
                    'created_at' => now(),
                    'updated_at' => now()
                ]);
            }

            // Assegna mezzi
            if ($request->filled('mezzi')) {
                $evento->mezzi()->attach($request->mezzi, [
                    'created_at' => now(),
                    'updated_at' => now()
                ]);
            }

            // Gestione materiali dal magazzino
            if ($request->filled('materiali')) {
                foreach ($request->materiali as $materiale) {
                    $item = Magazzino::find($materiale['id']);
                    
                    // Registra l'utilizzo
                    $evento->materiali()->attach($materiale['id'], [
                        'quantita_utilizzata' => $materiale['quantita'],
                        'created_at' => now(),
                        'updated_at' => now()
                    ]);

                    // Aggiorna disponibilità (opzionale - dipende dalla logica di business)
                    // $item->decrement('quantita', $materiale['quantita']);
                }
            }

            // Gestione DPI
            if ($request->filled('dpi')) {
                foreach ($request->dpi as $dpi) {
                    $item = Dpi::find($dpi['id']);
                    
                    // Registra l'assegnazione
                    $evento->dpi()->attach($dpi['id'], [
                        'quantita_assegnata' => $dpi['quantita'],
                        'created_at' => now(),
                        'updated_at' => now()
                    ]);

                    // Aggiorna disponibilità
                    $item->decrement('quantita_disponibile', $dpi['quantita']);
                }
            }

            DB::commit();

            // Log dell'attività
            Log::info("Evento creato: {$evento->titolo}", [
                'evento_id' => $evento->id,
                'user_id' => Auth::id(),
                'volontari_count' => count($request->volontari ?? []),
                'mezzi_count' => count($request->mezzi ?? [])
            ]);

            return redirect()->route('eventi.show', $evento)
                           ->with('success', 'Evento creato con successo!');

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Errore nella creazione evento: ' . $e->getMessage());
            return back()->withInput()
                        ->with('error', 'Errore nella creazione dell\'evento: ' . $e->getMessage());
        }
    }

    /**
     * Display the specified evento
     */
    public function show(Evento $evento)
    {
        try {
            $evento->load([
                'volontari' => function($query) {
                    $query->orderBy('cognome');
                },
                'mezzi' => function($query) {
                    $query->orderBy('targa');
                },
                'materiali',
                'dpi',
                'createdBy'
            ]);

            // Calcola statistiche evento
            $stats = [
                'volontari_totali' => $evento->volontari->count(),
                'mezzi_totali' => $evento->mezzi->count(),
                'durata_ore' => Carbon::parse($evento->data_inizio)->diffInHours(Carbon::parse($evento->data_fine)),
                'giorni_mancanti' => now()->diffInDays(Carbon::parse($evento->data_inizio), false)
            ];

            return view('eventi.show', compact('evento', 'stats'));

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento evento: ' . $e->getMessage());
            return back()->with('error', 'Errore nel caricamento dell\'evento');
        }
    }

    /**
     * Show the form for editing the specified evento
     */
    public function edit(Evento $evento)
    {
        try {
            $evento->load(['volontari', 'mezzi', 'materiali', 'dpi']);

            $volontari = Volontario::where('stato', 'attivo')
                                 ->orderBy('cognome')
                                 ->get();

            $mezzi = Mezzo::where('stato', 'disponibile')
                         ->orderBy('targa')
                         ->get();

            $materiali = Magazzino::where('quantita', '>', 0)
                                 ->orderBy('nome')
                                 ->get();

            $dpi = Dpi::where('quantita_disponibile', '>', 0)
                     ->orderBy('nome')
                     ->get();

            $tipi_evento = [
                'formazione' => 'Formazione',
                'emergenza' => 'Emergenza',
                'esercitazione' => 'Esercitazione',
                'evento_pubblico' => 'Evento Pubblico',
                'servizio' => 'Servizio',
                'altro' => 'Altro'
            ];

            return view('eventi.edit', compact('evento', 'volontari', 'mezzi', 'materiali', 'dpi', 'tipi_evento'));

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento form modifica evento: ' . $e->getMessage());
            return back()->with('error', 'Errore nel caricamento del modulo di modifica');
        }
    }

    /**
     * Update the specified evento
     */
    public function update(Request $request, Evento $evento)
    {
        $validated = $request->validate([
            'titolo' => 'required|string|max:255',
            'descrizione' => 'required|string',
            'tipo_evento' => 'required|in:formazione,emergenza,esercitazione,evento_pubblico,servizio,altro',
            'data_inizio' => 'required|date',
            'data_fine' => 'required|date|after_or_equal:data_inizio',
            'luogo' => 'required|string|max:255',
            'indirizzo' => 'nullable|string|max:500',
            'coordinate_lat' => 'nullable|numeric|between:-90,90',
            'coordinate_lng' => 'nullable|numeric|between:-180,180',
            'max_partecipanti' => 'nullable|integer|min:1',
            'note' => 'nullable|string',
            'stato' => 'required|in:programmato,confermato,in_corso,completato,cancellato',
            'volontari' => 'nullable|array',
            'volontari.*' => 'exists:volontari,id',
            'mezzi' => 'nullable|array',
            'mezzi.*' => 'exists:mezzi,id'
        ]);

        DB::beginTransaction();

        try {
            // Verifica disponibilità solo se le date sono cambiate
            $dateChanged = $evento->data_inizio != $validated['data_inizio'] || 
                          $evento->data_fine != $validated['data_fine'];

            if ($dateChanged && $request->filled('volontari')) {
                $volontariOccupati = $this->checkVolontariDisponibilita(
                    $request->volontari,
                    $request->data_inizio,
                    $request->data_fine,
                    $evento->id
                );

                if (!empty($volontariOccupati)) {
                    $nomi = Volontario::whereIn('id', $volontariOccupati)
                                    ->pluck('nome', 'cognome')
                                    ->map(fn($nome, $cognome) => "$cognome $nome")
                                    ->join(', ');
                    
                    return back()->withInput()
                                ->with('error', "I seguenti volontari non sono disponibili nel nuovo periodo: $nomi");
                }
            }

            if ($dateChanged && $request->filled('mezzi')) {
                $mezziOccupati = $this->checkMezziDisponibilita(
                    $request->mezzi,
                    $request->data_inizio,
                    $request->data_fine,
                    $evento->id
                );

                if (!empty($mezziOccupati)) {
                    $targhe = Mezzo::whereIn('id', $mezziOccupati)->pluck('targa')->join(', ');
                    return back()->withInput()
                                ->with('error', "I seguenti mezzi non sono disponibili nel nuovo periodo: $targhe");
                }
            }

            // Aggiorna l'evento
            $evento->update($validated);

            // Aggiorna associazioni volontari
            if ($request->has('volontari')) {
                $evento->volontari()->sync($request->volontari);
            }

            // Aggiorna associazioni mezzi
            if ($request->has('mezzi')) {
                $evento->mezzi()->sync($request->mezzi);
            }

            DB::commit();

            Log::info("Evento aggiornato: {$evento->titolo}", [
                'evento_id' => $evento->id,
                'user_id' => Auth::id(),
                'changes' => $evento->getChanges()
            ]);

            return redirect()->route('eventi.show', $evento)
                           ->with('success', 'Evento aggiornato con successo!');

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Errore nell\'aggiornamento evento: ' . $e->getMessage());
            return back()->withInput()
                        ->with('error', 'Errore nell\'aggiornamento dell\'evento: ' . $e->getMessage());
        }
    }

    /**
     * Remove the specified evento
     */
    public function destroy(Evento $evento)
    {
        try {
            // Verifica che l'evento possa essere eliminato
            if ($evento->stato === 'in_corso') {
                return back()->with('error', 'Non è possibile eliminare un evento in corso');
            }

            DB::beginTransaction();

            // Ripristina disponibilità DPI se necessario
            foreach ($evento->dpi as $dpi) {
                $dpiItem = Dpi::find($dpi->id);
                $dpiItem->increment('quantita_disponibile', $dpi->pivot->quantita_assegnata);
            }

            // Rimuovi tutte le associazioni
            $evento->volontari()->detach();
            $evento->mezzi()->detach();
            $evento->materiali()->detach();
            $evento->dpi()->detach();

            $titoloEvento = $evento->titolo;
            $evento->delete();

            DB::commit();

            Log::info("Evento eliminato: $titoloEvento", [
                'evento_id' => $evento->id,
                'user_id' => Auth::id()
            ]);

            return redirect()->route('eventi.index')
                           ->with('success', 'Evento eliminato con successo');

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Errore nell\'eliminazione evento: ' . $e->getMessage());
            return back()->with('error', 'Errore nell\'eliminazione dell\'evento');
        }
    }

    /**
     * Verifica disponibilità volontari nel periodo specificato
     */
    private function checkVolontariDisponibilita($volontariIds, $dataInizio, $dataFine, $eventoEscluso = null)
    {
        $query = DB::table('evento_volontario')
            ->join('eventi', 'evento_volontario.evento_id', '=', 'eventi.id')
            ->whereIn('evento_volontario.volontario_id', $volontariIds)
            ->where('eventi.stato', '!=', 'cancellato')
            ->where(function($q) use ($dataInizio, $dataFine) {
                $q->whereBetween('eventi.data_inizio', [$dataInizio, $dataFine])
                  ->orWhereBetween('eventi.data_fine', [$dataInizio, $dataFine])
                  ->orWhere(function($subQ) use ($dataInizio, $dataFine) {
                      $subQ->where('eventi.data_inizio', '<=', $dataInizio)
                           ->where('eventi.data_fine', '>=', $dataFine);
                  });
            });

        if ($eventoEscluso) {
            $query->where('eventi.id', '!=', $eventoEscluso);
        }

        return $query->pluck('evento_volontario.volontario_id')->toArray();
    }

    /**
     * Verifica disponibilità mezzi nel periodo specificato
     */
    private function checkMezziDisponibilita($mezziIds, $dataInizio, $dataFine, $eventoEscluso = null)
    {
        $query = DB::table('evento_mezzo')
            ->join('eventi', 'evento_mezzo.evento_id', '=', 'eventi.id')
            ->whereIn('evento_mezzo.mezzo_id', $mezziIds)
            ->where('eventi.stato', '!=', 'cancellato')
            ->where(function($q) use ($dataInizio, $dataFine) {
                $q->whereBetween('eventi.data_inizio', [$dataInizio, $dataFine])
                  ->orWhereBetween('eventi.data_fine', [$dataInizio, $dataFine])
                  ->orWhere(function($subQ) use ($dataInizio, $dataFine) {
                      $subQ->where('eventi.data_inizio', '<=', $dataInizio)
                           ->where('eventi.data_fine', '>=', $dataFine);
                  });
            });

        if ($eventoEscluso) {
            $query->where('eventi.id', '!=', $eventoEscluso);
        }

        return $query->pluck('evento_mezzo.mezzo_id')->toArray();
    }

    /**
     * Cambia lo stato di un evento
     */
    public function changeStatus(Request $request, Evento $evento)
    {
        $validated = $request->validate([
            'stato' => 'required|in:programmato,confermato,in_corso,completato,cancellato',
            'note_stato' => 'nullable|string|max:500'
        ]);

        try {
            $vecchioStato = $evento->stato;
            
            $evento->update([
                'stato' => $validated['stato'],
                'note_stato' => $validated['note_stato'] ?? null
            ]);

            Log::info("Stato evento cambiato da $vecchioStato a {$validated['stato']}", [
                'evento_id' => $evento->id,
                'user_id' => Auth::id()
            ]);

            return back()->with('success', 'Stato evento aggiornato con successo');

        } catch (\Exception $e) {
            Log::error('Errore nel cambio stato evento: ' . $e->getMessage());
            return back()->with('error', 'Errore nell\'aggiornamento dello stato');
        }
    }

    /**
     * Duplica un evento esistente
     */
    public function duplicate(Evento $evento)
    {
        try {
            DB::beginTransaction();

            $nuovoEvento = $evento->replicate();
            $nuovoEvento->titolo = $evento->titolo . ' (Copia)';
            $nuovoEvento->stato = 'programmato';
            $nuovoEvento->data_inizio = null;
            $nuovoEvento->data_fine = null;
            $nuovoEvento->created_by = Auth::id();
            $nuovoEvento->save();

            // Copia le relazioni (senza le date - dovranno essere reimpostate)
            // Non copiamo volontari e mezzi per evitare conflitti di disponibilità

            DB::commit();

            return redirect()->route('eventi.edit', $nuovoEvento)
                           ->with('success', 'Evento duplicato! Imposta le nuove date e assegna le risorse.');

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Errore nella duplicazione evento: ' . $e->getMessage());
            return back()->with('error', 'Errore nella duplicazione dell\'evento');
        }
    }

    /**
     * Mostra il calendario degli eventi
     */
    public function calendario(Request $request)
    {
        try {
            $eventi = Evento::select('id', 'titolo', 'data_inizio', 'data_fine', 'stato', 'tipo_evento')
                           ->where('stato', '!=', 'cancellato')
                           ->get()
                           ->map(function($evento) {
                               return [
                                   'id' => $evento->id,
                                   'title' => $evento->titolo,
                                   'start' => $evento->data_inizio,
                                   'end' => $evento->data_fine,
                                   'url' => route('eventi.show', $evento->id),
                                   'backgroundColor' => $this->getColorByTipo($evento->tipo_evento),
                                   'borderColor' => $this->getColorByTipo($evento->tipo_evento),
                                   'textColor' => '#fff'
                               ];
                           });

            if ($request->wantsJson()) {
                return response()->json($eventi);
            }

            return view('eventi.calendario', compact('eventi'));

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento calendario: ' . $e->getMessage());
            return back()->with('error', 'Errore nel caricamento del calendario');
        }
    }

    /**
     * Restituisce il colore per tipo evento
     */
    private function getColorByTipo($tipo)
    {
        $colors = [
            'formazione' => '#3498db',
            'emergenza' => '#e74c3c',
            'esercitazione' => '#f39c12',
            'evento_pubblico' => '#9b59b6',
            'servizio' => '#2ecc71',
            'altro' => '#95a5a6'
        ];

        return $colors[$tipo] ?? '#95a5a6';
    }

    /**
     * Export eventi in PDF
     */
    public function exportPdf(Request $request)
    {
        try {
            $eventi = Evento::with(['volontari', 'mezzi'])
                           ->when($request->data_da, function($q) use ($request) {
                               $q->where('data_inizio', '>=', $request->data_da);
                           })
                           ->when($request->data_a, function($q) use ($request) {
                               $q->where('data_fine', '<=', $request->data_a);
                           })
                           ->orderBy('data_inizio')
                           ->get();

            $pdf = app('dompdf.wrapper');
            $pdf->loadView('eventi.exports.pdf', compact('eventi'));

            return $pdf->download('eventi_' . now()->format('Y_m_d') . '.pdf');

        } catch (\Exception $e) {
            Log::error('Errore nell\'export PDF eventi: ' . $e->getMessage());
            return back()->with('error', 'Errore nell\'export PDF');
        }
    }

    /**
     * Export eventi in Excel
     */
    public function exportExcel(Request $request)
    {
        try {
            return (new \App\Exports\EventiExport($request->all()))
                   ->download('eventi_' . now()->format('Y_m_d') . '.xlsx');

        } catch (\Exception $e) {
            Log::error('Errore nell\'export Excel eventi: ' . $e->getMessage());
            return back()->with('error', 'Errore nell\'export Excel');
        }
    }
}
--- MagazzinoController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Magazzino;
use App\Models\MovimentoMagazzino;
use App\Models\User;
use App\Models\LogAttivita;
use App\Models\Notifica;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Carbon\Carbon;

class MagazzinoController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('permission:magazzino,visualizza')->only(['index', 'show']);
        $this->middleware('permission:magazzino,crea')->only(['create', 'store']);
        $this->middleware('permission:magazzino,modifica')->only(['edit', 'update', 'carico', 'scarico']);
        $this->middleware('permission:magazzino,elimina')->only(['destroy']);
    }

    // ===================================
    // INDEX - Lista articoli magazzino
    // ===================================
    public function index(Request $request)
    {
        $query = Magazzino::with(['ultimoMovimento', 'responsabile']);

        // Filtri
        if ($request->filled('categoria')) {
            $query->where('categoria', $request->categoria);
        }

        if ($request->filled('stato')) {
            switch ($request->stato) {
                case 'disponibili':
                    $query->where('attivo', true)->where('quantita_attuale', '>', 0);
                    break;
                case 'sottoscorta':
                    $query->whereRaw('quantita_attuale <= quantita_minima');
                    break;
                case 'esauriti':
                    $query->where('quantita_attuale', '<=', 0);
                    break;
                case 'in_scadenza':
                    $query->whereDate('scadenza', '<=', now()->addDays(30))
                          ->whereDate('scadenza', '>=', now());
                    break;
                case 'scaduti':
                    $query->whereDate('scadenza', '<', now());
                    break;
                case 'non_attivi':
                    $query->where('attivo', false);
                    break;
            }
        }

        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('nome_articolo', 'like', "%{$search}%")
                  ->orWhere('descrizione', 'like', "%{$search}%")
                  ->orWhere('codice_articolo', 'like', "%{$search}%")
                  ->orWhere('codice_interno', 'like', "%{$search}%")
                  ->orWhere('lotto', 'like', "%{$search}%");
            });
        }

        $sortField = $request->get('sort', 'nome_articolo');
        $sortDirection = $request->get('direction', 'asc');
        $query->orderBy($sortField, $sortDirection);

        $articoli = $query->paginate(20);

        $statistiche = [
            'totale_articoli' => Magazzino::count(),
            'articoli_attivi' => Magazzino::where('attivo', true)->count(),
            'articoli_sottoscorta' => Magazzino::whereRaw('quantita_attuale <= quantita_minima')->count(),
            'articoli_in_scadenza' => Magazzino::whereDate('scadenza', '<=', now()->addDays(30))
                                             ->whereDate('scadenza', '>=', now())
                                             ->count(),
            'articoli_scaduti' => Magazzino::whereDate('scadenza', '<', now())->count(),
            'valore_totale_stock' => Magazzino::selectRaw('SUM(quantita_attuale * COALESCE(prezzo_unitario, 0)) as totale')
                                             ->value('totale') ?? 0
        ];

        $categorie = Magazzino::select('categoria')
                             ->distinct()
                             ->orderBy('categoria')
                             ->pluck('categoria', 'categoria');

        if ($request->ajax()) {
            return response()->json([
                'html' => view('magazzino.partials.table', compact('articoli'))->render(),
                'pagination' => $articoli->links()->render()
            ]);
        }

        return view('magazzino.index', compact('articoli', 'statistiche', 'categorie'));
    }

    // ===================================
    // CREATE - Form creazione articolo
    // ===================================
    public function create()
    {
        $categorie = [
            'farmaci' => 'Farmaci',
            'dispositivi_medici' => 'Dispositivi Medici',
            'consumabili' => 'Materiale Consumabile',
            'dpi' => 'Dispositivi di Protezione',
            'pulizia' => 'Materiale Pulizia',
            'ufficio' => 'Materiale Ufficio',
            'altro' => 'Altro'
        ];

        $responsabili = User::whereIn('ruolo', ['admin', 'direttivo', 'mezzi'])
                           ->where('attivo', true)
                           ->orderBy('nome')
                           ->get();

        return view('magazzino.create', compact('categorie', 'responsabili'));
    }

    // ===================================
    // STORE - Salva nuovo articolo
    // ===================================
    public function store(Request $request)
    {
        $validated = $request->validate([
            'nome_articolo' => 'required|string|max:255',
            'descrizione' => 'nullable|string',
            'codice_articolo' => 'nullable|string|max:255|unique:magazzino,codice_articolo',
            'codice_interno' => 'nullable|string|max:255|unique:magazzino,codice_interno',
            'quantita_attuale' => 'required|integer|min:0',
            'quantita_minima' => 'required|integer|min:0',
            'unita_misura' => 'required|string|max:50',
            'categoria' => 'required|string|max:100',
            'scadenza' => 'nullable|date|after:today',
            'lotto' => 'nullable|string|max:255',
            'prezzo_unitario' => 'nullable|numeric|min:0',
            'fornitore_principale' => 'nullable|string|max:255',
            'ubicazione' => 'nullable|string|max:255',
            'zona_magazzino' => 'required|string|max:100',
            'farmaco' => 'boolean',
            'dispositivo_medico' => 'boolean',
            'responsabile_id' => 'nullable|exists:users,id',
            'note' => 'nullable|string',
            'foto' => 'nullable|image|max:5120'
        ]);

        DB::beginTransaction();
        
        try {
            if (empty($validated['codice_interno'])) {
                $validated['codice_interno'] = $this->generaCodiceInterno($validated['categoria']);
            }

            if ($request->hasFile('foto')) {
                $validated['foto'] = $request->file('foto')->store('magazzino/foto', 'public');
            }

            $articolo = Magazzino::create([
                ...$validated,
                'attivo' => true
            ]);

            if ($validated['quantita_attuale'] > 0) {
                $articolo->registraCarico(
                    $validated['quantita_attuale'],
                    'Carico iniziale alla creazione articolo',
                    auth()->id()
                );
            }

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'creazione_articolo_magazzino',
                'modulo' => 'magazzino',
                'risorsa_id' => $articolo->id,
                'descrizione' => "Creato articolo magazzino: {$articolo->nome_articolo}",
                'ip_address' => $request->ip(),
                'user_agent' => $request->userAgent(),
                'data_ora' => now()
            ]);

            if ($validated['responsabile_id']) {
                Notifica::crea([
                    'destinatari' => [$validated['responsabile_id']],
                    'titolo' => 'Nuovo Articolo Assegnato',
                    'messaggio' => "Ti è stato assegnato un nuovo articolo da gestire: {$articolo->nome_articolo}",
                    'tipo' => 'generale'
                ]);
            }

            DB::commit();

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => 'Articolo creato con successo',
                    'redirect' => route('magazzino.show', $articolo->id)
                ]);
            }

            return redirect()->route('magazzino.show', $articolo->id)
                           ->with('success', 'Articolo creato con successo');

        } catch (\Exception $e) {
            DB::rollback();
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Errore durante la creazione: ' . $e->getMessage()
                ], 500);
            }

            return back()->withInput()
                        ->withErrors(['error' => 'Errore durante la creazione: ' . $e->getMessage()]);
        }
    }

    // ===================================
    // SHOW - Dettagli articolo
    // ===================================
    public function show(Magazzino $magazzino)
    {
        $magazzino->load([
            'movimenti' => function($query) {
                $query->with('user')->orderBy('created_at', 'desc')->limit(20);
            },
            'responsabile',
            'tickets'
        ]);

        $statistiche = [
            'movimenti_totali' => $magazzino->movimenti->count(),
            'carichi_mese' => $magazzino->movimenti()
                                      ->where('tipo', 'carico')
                                      ->whereMonth('created_at', now()->month)
                                      ->sum('quantita'),
            'scarichi_mese' => $magazzino->movimenti()
                                       ->where('tipo', 'scarico')
                                       ->whereMonth('created_at', now()->month)
                                       ->sum('quantita'),
            'valore_stock' => $magazzino->valore_stock,
            'ultimo_movimento' => $magazzino->ultimoMovimento?->created_at?->diffForHumans()
        ];

        $movimentiRecenti = $magazzino->movimenti()
                                    ->with('user')
                                    ->orderBy('created_at', 'desc')
                                    ->limit(10)
                                    ->get();

        return view('magazzino.show', compact('magazzino', 'statistiche', 'movimentiRecenti'));
    }

    // ===================================
    // EDIT - Form modifica articolo
    // ===================================
    public function edit(Magazzino $magazzino)
    {
        $categorie = [
            'farmaci' => 'Farmaci',
            'dispositivi_medici' => 'Dispositivi Medici',
            'consumabili' => 'Materiale Consumabile',
            'dpi' => 'Dispositivi di Protezione',
            'pulizia' => 'Materiale Pulizia',
            'ufficio' => 'Materiale Ufficio',
            'altro' => 'Altro'
        ];

        $responsabili = User::whereIn('ruolo', ['admin', 'direttivo', 'mezzi'])
                           ->where('attivo', true)
                           ->orderBy('nome')
                           ->get();

        return view('magazzino.edit', compact('magazzino', 'categorie', 'responsabili'));
    }

    // ===================================
    // UPDATE - Aggiorna articolo
    // ===================================
    public function update(Request $request, Magazzino $magazzino)
    {
        $validated = $request->validate([
            'nome_articolo' => 'required|string|max:255',
            'descrizione' => 'nullable|string',
            'codice_articolo' => [
                'nullable',
                'string',
                'max:255',
                Rule::unique('magazzino')->ignore($magazzino->id)
            ],
            'quantita_minima' => 'required|integer|min:0',
            'unita_misura' => 'required|string|max:50',
            'categoria' => 'required|string|max:100',
            'scadenza' => 'nullable|date',
            'lotto' => 'nullable|string|max:255',
            'prezzo_unitario' => 'nullable|numeric|min:0',
            'fornitore_principale' => 'nullable|string|max:255',
            'ubicazione' => 'nullable|string|max:255',
            'zona_magazzino' => 'required|string|max:100',
            'farmaco' => 'boolean',
            'dispositivo_medico' => 'boolean',
            'responsabile_id' => 'nullable|exists:users,id',
            'note' => 'nullable|string',
            'foto' => 'nullable|image|max:5120'
        ]);

        DB::beginTransaction();
        
        try {
            $responsabilePrecedente = $magazzino->responsabile_id;

            if ($request->hasFile('foto')) {
                if ($magazzino->foto) {
                    Storage::disk('public')->delete($magazzino->foto);
                }
                $validated['foto'] = $request->file('foto')->store('magazzino/foto', 'public');
            }

            $magazzino->update($validated);

            if ($validated['responsabile_id'] && $validated['responsabile_id'] != $responsabilePrecedente) {
                Notifica::crea([
                    'destinatari' => [$validated['responsabile_id']],
                    'titolo' => 'Articolo Assegnato',
                    'messaggio' => "Ti è stato assegnato l'articolo: {$magazzino->nome_articolo}",
                    'tipo' => 'generale'
                ]);
            }

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'modifica_articolo_magazzino',
                'modulo' => 'magazzino',
                'risorsa_id' => $magazzino->id,
                'descrizione' => "Modificato articolo magazzino: {$magazzino->nome_articolo}",
                'ip_address' => $request->ip(),
                'user_agent' => $request->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => 'Articolo aggiornato con successo'
                ]);
            }

            return redirect()->route('magazzino.show', $magazzino->id)
                           ->with('success', 'Articolo aggiornato con successo');

        } catch (\Exception $e) {
            DB::rollback();
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Errore durante l\'aggiornamento: ' . $e->getMessage()
                ], 500);
            }

            return back()->withInput()
                        ->withErrors(['error' => 'Errore durante l\'aggiornamento: ' . $e->getMessage()]);
        }
    }

    // ===================================
    // CARICO - Registra carico
    // ===================================
    public function carico(Request $request, Magazzino $magazzino)
    {
        $validated = $request->validate([
            'quantita' => 'required|integer|min:1',
            'motivo' => 'required|string|max:255',
            'prezzo_unitario' => 'nullable|numeric|min:0',
            'data_movimento' => 'required|date|before_or_equal:today'
        ]);

        DB::beginTransaction();
        
        try {
            $movimento = $magazzino->registraCarico(
                $validated['quantita'],
                $validated['motivo'],
                auth()->id(),
                [
                    'prezzo_unitario' => $validated['prezzo_unitario'],
                    'data_movimento' => $validated['data_movimento']
                ]
            );

            if ($validated['prezzo_unitario']) {
                $magazzino->update(['costo_ultimo_acquisto' => $validated['prezzo_unitario']]);
            }

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Carico registrato con successo',
                'nuova_quantita' => $magazzino->fresh()->quantita_attuale,
                'movimento' => [
                    'quantita' => $movimento->quantita,
                    'motivo' => $movimento->motivo,
                    'user' => auth()->user()->nome_completo,
                    'data' => $movimento->created_at->format('d/m/Y H:i')
                ]
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante il carico: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // SCARICO - Registra scarico
    // ===================================
    public function scarico(Request $request, Magazzino $magazzino)
    {
        $validated = $request->validate([
            'quantita' => 'required|integer|min:1|max:' . $magazzino->quantita_attuale,
            'motivo' => 'required|string|max:255',
            'data_movimento' => 'required|date|before_or_equal:today'
        ]);

        DB::beginTransaction();
        
        try {
            $movimento = $magazzino->registraScarico(
                $validated['quantita'],
                $validated['motivo'],
                auth()->id(),
                ['data_movimento' => $validated['data_movimento']]
            );

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Scarico registrato con successo',
                'nuova_quantita' => $magazzino->fresh()->quantita_attuale,
                'sottoscorta' => $magazzino->fresh()->sottoscorta,
                'movimento' => [
                    'quantita' => $movimento->quantita,
                    'motivo' => $movimento->motivo,
                    'user' => auth()->user()->nome_completo,
                    'data' => $movimento->created_at->format('d/m/Y H:i')
                ]
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante lo scarico: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // SCADENZE - Vista scadenze
    // ===================================
    public function scadenze()
    {
        $articoliInScadenza = Magazzino::whereDate('scadenza', '<=', now()->addDays(60))
                                     ->whereDate('scadenza', '>=', now())
                                     ->where('attivo', true)
                                     ->orderBy('scadenza')
                                     ->get()
                                     ->groupBy(function($articolo) {
                                         $giorni = now()->diffInDays($articolo->scadenza, false);
                                         if ($giorni <= 7) return 'urgenti';
                                         if ($giorni <= 30) return 'vicine';
                                         return 'future';
                                     });

        $articoliScaduti = Magazzino::whereDate('scadenza', '<', now())
                                  ->where('attivo', true)
                                  ->orderBy('scadenza', 'desc')
                                  ->get();

        $statisticheScadenze = [
            'scadenze_urgenti' => $articoliInScadenza->get('urgenti', collect())->count(),
            'scadenze_vicine' => $articoliInScadenza->get('vicine', collect())->count(),
            'scadenze_future' => $articoliInScadenza->get('future', collect())->count(),
            'gia_scaduti' => $articoliScaduti->count()
        ];

        return view('magazzino.scadenze', compact(
            'articoliInScadenza',
            'articoliScaduti',
            'statisticheScadenze'
        ));
    }

    // ===================================
    // EXPORT - Esporta dati magazzino
    // ===================================
    public function export(Request $request)
    {
        $query = Magazzino::with('responsabile');

        if ($request->categoria) {
            $query->where('categoria', $request->categoria);
        }
        
        if ($request->stato === 'sottoscorta') {
            $query->whereRaw('quantita_attuale <= quantita_minima');
        }

        $articoli = $query->orderBy('nome_articolo')->get();

        $filename = 'magazzino_' . now()->format('Y-m-d_H-i-s') . '.csv';
        
        $headers = [
            'Content-Type' => 'text/csv; charset=UTF-8',
            'Content-Disposition' => "attachment; filename=\"{$filename}\""
        ];

        $callback = function() use ($articoli) {
            $file = fopen('php://output', 'w');
            
            fputs($file, "\xEF\xBB\xBF");
            
            fputcsv($file, [
                'Nome Articolo',
                'Categoria',
                'Codice Interno',
                'Quantità Attuale',
                'Quantità Minima',
                'Unità Misura',
                'Prezzo Unitario',
                'Valore Stock',
                'Ubicazione',
                'Scadenza',
                'Responsabile'
            ], ';');

            foreach ($articoli as $articolo) {
                fputcsv($file, [
                    $articolo->nome_articolo,
                    $articolo->categoria,
                    $articolo->codice_interno,
                    $articolo->quantita_attuale,
                    $articolo->quantita_minima,
                    $articolo->unita_misura,
                    $articolo->prezzo_unitario,
                    $articolo->valore_stock,
                    $articolo->ubicazione,
                    $articolo->scadenza?->format('d/m/Y'),
                    $articolo->responsabile?->nome_completo
                ], ';');
            }

            fclose($file);
        };

        return response()->stream($callback, 200, $headers);
    }

    // ===================================
    // DESTROY - Elimina articolo
    // ===================================
    public function destroy(Magazzino $magazzino)
    {
        if ($magazzino->quantita_attuale > 0) {
            return response()->json([
                'success' => false,
                'message' => 'Impossibile eliminare articolo con quantità in magazzino'
            ], 422);
        }

        if ($magazzino->movimenti()->count() > 0) {
            return response()->json([
                'success' => false,
                'message' => 'Impossibile eliminare articolo con movimenti registrati'
            ], 422);
        }

        DB::beginTransaction();
        
        try {
            $nomeArticolo = $magazzino->nome_articolo;
            
            if ($magazzino->foto) {
                Storage::disk('public')->delete($magazzino->foto);
            }
            
            $magazzino->delete();

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'eliminazione_articolo_magazzino',
                'modulo' => 'magazzino',
                'risorsa_id' => $magazzino->id,
                'descrizione' => "Eliminato articolo magazzino: {$nomeArticolo}",
                'ip_address' => request()->ip(),
                'user_agent' => request()->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Articolo eliminato con successo'
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante l\'eliminazione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // METODI HELPER PRIVATI
    // ===================================

    private function generaCodiceInterno($categoria)
    {
        $prefisso = strtoupper(substr($categoria, 0, 3));
        $ultimoCodice = Magazzino::where('codice_interno', 'like', $prefisso . '%')
                                ->max('codice_interno');

        if ($ultimoCodice) {
            $numero = intval(substr($ultimoCodice, -4)) + 1;
        } else {
            $numero = 1;
        }

        return $prefisso . str_pad($numero, 4, '0', STR_PAD_LEFT);
    }
}
--- MezziController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Mezzo;
use App\Models\Manutenzione;
use App\Models\ChecklistTemplate;
use App\Models\ChecklistCompilata;
use App\Models\User;
use App\Models\LogAttivita;
use App\Models\Notifica;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Carbon\Carbon;

class MezziController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('can:access_mezzi')->except(['checklistCreate', 'checklistStore']);
        $this->middleware('permission:mezzi,visualizza')->only(['index', 'show']);
        $this->middleware('permission:mezzi,crea')->only(['create', 'store']);
        $this->middleware('permission:mezzi,modifica')->only(['edit', 'update']);
        $this->middleware('permission:mezzi,elimina')->only(['destroy']);
    }

    // ===================================
    // INDEX - Lista mezzi
    // ===================================
    public function index(Request $request)
    {
        $query = Mezzo::with(['ultimaManutenzione', 'ultimaChecklist', 'ultimoUtente', 'ticketsAperti']);

        // Filtri
        if ($request->filled('tipo')) {
            $query->where('tipo', $request->tipo);
        }

        if ($request->filled('stato')) {
            switch ($request->stato) {
                case 'operativi':
                    $query->where('attivo', true)->where('in_servizio', true);
                    break;
                case 'manutenzione':
                    $query->where('attivo', true)->where('in_servizio', false);
                    break;
                case 'dismessi':
                    $query->where('attivo', false);
                    break;
                case 'scadenze':
                    $query->where('attivo', true)
                          ->where(function($q) {
                              $q->whereDate('scadenza_revisione', '<=', now()->addDays(30))
                                ->orWhereDate('scadenza_assicurazione', '<=', now()->addDays(30))
                                ->orWhereDate('scadenza_bollo', '<=', now()->addDays(30));
                          });
                    break;
            }
        }

        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('targa', 'like', "%{$search}%")
                  ->orWhere('marca', 'like', "%{$search}%")
                  ->orWhere('modello', 'like', "%{$search}%")
                  ->orWhere('tipo', 'like', "%{$search}%");
            });
        }

        $sortField = $request->get('sort', 'targa');
        $sortDirection = $request->get('direction', 'asc');
        $query->orderBy($sortField, $sortDirection);

        $mezzi = $query->paginate(15);

        $statistiche = [
            'totale' => Mezzo::count(),
            'operativi' => Mezzo::where('attivo', true)->where('in_servizio', true)->count(),
            'in_manutenzione' => Mezzo::where('attivo', true)->where('in_servizio', false)->count(),
            'con_scadenze' => Mezzo::where('attivo', true)
                                  ->where(function($q) {
                                      $q->whereDate('scadenza_revisione', '<=', now()->addDays(30))
                                        ->orWhereDate('scadenza_assicurazione', '<=', now()->addDays(30));
                                  })->count(),
            'tickets_aperti' => Mezzo::whereHas('ticketsAperti')->count(),
            'km_totali' => Mezzo::where('attivo', true)->sum('km_attuali'),
            'costo_manutenzioni_anno' => Manutenzione::whereYear('data_manutenzione', now()->year)->sum('costo')
        ];

        if ($request->ajax()) {
            return response()->json([
                'html' => view('mezzi.partials.table', compact('mezzi'))->render(),
                'pagination' => $mezzi->links()->render()
            ]);
        }

        return view('mezzi.index', compact('mezzi', 'statistiche'));
    }

    // ===================================
    // CREATE - Form creazione mezzo
    // ===================================
    public function create()
    {
        return view('mezzi.create');
    }

    // ===================================
    // STORE - Salva nuovo mezzo
    // ===================================
    public function store(Request $request)
    {
        $validated = $request->validate([
            'targa' => 'required|string|max:10|unique:mezzi,targa',
            'tipo' => 'required|in:ambulanza_a,ambulanza_b,auto_medica,auto_servizio,furgone,altro',
            'marca' => 'required|string|max:255',
            'modello' => 'required|string|max:255',
            'anno' => 'required|integer|min:1990|max:' . (now()->year + 1),
            'numero_telaio' => 'nullable|string|max:255',
            'colore' => 'required|string|max:50',
            'alimentazione' => 'required|in:benzina,diesel,gpl,metano,elettrico,ibrido',
            'scadenza_revisione' => 'required|date|after:today',
            'scadenza_assicurazione' => 'required|date|after:today',
            'compagnia_assicurazione' => 'nullable|string|max:255',
            'numero_polizza' => 'nullable|string|max:255',
            'scadenza_bollo' => 'nullable|date',
            'scadenza_collaudo' => 'nullable|date',
            'km_attuali' => 'required|integer|min:0',
            'km_ultimo_tagliando' => 'nullable|integer|min:0',
            'intervallo_tagliando' => 'required|integer|min:1000|max:50000',
            'data_ultimo_tagliando' => 'nullable|date',
            'dotazioni_sanitarie' => 'nullable|array',
            'dotazioni_tecniche' => 'nullable|array',
            'aria_condizionata' => 'boolean',
            'gps' => 'boolean',
            'radio_ponte' => 'boolean',
            'frequenza_radio' => 'nullable|string|max:20',
            'costo_acquisto' => 'nullable|numeric|min:0',
            'data_acquisto' => 'nullable|date',
            'fornitore' => 'nullable|string|max:255',
            'note' => 'nullable|string'
        ]);

        DB::beginTransaction();
        
        try {
            $kmProssimoTagliando = null;
            if ($validated['km_ultimo_tagliando']) {
                $kmProssimoTagliando = $validated['km_ultimo_tagliando'] + $validated['intervallo_tagliando'];
            } else {
                $kmProssimoTagliando = $validated['km_attuali'] + $validated['intervallo_tagliando'];
            }

            $mezzo = Mezzo::create([
                ...$validated,
                'km_prossimo_tagliando' => $kmProssimoTagliando,
                'posizione_attuale' => 'sede',
                'attivo' => true,
                'in_servizio' => true
            ]);

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'creazione_mezzo',
                'modulo' => 'mezzi',
                'risorsa_id' => $mezzo->id,
                'descrizione' => "Creato nuovo mezzo: {$mezzo->targa} - {$mezzo->tipo_descrizione}",
                'ip_address' => $request->ip(),
                'user_agent' => $request->userAgent(),
                'data_ora' => now()
            ]);

            $responsabiliMezzi = User::where('ruolo', 'mezzi')->where('attivo', true)->pluck('id');
            
            if ($responsabiliMezzi->isNotEmpty()) {
                Notifica::crea([
                    'destinatari' => $responsabiliMezzi->toArray(),
                    'titolo' => 'Nuovo Mezzo Aggiunto',
                    'messaggio' => "È stato aggiunto un nuovo mezzo: {$mezzo->targa} ({$mezzo->tipo_descrizione})",
                    'tipo' => 'generale'
                ]);
            }

            DB::commit();

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => 'Mezzo creato con successo',
                    'redirect' => route('mezzi.show', $mezzo->id)
                ]);
            }

            return redirect()->route('mezzi.show', $mezzo->id)
                           ->with('success', 'Mezzo creato con successo');

        } catch (\Exception $e) {
            DB::rollback();
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Errore durante la creazione: ' . $e->getMessage()
                ], 500);
            }

            return back()->withInput()
                        ->withErrors(['error' => 'Errore durante la creazione: ' . $e->getMessage()]);
        }
    }

    // ===================================
    // SHOW - Dettagli mezzo
    // ===================================
    public function show(Mezzo $mezzo)
    {
        $mezzo->load([
            'manutenzioni' => function($query) {
                $query->orderBy('data_manutenzione', 'desc')->limit(10);
            },
            'checklistCompilate' => function($query) {
                $query->with('user')->orderBy('data_compilazione', 'desc')->limit(5);
            },
            'ultimoUtente',
            'tickets' => function($query) {
                $query->orderBy('created_at', 'desc')->limit(5);
            }
        ]);

        $statistiche = [
            'manutenzioni_anno' => $mezzo->manutenzioni()
                                        ->whereYear('data_manutenzione', now()->year)
                                        ->count(),
            'costo_manutenzioni_anno' => $mezzo->costo_manutenzioni_anno,
            'km_medio_mensile' => $mezzo->km_medio_mensile,
            'efficienza' => $mezzo->efficienza,
            'checklist_ultimo_mese' => $mezzo->checklistCompilate()
                                            ->where('data_compilazione', '>=', now()->subMonth())
                                            ->count(),
            'checklist_non_conformi' => $mezzo->checklistNonConformi()
                                             ->where('data_compilazione', '>=', now()->subMonth())
                                             ->count(),
            'tickets_aperti' => $mezzo->ticketsAperti->count()
        ];

        $scadenzeVicine = $mezzo->scadenze_vicine;

        $prossimiInterventi = $mezzo->manutenzioni()
                                   ->where('stato', 'programmata')
                                   ->orderBy('data_manutenzione')
                                   ->get();

        $checklistTemplates = ChecklistTemplate::where('attivo', true)
                                              ->where(function($query) use ($mezzo) {
                                                  $query->where('tipo_mezzo', $mezzo->tipo)
                                                        ->orWhere('tipo_mezzo', 'tutti');
                                              })
                                              ->orderBy('ordine')
                                              ->get();

        return view('mezzi.show', compact(
            'mezzo', 
            'statistiche', 
            'scadenzeVicine', 
            'prossimiInterventi', 
            'checklistTemplates'
        ));
    }

    // ===================================
    // EDIT - Form modifica mezzo
    // ===================================
    public function edit(Mezzo $mezzo)
    {
        return view('mezzi.edit', compact('mezzo'));
    }

    // ===================================
    // UPDATE - Aggiorna mezzo
    // ===================================
    public function update(Request $request, Mezzo $mezzo)
    {
        $validated = $request->validate([
            'targa' => [
                'required',
                'string',
                'max:10',
                Rule::unique('mezzi')->ignore($mezzo->id)
            ],
            'tipo' => 'required|in:ambulanza_a,ambulanza_b,auto_medica,auto_servizio,furgone,altro',
            'marca' => 'required|string|max:255',
            'modello' => 'required|string|max:255',
            'anno' => 'required|integer|min:1990|max:' . (now()->year + 1),
            'numero_telaio' => 'nullable|string|max:255',
            'colore' => 'required|string|max:50',
            'alimentazione' => 'required|in:benzina,diesel,gpl,metano,elettrico,ibrido',
            'scadenza_revisione' => 'required|date',
            'scadenza_assicurazione' => 'required|date',
            'compagnia_assicurazione' => 'nullable|string|max:255',
            'numero_polizza' => 'nullable|string|max:255',
            'scadenza_bollo' => 'nullable|date',
            'scadenza_collaudo' => 'nullable|date',
            'km_attuali' => 'required|integer|min:' . $mezzo->km_attuali,
            'km_ultimo_tagliando' => 'nullable|integer|min:0',
            'intervallo_tagliando' => 'required|integer|min:1000|max:50000',
            'data_ultimo_tagliando' => 'nullable|date',
            'dotazioni_sanitarie' => 'nullable|array',
            'dotazioni_tecniche' => 'nullable|array',
            'aria_condizionata' => 'boolean',
            'gps' => 'boolean',
            'radio_ponte' => 'boolean',
            'frequenza_radio' => 'nullable|string|max:20',
            'costo_acquisto' => 'nullable|numeric|min:0',
            'data_acquisto' => 'nullable|date',
            'fornitore' => 'nullable|string|max:255',
            'posizione_attuale' => 'nullable|string|max:255',
            'note' => 'nullable|string'
        ]);

        DB::beginTransaction();
        
        try {
            $kmPrecedenti = $mezzo->km_attuali;
            
            if ($validated['km_ultimo_tagliando'] && 
                $validated['km_ultimo_tagliando'] != $mezzo->km_ultimo_tagliando) {
                $validated['km_prossimo_tagliando'] = $validated['km_ultimo_tagliando'] + $validated['intervallo_tagliando'];
            }

            $mezzo->update($validated);

            if ($validated['km_attuali'] > $kmPrecedenti) {
                $mezzo->aggiornaKm($validated['km_attuali'], auth()->id());
            }

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'modifica_mezzo',
                'modulo' => 'mezzi',
                'risorsa_id' => $mezzo->id,
                'descrizione' => "Modificato mezzo: {$mezzo->targa}",
                'valori_precedenti' => ['km_attuali' => $kmPrecedenti],
                'valori_nuovi' => ['km_attuali' => $validated['km_attuali']],
                'ip_address' => $request->ip(),
                'user_agent' => $request->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => 'Mezzo aggiornato con successo'
                ]);
            }

            return redirect()->route('mezzi.show', $mezzo->id)
                           ->with('success', 'Mezzo aggiornato con successo');

        } catch (\Exception $e) {
            DB::rollback();
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Errore durante l\'aggiornamento: ' . $e->getMessage()
                ], 500);
            }

            return back()->withInput()
                        ->withErrors(['error' => 'Errore durante l\'aggiornamento: ' . $e->getMessage()]);
        }
    }

    // ===================================
    // DESTROY - Elimina mezzo
    // ===================================
    public function destroy(Mezzo $mezzo)
    {
        if ($mezzo->ticketsAperti->isNotEmpty()) {
            return response()->json([
                'success' => false,
                'message' => 'Impossibile eliminare il mezzo: sono presenti ticket aperti'
            ], 422);
        }

        if ($mezzo->checklistCompilate()->where('created_at', '>=', now()->subDays(30))->exists()) {
            return response()->json([
                'success' => false,
                'message' => 'Impossibile eliminare il mezzo: sono presenti checklist recenti'
            ], 422);
        }

        DB::beginTransaction();
        
        try {
            $targa = $mezzo->targa;
            
            $mezzo->delete();

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'eliminazione_mezzo',
                'modulo' => 'mezzi',
                'risorsa_id' => $mezzo->id,
                'descrizione' => "Eliminato mezzo: {$targa}",
                'ip_address' => request()->ip(),
                'user_agent' => request()->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Mezzo eliminato con successo'
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante l\'eliminazione: ' . $e->getMessage()
            ], 500);
        }
    }
}
--- NotificheController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Notifica;
use App\Models\User;
use App\Models\Volontario;
use App\Models\Evento;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class NotificheController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of notifiche per l'utente corrente
     */
    public function index(Request $request)
    {
        try {
            $query = Auth::user()->notifiche->orderBy('created_at', 'desc');

            // Filtri
            if ($request->filled('tipo')) {
                $query->where('tipo', $request->tipo);
            }

            if ($request->filled('stato')) {
                if ($request->stato === 'lette') {
                    $query->whereNotNull('read_at');
                } elseif ($request->stato === 'non_lette') {
                    $query->whereNull('read_at');
                }
            }

            if ($request->filled('priorita')) {
                $query->where('priorita', $request->priorita);
            }

            // Filtro per periodo
            if ($request->filled('data_da')) {
                $query->where('created_at', '>=', $request->data_da);
            }
            if ($request->filled('data_a')) {
                $query->where('created_at', '<=', $request->data_a . ' 23:59:59');
            }

            $notifiche = $query->paginate(20)->withQueryString();

            // Statistiche
            $stats = [
                'totali' => Auth::user()->notifiche->count(),
                'non_lette' => Auth::user()->notifiche->whereNull('read_at')->count(),
                'oggi' => Auth::user()->notifiche->whereDate('created_at', today())->count(),
                'questa_settimana' => Auth::user()->notifiche
                    ->whereBetween('created_at', [now()->startOfWeek(), now()->endOfWeek()])
                    ->count()
            ];

            // Tipi di notifiche per filtro
            $tipi_notifiche = [
                'evento_assegnato' => 'Evento Assegnato',
                'evento_modificato' => 'Evento Modificato',
                'evento_cancellato' => 'Evento Cancellato',
                'scadenza_documento' => 'Scadenza Documento',
                'scadenza_dpi' => 'Scadenza DPI',
                'manutenzione_mezzo' => 'Manutenzione Mezzo',
                'ticket_assegnato' => 'Ticket Assegnato',
                'ticket_aggiornato' => 'Ticket Aggiornato',
                'scorte_minime' => 'Scorte Minime',
                'sistema' => 'Sistema',
                'altro' => 'Altro'
            ];

            return view('notifiche.index', compact('notifiche', 'stats', 'tipi_notifiche'));

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento notifiche: ' . $e->getMessage());
            return back()->with('error', 'Errore nel caricamento delle notifiche');
        }
    }

    /**
     * Show the form for creating a new notifica
     */
    public function create()
    {
        try {
            // Solo admin e responsabili possono creare notifiche
            if (!Auth::user()->hasPermission('notifiche', 'create')) {
                abort(403, 'Non hai i permessi per creare notifiche');
            }

            $utenti = User::where('id', '!=', Auth::id())
                         ->orderBy('cognome')
                         ->orderBy('nome')
                         ->get();

            $volontari = Volontario::where('stato', 'attivo')
                                 ->orderBy('cognome')
                                 ->get();

            $tipi_notifiche = [
                'evento_assegnato' => 'Evento Assegnato',
                'evento_modificato' => 'Evento Modificato',
                'scadenza_documento' => 'Scadenza Documento',
                'manutenzione_mezzo' => 'Manutenzione Mezzo',
                'ticket_assegnato' => 'Ticket Assegnato',
                'scorte_minime' => 'Scorte Minime',
                'sistema' => 'Sistema',
                'comunicazione' => 'Comunicazione',
                'altro' => 'Altro'
            ];

            $priorita_levels = [
                'bassa' => 'Bassa',
                'normale' => 'Normale',
                'alta' => 'Alta',
                'urgente' => 'Urgente'
            ];

            return view('notifiche.create', compact('utenti', 'volontari', 'tipi_notifiche', 'priorita_levels'));

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento form notifica: ' . $e->getMessage());
            return back()->with('error', 'Errore nel caricamento del modulo');
        }
    }

    /**
     * Store a newly created notifica
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'destinatari' => 'required|array|min:1',
            'destinatari.*' => 'exists:users,id',
            'tipo' => 'required|string|max:50',
            'titolo' => 'required|string|max:255',
            'messaggio' => 'required|string',
            'priorita' => 'required|in:bassa,normale,alta,urgente',
            'url_azione' => 'nullable|url|max:500',
            'testo_azione' => 'nullable|string|max:100',
            'scade_il' => 'nullable|date|after:today',
            'invia_email' => 'boolean',
            'invia_push' => 'boolean'
        ]);

        try {
            DB::beginTransaction();

            $notificheCreate = [];

            foreach ($validated['destinatari'] as $userId) {
                $notifica = Notifica::create([
                    'user_id' => $userId,
                    'destinatari' => [$userId],
                    'tipo' => $validated['tipo'],
                    'titolo' => $validated['titolo'],
                    'messaggio' => $validated['messaggio'],
                    'priorita' => $validated['priorita'],
                    'url_azione' => $validated['url_azione'],
                    'testo_azione' => $validated['testo_azione'],
                    'scade_il' => $validated['scade_il'],
                    'metadati' => json_encode([
                        'created_by' => Auth::id(),
                        'created_by_name' => Auth::user()->nome_completo,
                        'invia_email' => $validated['invia_email'] ?? false,
                        'invia_push' => $validated['invia_push'] ?? false
                    ])
                ]);

                $notificheCreate[] = $notifica;

                // Invia email se richiesto
                if ($validated['invia_email'] ?? false) {
                    $user = User::find($userId);
                    // Qui andrà l'invio email
                    // Mail::to($user)->send(new NotificaEmail($notifica));
                }

                // Invia notifica push se richiesta
                if ($validated['invia_push'] ?? false) {
                    // Qui andrà l'invio push notification
                    // $this->sendPushNotification($notifica);
                }
            }

            DB::commit();

            Log::info('Notifiche create in massa', [
                'count' => count($notificheCreate),
                'tipo' => $validated['tipo'],
                'created_by' => Auth::id()
            ]);

            return redirect()->route('notifiche.index')
                           ->with('success', 'Notifiche inviate con successo a ' . count($notificheCreate) . ' utenti');

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Errore nella creazione notifiche: ' . $e->getMessage());
            return back()->withInput()
                        ->with('error', 'Errore nell\'invio delle notifiche: ' . $e->getMessage());
        }
    }

    /**
     * Display the specified notifica
     */
    public function show(Notifica $notifica)
    {
        try {
            // Verifica che l'utente possa vedere questa notifica
            if ($notifica->user_id !== Auth::id() && !Auth::user()->hasPermission('notifiche', 'view_all')) {
                abort(403, 'Non autorizzato a visualizzare questa notifica');
            }

            // Marca come letta se non lo è già
            if (!$notifica->read_at && $notifica->user_id === Auth::id()) {
                $notifica->update(['read_at' => now()]);
            }

            return view('notifiche.show', compact('notifica'));

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento notifica: ' . $e->getMessage());
            return back()->with('error', 'Errore nel caricamento della notifica');
        }
    }

    /**
     * Marca una notifica come letta
     */
    public function markAsRead(Notifica $notifica)
    {
        try {
            // Verifica che l'utente possa modificare questa notifica
            if ($notifica->user_id !== Auth::id()) {
                return response()->json(['error' => 'Non autorizzato'], 403);
            }

            if (!$notifica->read_at) {
                $notifica->update(['read_at' => now()]);
            }

            return response()->json([
                'success' => true,
                'message' => 'Notifica marcata come letta'
            ]);

        } catch (\Exception $e) {
            Log::error('Errore nel marcare notifica come letta: ' . $e->getMessage());
            return response()->json(['error' => 'Errore nell\'operazione'], 500);
        }
    }

    /**
     * Marca tutte le notifiche come lette
     */
    public function markAllRead()
    {
        try {
            $updated = Auth::user()
                          ->notifiche()
                          ->whereNull('read_at')
                          ->update(['read_at' => now()]);

            Log::info("Marcate come lette $updated notifiche", [
                'user_id' => Auth::id()
            ]);

            return response()->json([
                'success' => true,
                'message' => "Marcate come lette $updated notifiche",
                'count' => $updated
            ]);

        } catch (\Exception $e) {
            Log::error('Errore nel marcare tutte le notifiche come lette: ' . $e->getMessage());
            return response()->json(['error' => 'Errore nell\'operazione'], 500);
        }
    }

    /**
     * Remove the specified notifica
     */
    public function destroy(Notifica $notifica)
    {
        try {
            // Verifica che l'utente possa eliminare questa notifica
            if ($notifica->user_id !== Auth::id() && !Auth::user()->hasPermission('notifiche', 'delete_all')) {
                abort(403, 'Non autorizzato a eliminare questa notifica');
            }

            $notifica->delete();

            return response()->json([
                'success' => true,
                'message' => 'Notifica eliminata con successo'
            ]);

        } catch (\Exception $e) {
            Log::error('Errore nell\'eliminazione notifica: ' . $e->getMessage());
            return response()->json(['error' => 'Errore nell\'eliminazione'], 500);
        }
    }

    /**
     * Elimina tutte le notifiche lette
     */
    public function clearRead()
    {
        try {
            $deleted = Auth::user()
                          ->notifiche()
                          ->whereNotNull('read_at')
                          ->delete();

            Log::info("Eliminate $deleted notifiche lette", [
                'user_id' => Auth::id()
            ]);

            return response()->json([
                'success' => true,
                'message' => "Eliminate $deleted notifiche lette",
                'count' => $deleted
            ]);

        } catch (\Exception $e) {
            Log::error('Errore nell\'eliminazione notifiche lette: ' . $e->getMessage());
            return response()->json(['error' => 'Errore nell\'operazione'], 500);
        }
    }

    /**
     * API: Conta notifiche non lette per l'utente corrente
     */
    public function unreadCount()
    {
        try {
            $count = Auth::user()->notifiche->whereNull('read_at')->count();
            
            return response()->json([
                'count' => $count,
                'hasUnread' => $count > 0
            ]);

        } catch (\Exception $e) {
            Log::error('Errore nel conteggio notifiche non lette: ' . $e->getMessage());
            return response()->json(['count' => 0, 'hasUnread' => false]);
        }
    }

    /**
     * API: Ultime notifiche per dropdown
     */
    public function recent()
    {
        try {
            $notifiche = Auth::user()
                           ->notifiche()
                           ->orderBy('created_at', 'desc')
                           ->limit(10)
                           ->get()
                           ->map(function($notifica) {
                               return [
                                   'id' => $notifica->id,
                                   'titolo' => $notifica->titolo,
                                   'messaggio' => \Str::limit($notifica->messaggio, 100),
                                   'tipo' => $notifica->tipo,
                                   'priorita' => $notifica->priorita,
                                   'read_at' => $notifica->read_at,
                                   'created_at' => $notifica->created_at->diffForHumans(),
                                   'url' => $notifica->url_azione ?? route('notifiche.show', $notifica->id),
                                   'icon' => $this->getIconByTipo($notifica->tipo),
                                   'color' => $this->getColorByPriorita($notifica->priorita)
                               ];
                           });

            return response()->json($notifiche);

        } catch (\Exception $e) {
            Log::error('Errore nel caricamento notifiche recenti: ' . $e->getMessage());
            return response()->json([]);
        }
    }

    /**
     * Crea notifiche automatiche di sistema
     */
    public static function createSystemNotification($users, $tipo, $titolo, $messaggio, $options = [])
    {
        try {
            if (!is_array($users)) {
                $users = [$users];
            }

            $defaultOptions = [
                'priorita' => 'normale',
                'url_azione' => null,
                'testo_azione' => null,
                'scade_il' => null,
                'metadati' => []
            ];

            $options = array_merge($defaultOptions, $options);

            foreach ($users as $user) {
                $userId = is_object($user) ? $user->id : $user;

                Notifica::create([
                    'user_id' => $userId,
                    'destinatari' => [$userId],
                    'tipo' => $tipo,
                    'titolo' => $titolo,
                    'messaggio' => $messaggio,
                    'priorita' => $options['priorita'],
                    'url_azione' => $options['url_azione'],
                    'testo_azione' => $options['testo_azione'],
                    'scade_il' => $options['scade_il'],
                    'metadati' => json_encode(array_merge([
                        'created_by_system' => true,
                        'created_at' => now()->toISOString()
                    ], $options['metadati']))
                ]);
            }

            Log::info("Notifiche di sistema create", [
                'tipo' => $tipo,
                'users_count' => count($users),
                'titolo' => $titolo
            ]);

            return true;

        } catch (\Exception $e) {
            Log::error('Errore nella creazione notifiche di sistema: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Notifiche per scadenze documenti
     */
    public function checkScadenzeDocumenti()
    {
        try {
            $oggi = now();
            $traUnMese = $oggi->copy()->addMonth();

            // Volontari con visite mediche o documenti in scadenza
            $volontariConScadenze = Volontario::where('attivo', true)
                ->where(function ($query) use ($oggi, $traUnMese) {
                    $query->whereDate('scadenza_visita_medica', '>=', $oggi)
                          ->whereDate('scadenza_visita_medica', '<=', $traUnMese);
                })
                ->orWhereHas('documenti', function ($query) use ($oggi, $traUnMese) {
                    $query->whereNotNull('data_scadenza')
                          ->whereDate('data_scadenza', '>=', $oggi)
                          ->whereDate('data_scadenza', '<=', $traUnMese);
                })
                ->get();

            foreach ($volontariConScadenze as $volontario) {
                $scadenze = [];
                
                if ($volontario->scadenza_visita_medica && $volontario->scadenza_visita_medica <= $traUnMese) {
                    $scadenze[] = 'Visita medica (scade il ' . Carbon::parse($volontario->scadenza_visita_medica)->format('d/m/Y') . ')';
                }

                $documentiInScadenza = $volontario->documenti()
                    ->whereNotNull('data_scadenza')
                    ->whereDate('data_scadenza', '>=', $oggi)
                    ->whereDate('data_scadenza', '<=', $traUnMese)
                    ->get();

                foreach ($documentiInScadenza as $doc) {
                    $scadenze[] = $doc->nome_documento . ' (scade il ' . $doc->data_scadenza->format('d/m/Y') . ')';
                }

                if (!empty($scadenze)) {
                    // Notifica al volontario se ha un account utente
                    if ($volontario->user_id) {
                        self::createSystemNotification(
                            [$volontario->user_id],
                            'scadenza_documento',
                            'Documenti in scadenza',
                            "I tuoi documenti stanno per scadere: " . implode(', ', $scadenze),
                            [
                                'priorita' => 'alta',
                                'url_azione' => route('volontari.show', $volontario->id),
                                'testo_azione' => 'Visualizza dettagli'
                            ]
                        );
                    }

                    // Notifica ai responsabili
                    $responsabili = User::whereIn('ruolo', ['admin', 'direttivo'])
                        ->where('attivo', true)
                        ->get();

                    self::createSystemNotification(
                        $responsabili,
                        'scadenza_documento',
                        'Scadenze documenti volontario',
                        "Documenti in scadenza per {$volontario->nome} {$volontario->cognome}: " . implode(', ', $scadenze),
                        [
                            'priorita' => 'normale',
                            'url_azione' => route('volontari.show', $volontario->id),
                            'testo_azione' => 'Visualizza volontario'
                        ]
                    );
                }
            }

            return response()->json(['success' => true, 'checked' => $volontariConScadenze->count()]);

        } catch (\Exception $e) {
            Log::error('Errore nel controllo scadenze documenti: ' . $e->getMessage());
            return response()->json(['error' => 'Errore nel controllo scadenze'], 500);
        }
    }

    /**
     * Helper: Icona per tipo notifica
     */
    private function getIconByTipo($tipo)
    {
        $icons = [
            'evento_assegnato' => 'calendar-plus',
            'evento_modificato' => 'calendar-edit',
            'evento_cancellato' => 'calendar-x',
            'scadenza_documento' => 'file-clock',
            'scadenza_dpi' => 'shield-alert',
            'manutenzione_mezzo' => 'truck',
            'ticket_assegnato' => 'ticket',
            'ticket_aggiornato' => 'message-square',
            'scorte_minime' => 'package-x',
            'sistema' => 'settings',
            'comunicazione' => 'megaphone',
            'altro' => 'bell'
        ];

        return $icons[$tipo] ?? 'bell';
    }

    /**
     * Helper: Colore per priorità
     */
    private function getColorByPriorita($priorita)
    {
        $colors = [
            'bassa' => 'text-gray-500',
            'normale' => 'text-blue-500',
            'alta' => 'text-orange-500',
            'urgente' => 'text-red-500'
        ];

        return $colors[$priorita] ?? 'text-gray-500';
    }
}

--- PermissionController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Permission;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PermissionController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('can:admin');
    }

    /**
     * Mostra la matrice dei permessi
     */
    public function index()
    {
        $matrice = Permission::getMatricePermessi();
        $ruoli = Permission::RUOLI;
        $moduli = Permission::MODULI;

        return view('admin.permissions.index', compact('matrice', 'ruoli', 'moduli'));
    }

    /**
     * Aggiorna i permessi
     */
    public function update(Request $request)
    {
        $validated = $request->validate([
            'permissions' => 'required|array',
            'permissions.*.modulo' => 'required|string',
            'permissions.*.ruolo' => 'required|string',
            'permissions.*.visualizza' => 'boolean',
            'permissions.*.crea' => 'boolean',
            'permissions.*.modifica' => 'boolean',
            'permissions.*.elimina' => 'boolean',
            'permissions.*.configura' => 'boolean',
        ]);

        DB::beginTransaction();

        try {
            foreach ($validated['permissions'] as $permissionData) {
                Permission::updateOrCreate(
                    [
                        'modulo' => $permissionData['modulo'],
                        'ruolo' => $permissionData['ruolo']
                    ],
                    [
                        'visualizza' => $permissionData['visualizza'] ?? false,
                        'crea' => $permissionData['crea'] ?? false,
                        'modifica' => $permissionData['modifica'] ?? false,
                        'elimina' => $permissionData['elimina'] ?? false,
                        'configura' => $permissionData['configura'] ?? false,
                    ]
                );
            }

            Permission::clearCache();
            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Permessi aggiornati con successo'
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore nell\'aggiornamento: ' . $e->getMessage()
            ], 500);
        }
    }
}
--- TicketsController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\Ticket;
use App\Models\AllegatoTicket;
use App\Models\User;
use App\Models\Mezzo;
use App\Models\Dpi;
use App\Models\Magazzino;
use App\Models\LogAttivita;
use App\Models\Notifica;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Carbon\Carbon;

class TicketsController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('permission:tickets,visualizza')->only(['index', 'show']);
        $this->middleware('permission:tickets,crea')->only(['create', 'store']);
        $this->middleware('permission:tickets,modifica')->only(['edit', 'update', 'assegna', 'cambiaStato']);
        $this->middleware('permission:tickets,elimina')->only(['destroy']);
    }

    // ===================================
    // INDEX - Lista tickets
    // ===================================
    public function index(Request $request)
    {
        $query = Ticket::with(['user', 'assegnatario', 'mezzo', 'dpi', 'articoloMagazzino', 'allegati']);

        // Filtri
        if ($request->filled('stato')) {
            if ($request->stato === 'aperti') {
                $query->whereIn('stato', ['aperto', 'assegnato', 'in_corso']);
            } else {
                $query->where('stato', $request->stato);
            }
        }

        if ($request->filled('categoria')) {
            $query->where('categoria', $request->categoria);
        }

        if ($request->filled('priorita')) {
            $query->where('priorita', $request->priorita);
        }

        if ($request->filled('assegnato_a')) {
            if ($request->assegnato_a === 'non_assegnati') {
                $query->whereNull('assegnato_a');
            } else {
                $query->where('assegnato_a', $request->assegnato_a);
            }
        }

        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('numero_ticket', 'like', "%{$search}%")
                  ->orWhere('titolo', 'like', "%{$search}%")
                  ->orWhere('descrizione', 'like', "%{$search}%");
            });
        }

        // Filtro per ruolo utente
        $user = auth()->user();
        if (!$user->isAdmin() && !in_array($user->ruolo, ['direttivo', 'segreteria'])) {
            $query->where(function($q) use ($user) {
                $q->where('user_id', $user->id)
                  ->orWhere('assegnato_a', $user->id);
            });
        }

        $sortField = $request->get('sort', 'created_at');
        $sortDirection = $request->get('direction', 'desc');
        $query->orderBy($sortField, $sortDirection);

        $tickets = $query->paginate(15);

        $statistiche = [
            'totale' => Ticket::count(),
            'aperti' => Ticket::whereIn('stato', ['aperto', 'assegnato', 'in_corso'])->count(),
            'critici' => Ticket::where('priorita', 'critica')
                              ->whereIn('stato', ['aperto', 'assegnato', 'in_corso'])
                              ->count(),
            'non_assegnati' => Ticket::whereNull('assegnato_a')
                                   ->whereIn('stato', ['aperto'])
                                   ->count(),
            'bloccano_operativita' => Ticket::where('blocca_operativita', true)
                                          ->whereIn('stato', ['aperto', 'assegnato', 'in_corso'])
                                          ->count(),
            'risolti_mese' => Ticket::where('stato', 'risolto')
                                   ->whereMonth('data_risoluzione', now()->month)
                                   ->count()
        ];

        $utentiAssegnazione = User::whereIn('ruolo', ['admin', 'direttivo', 'mezzi', 'dipendente'])
                                 ->where('attivo', true)
                                 ->orderBy('nome')
                                 ->get();

        if ($request->ajax()) {
            return response()->json([
                'html' => view('tickets.partials.table', compact('tickets'))->render(),
                'pagination' => $tickets->links()->render()
            ]);
        }

        return view('tickets.index', compact('tickets', 'statistiche', 'utentiAssegnazione'));
    }

    // ===================================
    // CREATE - Form creazione ticket
    // ===================================
    public function create(Request $request)
    {
        $precompilazione = [
            'categoria' => $request->get('categoria'),
            'mezzo_id' => $request->get('mezzo_id'),
            'dpi_id' => $request->get('dpi_id'),
            'articolo_magazzino_id' => $request->get('articolo_magazzino_id')
        ];

        $mezzi = Mezzo::where('attivo', true)->orderBy('targa')->get();
        $dpi = Dpi::where('disponibile', true)->orderBy('nome')->get();
        $articoliMagazzino = Magazzino::where('attivo', true)->orderBy('nome_articolo')->get();

        return view('tickets.create', compact('precompilazione', 'mezzi', 'dpi', 'articoliMagazzino'));
    }

    // ===================================
    // STORE - Salva nuovo ticket
    // ===================================
    public function store(Request $request)
    {
        $validated = $request->validate([
            'titolo' => 'required|string|max:255',
            'descrizione' => 'required|string',
            'categoria' => 'required|in:mezzi,dpi,magazzino,strutture,informatica,formazione,amministrativo,sicurezza,altro',
            'sottocategoria' => 'nullable|string|max:255',
            'priorita' => 'required|in:bassa,media,alta,critica',
            'urgenza' => 'required|in:non_urgente,normale,urgente,critica',
            'blocca_operativita' => 'boolean',
            'mezzo_id' => 'nullable|exists:mezzi,id',
            'dpi_id' => 'nullable|exists:dpi,id',
            'articolo_magazzino_id' => 'nullable|exists:magazzino,id',
            'ubicazione_problema' => 'nullable|string|max:255',
            'richiede_approvazione' => 'boolean',
            'allegati' => 'nullable|array|max:5',
            'allegati.*' => 'file|max:10240|mimes:jpg,jpeg,png,pdf,doc,docx'
        ]);

        DB::beginTransaction();
        
        try {
            $numeroTicket = Ticket::generaNumeroTicket();

            $ticket = Ticket::create([
                'numero_ticket' => $numeroTicket,
                'user_id' => auth()->id(),
                'titolo' => $validated['titolo'],
                'descrizione' => $validated['descrizione'],
                'categoria' => $validated['categoria'],
                'sottocategoria' => $validated['sottocategoria'],
                'priorita' => $validated['priorita'],
                'urgenza' => $validated['urgenza'],
                'blocca_operativita' => $validated['blocca_operativita'] ?? false,
                'stato' => 'aperto',
                'data_apertura' => now(),
                'mezzo_id' => $validated['mezzo_id'],
                'dpi_id' => $validated['dpi_id'],
                'articolo_magazzino_id' => $validated['articolo_magazzino_id'],
                'ubicazione_problema' => $validated['ubicazione_problema'],
                'richiede_approvazione' => $validated['richiede_approvazione'] ?? false
            ]);

            // Carica allegati se presenti
            if (!empty($validated['allegati'])) {
                foreach ($validated['allegati'] as $file) {
                    $path = $file->store('tickets/allegati/' . $ticket->id, 'public');
                    
                    AllegatoTicket::create([
                        'ticket_id' => $ticket->id,
                        'user_id' => auth()->id(),
                        'nome_file' => $file->getClientOriginalName(),
                        'file_path' => $path,
                        'file_originale' => $file->getClientOriginalName(),
                        'mime_type' => $file->getMimeType(),
                        'file_size' => $file->getSize(),
                        'tipo' => 'foto_problema'
                    ]);
                }
            }

            // Auto-assegnazione basata su categoria
            $assegnatario = $this->determinaAssegnatarioAutomatico($validated['categoria']);
            if ($assegnatario) {
                $ticket->assegnaA($assegnatario->id, 'Assegnazione automatica');
            }

            // Notifiche
            $this->inviaNotificheNuovoTicket($ticket);

            if ($validated['blocca_operativita']) {
                $this->notificaBloccaOperativita($ticket);
            }

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'creazione_ticket',
                'modulo' => 'tickets',
                'risorsa_id' => $ticket->id,
                'descrizione' => "Creato ticket #{$ticket->numero_ticket}: {$ticket->titolo}",
                'ip_address' => $request->ip(),
                'user_agent' => $request->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => "Ticket #{$ticket->numero_ticket} creato con successo",
                    'redirect' => route('tickets.show', $ticket->id)
                ]);
            }

            return redirect()->route('tickets.show', $ticket->id)
                           ->with('success', "Ticket #{$ticket->numero_ticket} creato con successo");

        } catch (\Exception $e) {
            DB::rollback();
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Errore durante la creazione: ' . $e->getMessage()
                ], 500);
            }

            return back()->withInput()
                        ->withErrors(['error' => 'Errore durante la creazione: ' . $e->getMessage()]);
        }
    }

    // ===================================
    // SHOW - Dettagli ticket
    // ===================================
    public function show(Ticket $ticket)
    {
        if (!$this->puoAccedereTicket($ticket)) {
            abort(403, 'Non hai i permessi per visualizzare questo ticket');
        }

        $ticket->load([
            'user',
            'assegnatario', 
            'approvatore',
            'mezzo',
            'dpi',
            'articoloMagazzino',
            'allegati' => function($query) {
                $query->orderBy('created_at', 'desc');
            }
        ]);

        $statistiche = [
            'tempo_apertura' => $ticket->data_apertura->diffForHumans(),
            'tempo_risposta' => $ticket->tempo_risposta,
            'tempo_risoluzione' => $ticket->tempo_risoluzione_totale,
            'ore_residue_sla' => $ticket->ore_residue_sla,
            'progresso' => $ticket->progresso,
            'in_ritardo' => $ticket->in_ritardo
        ];

        $possibiliAssegnatari = $this->getPossibiliAssegnatari($ticket->categoria);

        return view('tickets.show', compact('ticket', 'statistiche', 'possibiliAssegnatari'));
    }

    // ===================================
    // ASSEGNA - Assegna ticket a utente
    // ===================================
    public function assegna(Request $request, Ticket $ticket)
    {
        $request->validate([
            'assegnato_a' => 'required|exists:users,id',
            'note' => 'nullable|string|max:500'
        ]);

        if (!$this->puoAssegnareTicket($ticket)) {
            return response()->json([
                'success' => false,
                'message' => 'Non hai i permessi per assegnare questo ticket'
            ], 403);
        }

        DB::beginTransaction();
        
        try {
            $ticket->assegnaA($request->assegnato_a, $request->note);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Ticket assegnato con successo',
                'assegnatario' => User::find($request->assegnato_a)->nome_completo,
                'nuovo_stato' => $ticket->fresh()->stato_label
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante l\'assegnazione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // CAMBIO STATO - Gestione workflow
    // ===================================
    public function cambiaStato(Request $request, Ticket $ticket)
    {
        $request->validate([
            'azione' => 'required|in:inizia_lavori,risolvi,chiudi,annulla,richiedi_approvazione,approva',
            'note' => 'nullable|string',
            'soluzione' => 'required_if:azione,risolvi|string',
            'costo' => 'nullable|numeric|min:0',
            'fornitore' => 'nullable|string|max:255',
            'richiede_follow_up' => 'boolean',
            'data_follow_up' => 'nullable|date|after:today',
            'valutazione' => 'nullable|integer|min:1|max:5',
            'feedback' => 'nullable|string',
            'motivo_annullamento' => 'required_if:azione,annulla|string'
        ]);

        if (!$this->puoModificareTicket($ticket)) {
            return response()->json([
                'success' => false,
                'message' => 'Non hai i permessi per modificare questo ticket'
            ], 403);
        }

        DB::beginTransaction();
        
        try {
            $messaggio = '';
            
            switch ($request->azione) {
                case 'inizia_lavori':
                    $ticket->iniziaLavori($request->note);
                    $messaggio = 'Lavori avviati con successo';
                    break;
                    
                case 'risolvi':
                    $ticket->risolvi(
                        $request->soluzione,
                        $request->costo,
                        $request->fornitore,
                        $request->richiede_follow_up ?? false,
                        $request->data_follow_up
                    );
                    $messaggio = 'Ticket risolto con successo';
                    break;
                    
                case 'chiudi':
                    $ticket->chiudi($request->valutazione, $request->feedback);
                    $messaggio = 'Ticket chiuso con successo';
                    break;
                    
                case 'annulla':
                    $ticket->annulla($request->motivo_annullamento);
                    $messaggio = 'Ticket annullato';
                    break;
                    
                case 'richiedi_approvazione':
                    $ticket->richiedeApprovazione($request->note);
                    $messaggio = 'Richiesta approvazione inviata';
                    break;
                    
                case 'approva':
                    $ticket->approva(auth()->id(), $request->note);
                    $messaggio = 'Ticket approvato e risolto';
                    break;
            }

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => $messaggio,
                'nuovo_stato' => $ticket->fresh()->stato_label,
                'colore_stato' => $ticket->fresh()->colore_stato,
                'progresso' => $ticket->fresh()->progresso
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante l\'operazione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // DESTROY - Elimina ticket
    // ===================================
    public function destroy(Ticket $ticket)
    {
        if (!auth()->user()->isAdmin()) {
            return response()->json([
                'success' => false,
                'message' => 'Solo gli amministratori possono eliminare i ticket'
            ], 403);
        }

        if (!in_array($ticket->stato, ['aperto', 'annullato'])) {
            return response()->json([
                'success' => false,
                'message' => 'Impossibile eliminare ticket in stato: ' . $ticket->stato_label
            ], 422);
        }

        DB::beginTransaction();
        
        try {
            $numeroTicket = $ticket->numero_ticket;
            
            // Elimina allegati fisici
            foreach ($ticket->allegati as $allegato) {
                Storage::disk('public')->delete($allegato->file_path);
            }
            
            $ticket->delete();

            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'eliminazione_ticket',
                'modulo' => 'tickets',
                'risorsa_id' => $ticket->id,
                'descrizione' => "Eliminato ticket #{$numeroTicket}",
                'ip_address' => request()->ip(),
                'user_agent' => request()->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Ticket eliminato con successo'
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante l\'eliminazione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // METODI HELPER PRIVATI
    // ===================================
    
    private function puoAccedereTicket($ticket)
    {
        $user = auth()->user();
        
        if ($user->isAdmin() || in_array($user->ruolo, ['direttivo', 'segreteria'])) {
            return true;
        }
        
        return $ticket->user_id === $user->id || $ticket->assegnato_a === $user->id;
    }

    private function puoAssegnareTicket($ticket)
    {
        $user = auth()->user();
        return $user->isAdmin() || in_array($user->ruolo, ['direttivo', 'segreteria', 'mezzi']);
    }

    private function puoModificareTicket($ticket)
    {
        $user = auth()->user();
        
        if ($user->isAdmin() || in_array($user->ruolo, ['direttivo', 'segreteria'])) {
            return true;
        }
        
        return $ticket->assegnato_a === $user->id;
    }

    private function determinaAssegnatarioAutomatico($categoria)
    {
        switch ($categoria) {
            case 'mezzi':
                return User::where('ruolo', 'mezzi')->where('attivo', true)->first();
            case 'dpi':
            case 'magazzino':
                return User::where('ruolo', 'mezzi')->where('attivo', true)->first();
            case 'informatica':
                return User::where('ruolo', 'admin')->where('attivo', true)->first();
            default:
                return null;
        }
    }

    private function getPossibiliAssegnatari($categoria)
    {
        $baseQuery = User::where('attivo', true);
        
        switch ($categoria) {
            case 'mezzi':
            case 'dpi':
            case 'magazzino':
                return $baseQuery->whereIn('ruolo', ['admin', 'direttivo', 'mezzi'])->orderBy('nome')->get();
            case 'informatica':
                return $baseQuery->whereIn('ruolo', ['admin'])->orderBy('nome')->get();
            default:
                return $baseQuery->whereIn('ruolo', ['admin', 'direttivo', 'dipendente'])->orderBy('nome')->get();
        }
    }

    private function inviaNotificheNuovoTicket($ticket)
    {
        $destinatari = [];
        
        // Notifica sempre agli admin
        $admins = User::where('ruolo', 'admin')->where('attivo', true)->pluck('id');
        $destinatari = array_merge($destinatari, $admins->toArray());
        
        // Notifica in base alla categoria
        switch ($ticket->categoria) {
            case 'mezzi':
            case 'dpi':
            case 'magazzino':
                $responsabiliMezzi = User::where('ruolo', 'mezzi')->where('attivo', true)->pluck('id');
                $destinatari = array_merge($destinatari, $responsabiliMezzi->toArray());
                break;
        }
        
        if (!empty($destinatari)) {
            Notifica::crea([
                'destinatari' => array_unique($destinatari),
                'titolo' => 'Nuovo Ticket Creato',
                'messaggio' => "È stato creato un nuovo ticket: #{$ticket->numero_ticket} - {$ticket->titolo}",
                'tipo' => 'ticket'
            ]);
        }
    }

    private function notificaBloccaOperativita($ticket)
    {
        $utentiCritici = User::whereIn('ruolo', ['admin', 'direttivo', 'mezzi'])
                            ->where('attivo', true)
                            ->pluck('id');

        Notifica::crea([
            'destinatari' => $utentiCritici->toArray(),
            'titolo' => 'URGENTE: Problema Blocca Operatività',
            'messaggio' => "Il ticket #{$ticket->numero_ticket} segnala un problema che blocca l'operatività: {$ticket->titolo}",
            'tipo' => 'risoluzione_critica'
        ]);
    }
}
--- VolontariController.php ---
<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Volontario;
use App\Models\Documento;
use App\Models\AssegnazioneDpi;
use App\Models\LogAttivita;
use App\Models\Notifica;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Carbon\Carbon;

class VolontariController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('permission:volontari,visualizza')->only(['index', 'show']);
        $this->middleware('permission:volontari,crea')->only(['create', 'store']);
        $this->middleware('permission:volontari,modifica')->only(['edit', 'update']);
        $this->middleware('permission:volontari,elimina')->only(['destroy']);
    }

    // ===================================
    // INDEX - Lista volontari
    // ===================================
    public function index(Request $request)
    {
        $query = Volontario::with(['user', 'documenti', 'dpiAssegnati.dpi'])
                          ->join('users', 'volontari.user_id', '=', 'users.id');

        // Filtri
        if ($request->filled('stato')) {
            if ($request->stato === 'attivi') {
                $query->where('volontari.attivo', true);
            } elseif ($request->stato === 'sospesi') {
                $query->where('volontari.attivo', false);
            }
        }

        if ($request->filled('formazione')) {
            $query->where('stato_formazione', $request->formazione);
        }

        if ($request->filled('disponibilita')) {
            $query->where('disponibilita', $request->disponibilita);
        }

        if ($request->filled('scadenze')) {
            $query->where(function($q) {
                $q->whereDate('scadenza_visita_medica', '<=', now()->addDays(30))
                  ->whereDate('scadenza_visita_medica', '>=', now());
            });
        }

        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('users.nome', 'like', "%{$search}%")
                  ->orWhere('users.cognome', 'like', "%{$search}%")
                  ->orWhere('users.email', 'like', "%{$search}%")
                  ->orWhere('tessera_numero', 'like', "%{$search}%")
                  ->orWhere('users.telefono', 'like', "%{$search}%");
            });
        }

        // Ordinamento
        $sortField = $request->get('sort', 'users.cognome');
        $sortDirection = $request->get('direction', 'asc');
        
        if ($sortField === 'nome_completo') {
            $query->orderBy('users.cognome', $sortDirection)
                  ->orderBy('users.nome', $sortDirection);
        } else {
            $query->orderBy($sortField, $sortDirection);
        }

        $volontari = $query->select('volontari.*')->paginate(20);

        // Statistiche per dashboard
        $statistiche = [
            'totale' => Volontario::count(),
            'attivi' => Volontario::where('attivo', true)->count(),
            'con_scadenze' => Volontario::whereDate('scadenza_visita_medica', '<=', now()->addDays(30))
                                      ->whereDate('scadenza_visita_medica', '>=', now())
                                      ->count(),
            'formazione_base' => Volontario::where('stato_formazione', 'base')->count(),
            'formazione_avanzata' => Volontario::where('stato_formazione', 'avanzato')->count(),
            'istruttori' => Volontario::where('stato_formazione', 'istruttore')->count()
        ];

        if ($request->ajax()) {
            return response()->json([
                'html' => view('volontari.partials.table', compact('volontari'))->render(),
                'pagination' => $volontari->links()->render()
            ]);
        }

        return view('volontari.index', compact('volontari', 'statistiche'));
    }

    // ===================================
    // CREATE - Form creazione volontario
    // ===================================
    public function create()
    {
        $numeroTessera = Volontario::generaNumeroTessera();
        
        return view('volontari.create', compact('numeroTessera'));
    }

    // ===================================
    // STORE - Salva nuovo volontario
    // ===================================
    public function store(Request $request)
    {
        $validated = $request->validate([
            // Dati utente
            'nome' => 'required|string|max:255',
            'cognome' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email',
            'telefono' => 'nullable|string|max:20',
            'data_nascita' => 'required|date|before:today',
            'codice_fiscale' => 'nullable|string|size:16|unique:users,codice_fiscale',
            'indirizzo' => 'nullable|string',
            'citta' => 'nullable|string|max:100',
            'cap' => 'nullable|string|size:5',
            'provincia' => 'nullable|string|size:2',
            'password' => 'required|string|min:8|confirmed',
            
            // Dati volontario
            'tessera_numero' => 'nullable|string|unique:volontari,tessera_numero',
            'data_iscrizione' => 'required|date',
            'data_visita_medica' => 'nullable|date',
            'scadenza_visita_medica' => 'nullable|date|after:data_visita_medica',
            'medico_competente' => 'nullable|string|max:255',
            'stato_formazione' => 'required|in:base,avanzato,istruttore,in_corso',
            'ultimo_corso' => 'nullable|date',
            'corsi_completati' => 'nullable|array',
            'competenze' => 'nullable|array',
            'disponibilita' => 'required|in:sempre,weekdays,weekend,sera,limitata',
            'note_disponibilita' => 'nullable|string',
            'allergie_patologie' => 'nullable|string',
            'contatto_emergenza_nome' => 'nullable|string|max:255',
            'contatto_emergenza_telefono' => 'nullable|string|max:20',
            'gruppo_sanguigno' => 'nullable|string|max:3',
            'note' => 'nullable|string'
        ]);

        DB::beginTransaction();
        
        try {
            // Crea utente
            $user = User::create([
                'nome' => $validated['nome'],
                'cognome' => $validated['cognome'],
                'email' => $validated['email'],
                'telefono' => $validated['telefono'],
                'data_nascita' => $validated['data_nascita'],
                'codice_fiscale' => $validated['codice_fiscale'],
                'indirizzo' => $validated['indirizzo'],
                'citta' => $validated['citta'],
                'cap' => $validated['cap'],
                'provincia' => $validated['provincia'],
                'ruolo' => 'volontario',
                'password' => Hash::make($validated['password']),
                'attivo' => true
            ]);

            // Crea volontario
            $volontario = Volontario::create([
                'user_id' => $user->id,
                'tessera_numero' => $validated['tessera_numero'] ?: Volontario::generaNumeroTessera(),
                'data_iscrizione' => $validated['data_iscrizione'],
                'data_visita_medica' => $validated['data_visita_medica'],
                'scadenza_visita_medica' => $validated['scadenza_visita_medica'],
                'medico_competente' => $validated['medico_competente'],
                'stato_formazione' => $validated['stato_formazione'],
                'ultimo_corso' => $validated['ultimo_corso'],
                'corsi_completati' => $validated['corsi_completati'] ?? [],
                'competenze' => $validated['competenze'] ?? [],
                'disponibilita' => $validated['disponibilita'],
                'note_disponibilita' => $validated['note_disponibilita'],
                'allergie_patologie' => $validated['allergie_patologie'],
                'contatto_emergenza_nome' => $validated['contatto_emergenza_nome'],
                'contatto_emergenza_telefono' => $validated['contatto_emergenza_telefono'],
                'gruppo_sanguigno' => $validated['gruppo_sanguigno'],
                'note' => $validated['note'],
                'attivo' => true
            ]);

            // Log attività
            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'creazione_volontario',
                'modulo' => 'volontari',
                'risorsa_id' => $volontario->id,
                'descrizione' => "Creato nuovo volontario: {$user->nome_completo}",
                'ip_address' => $request->ip(),
                'user_agent' => $request->userAgent(),
                'data_ora' => now()
            ]);

            // Notifica di benvenuto al volontario
            Notifica::crea([
                'destinatari' => [$user->id],
                'titolo' => 'Benvenuto in Croce Verde Ascoli Piceno',
                'messaggio' => "Benvenuto nella famiglia della Croce Verde! Il tuo numero tessera è: {$volontario->tessera_numero}",
                'tipo' => 'generale'
            ]);

            DB::commit();

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => 'Volontario creato con successo',
                    'redirect' => route('volontari.show', $volontario->id)
                ]);
            }

            return redirect()->route('volontari.show', $volontario->id)
                           ->with('success', 'Volontario creato con successo');

        } catch (\Exception $e) {
            DB::rollback();
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Errore durante la creazione: ' . $e->getMessage()
                ], 500);
            }

            return back()->withInput()
                        ->withErrors(['error' => 'Errore durante la creazione: ' . $e->getMessage()]);
        }
    }

    // ===================================
    // SHOW - Dettagli volontario
    // ===================================
    public function show(Volontario $volontario)
    {
        $volontario->load([
            'user',
            'documenti' => function($query) {
                $query->orderBy('created_at', 'desc');
            },
            'dpiAssegnati.dpi',
            'partecipazioniEventi.evento'
        ]);

        // Statistiche volontario
        $statistiche = [
            'documenti_totali' => $volontario->documenti->count(),
            'documenti_scaduti' => $volontario->documenti->where('data_scadenza', '<', now())->count(),
            'documenti_in_scadenza' => $volontario->documenti->filter(function($doc) {
                return $doc->data_scadenza && $doc->data_scadenza->diffInDays(now()) <= 30;
            })->count(),
            'dpi_assegnati' => $volontario->dpiAssegnati->where('restituito', false)->count(),
            'eventi_partecipati' => $volontario->partecipazioniEventi->where('stato', 'completato')->count(),
            'ore_servizio_anno' => $volontario->ore_servizio_anno
        ];

        // Scadenze vicine
        $scadenzeVicine = $volontario->scadenze_vicine;

        // Ultimi documenti caricati
        $ultimiDocumenti = $volontario->documenti->take(5);

        // DPI attualmente assegnati
        $dpiAssegnati = $volontario->dpiAssegnati()
                                  ->where('restituito', false)
                                  ->with('dpi')
                                  ->orderBy('data_assegnazione', 'desc')
                                  ->get();

        return view('volontari.show', compact(
            'volontario', 
            'statistiche', 
            'scadenzeVicine', 
            'ultimiDocumenti', 
            'dpiAssegnati'
        ));
    }

    // ===================================
    // EDIT - Form modifica volontario
    // ===================================
    public function edit(Volontario $volontario)
    {
        $volontario->load('user');
        
        return view('volontari.edit', compact('volontario'));
    }

    // ===================================
    // UPDATE - Aggiorna volontario
    // ===================================
    public function update(Request $request, Volontario $volontario)
    {
        $validated = $request->validate([
            // Dati utente
            'nome' => 'required|string|max:255',
            'cognome' => 'required|string|max:255',
            'email' => [
                'required',
                'email',
                Rule::unique('users')->ignore($volontario->user_id)
            ],
            'telefono' => 'nullable|string|max:20',
            'data_nascita' => 'required|date|before:today',
            'codice_fiscale' => [
                'nullable',
                'string',
                'size:16',
                Rule::unique('users')->ignore($volontario->user_id)
            ],
            'indirizzo' => 'nullable|string',
            'citta' => 'nullable|string|max:100',
            'cap' => 'nullable|string|size:5',
            'provincia' => 'nullable|string|size:2',
            'password' => 'nullable|string|min:8|confirmed',
            
            // Dati volontario
            'tessera_numero' => [
                'nullable',
                'string',
                Rule::unique('volontari')->ignore($volontario->id)
            ],
            'data_iscrizione' => 'required|date',
            'data_visita_medica' => 'nullable|date',
            'scadenza_visita_medica' => 'nullable|date|after:data_visita_medica',
            'medico_competente' => 'nullable|string|max:255',
            'stato_formazione' => 'required|in:base,avanzato,istruttore,in_corso',
            'ultimo_corso' => 'nullable|date',
            'corsi_completati' => 'nullable|array',
            'competenze' => 'nullable|array',
            'disponibilita' => 'required|in:sempre,weekdays,weekend,sera,limitata',
            'note_disponibilita' => 'nullable|string',
            'allergie_patologie' => 'nullable|string',
            'contatto_emergenza_nome' => 'nullable|string|max:255',
            'contatto_emergenza_telefono' => 'nullable|string|max:20',
            'gruppo_sanguigno' => 'nullable|string|max:3',
            'ore_servizio_anno' => 'nullable|numeric|min:0',
            'note' => 'nullable|string'
        ]);

        DB::beginTransaction();
        
        try {
            // Aggiorna utente
            $userData = [
                'nome' => $validated['nome'],
                'cognome' => $validated['cognome'],
                'email' => $validated['email'],
                'telefono' => $validated['telefono'],
                'data_nascita' => $validated['data_nascita'],
                'codice_fiscale' => $validated['codice_fiscale'],
                'indirizzo' => $validated['indirizzo'],
                'citta' => $validated['citta'],
                'cap' => $validated['cap'],
                'provincia' => $validated['provincia']
            ];

            if (!empty($validated['password'])) {
                $userData['password'] = Hash::make($validated['password']);
            }

            $volontario->user->update($userData);

            // Aggiorna volontario
            $volontario->update([
                'tessera_numero' => $validated['tessera_numero'],
                'data_iscrizione' => $validated['data_iscrizione'],
                'data_visita_medica' => $validated['data_visita_medica'],
                'scadenza_visita_medica' => $validated['scadenza_visita_medica'],
                'medico_competente' => $validated['medico_competente'],
                'stato_formazione' => $validated['stato_formazione'],
                'ultimo_corso' => $validated['ultimo_corso'],
                'corsi_completati' => $validated['corsi_completati'] ?? [],
                'competenze' => $validated['competenze'] ?? [],
                'disponibilita' => $validated['disponibilita'],
                'note_disponibilita' => $validated['note_disponibilita'],
                'allergie_patologie' => $validated['allergie_patologie'],
                'contatto_emergenza_nome' => $validated['contatto_emergenza_nome'],
                'contatto_emergenza_telefono' => $validated['contatto_emergenza_telefono'],
                'gruppo_sanguigno' => $validated['gruppo_sanguigno'],
                'ore_servizio_anno' => $validated['ore_servizio_anno'] ?? $volontario->ore_servizio_anno,
                'note' => $validated['note']
            ]);

            // Log attività
            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'modifica_volontario',
                'modulo' => 'volontari',
                'risorsa_id' => $volontario->id,
                'descrizione' => "Modificato volontario: {$volontario->user->nome_completo}",
                'ip_address' => $request->ip(),
                'user_agent' => $request->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => 'Volontario aggiornato con successo'
                ]);
            }

            return redirect()->route('volontari.show', $volontario->id)
                           ->with('success', 'Volontario aggiornato con successo');

        } catch (\Exception $e) {
            DB::rollback();
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Errore durante l\'aggiornamento: ' . $e->getMessage()
                ], 500);
            }

            return back()->withInput()
                        ->withErrors(['error' => 'Errore durante l\'aggiornamento: ' . $e->getMessage()]);
        }
    }

    // ===================================
    // SOSPENDI - Sospende volontario
    // ===================================
    public function sospendi(Request $request, Volontario $volontario)
    {
        $request->validate([
            'motivo' => 'required|string|max:500'
        ]);

        DB::beginTransaction();
        
        try {
            $volontario->sospendi($request->motivo);

            // Notifica al volontario
            Notifica::crea([
                'destinatari' => [$volontario->user_id],
                'titolo' => 'Sospensione Temporanea',
                'messaggio' => "La tua partecipazione è stata temporaneamente sospesa. Motivo: {$request->motivo}",
                'tipo' => 'segnalazione'
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Volontario sospeso con successo'
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante la sospensione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // RIATTIVA - Riattiva volontario
    // ===================================
    public function riattiva(Volontario $volontario)
    {
        DB::beginTransaction();
        
        try {
            $volontario->riattiva();

            // Notifica al volontario
            Notifica::crea([
                'destinatari' => [$volontario->user_id],
                'titolo' => 'Riattivazione',
                'messaggio' => 'La tua partecipazione è stata riattivata. Benvenuto di nuovo!',
                'tipo' => 'generale'
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Volontario riattivato con successo'
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante la riattivazione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // DESTROY - Elimina volontario
    // ===================================
    public function destroy(Volontario $volontario)
    {
        DB::beginTransaction();
        
        try {
            $nomeCompleto = $volontario->user->nome_completo;
            
            // Soft delete del volontario e dell'utente
            $volontario->delete();
            $volontario->user->delete();

            // Log attività
            LogAttivita::create([
                'user_id' => auth()->id(),
                'azione' => 'eliminazione_volontario',
                'modulo' => 'volontari',
                'risorsa_id' => $volontario->id,
                'descrizione' => "Eliminato volontario: {$nomeCompleto}",
                'ip_address' => request()->ip(),
                'user_agent' => request()->userAgent(),
                'data_ora' => now()
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Volontario eliminato con successo'
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            
            return response()->json([
                'success' => false,
                'message' => 'Errore durante l\'eliminazione: ' . $e->getMessage()
            ], 500);
        }
    }

    // ===================================
    // EXPORT - Esporta lista volontari
    // ===================================
    public function export(Request $request)
    {
        // Verifica permessi
        if (!auth()->user()->hasPermission('volontari', 'visualizza')) {
            abort(403);
        }

        $volontari = Volontario::with('user')
                              ->when($request->stato === 'attivi', function($q) {
                                  $q->where('attivo', true);
                              })
                              ->when($request->stato === 'sospesi', function($q) {
                                  $q->where('attivo', false);
                              })
                              ->get();

        $filename = 'volontari_' . now()->format('Y-m-d_H-i-s') . '.csv';
        
        $headers = [
            'Content-Type' => 'text/csv; charset=UTF-8',
            'Content-Disposition' => "attachment; filename=\"{$filename}\""
        ];

        $callback = function() use ($volontari) {
            $file = fopen('php://output', 'w');
            
            // BOM per Excel
            fputs($file, "\xEF\xBB\xBF");
            
            // Header CSV
            fputcsv($file, [
                'Tessera',
                'Nome',
                'Cognome', 
                'Email',
                'Telefono',
                'Data Nascita',
                'Data Iscrizione',
                'Stato Formazione',
                'Disponibilità',
                'Ore Servizio Anno',
                'Stato',
                'Scadenza Visita Medica'
            ], ';');

            // Dati
            foreach ($volontari as $volontario) {
                fputcsv($file, [
                    $volontario->tessera_numero,
                    $volontario->user->nome,
                    $volontario->user->cognome,
                    $volontario->user->email,
                    $volontario->user->telefono,
                    $volontario->user->data_nascita?->format('d/m/Y'),
                    $volontario->data_iscrizione->format('d/m/Y'),
                    $volontario->stato_formazione,
                    $volontario->disponibilita,
                    $volontario->ore_servizio_anno,
                    $volontario->attivo ? 'Attivo' : 'Sospeso',
                    $volontario->scadenza_visita_medica?->format('d/m/Y')
                ], ';');
            }

            fclose($file);
        };

        return response()->stream($callback, 200, $headers);
    }

    // ===================================
    // SCADENZE - Vista scadenze
    // ===================================
    public function scadenze()
    {
        $volontariConScadenze = Volontario::with('user')
                                         ->where('attivo', true)
                                         ->where(function($query) {
                                             $query->whereDate('scadenza_visita_medica', '<=', now()->addDays(60))
                                                   ->whereDate('scadenza_visita_medica', '>=', now());
                                         })
                                         ->orWhereHas('documenti', function($query) {
                                             $query->whereDate('data_scadenza', '<=', now()->addDays(60))
                                                   ->whereDate('data_scadenza', '>=', now());
                                         })
                                         ->orderBy('scadenza_visita_medica')
                                         ->get();

        return view('volontari.scadenze', compact('volontariConScadenze'));
    }
}

=== MODELS ===

--- AllegatoTicket.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class AllegatoTicket extends Model
{
    use HasFactory;

    protected $table = 'allegati_tickets';

    protected $fillable = [
        'ticket_id',
        'user_id',
        'nome_file',
        'file_path',
        'file_originale',
        'mime_type',
        'file_size',
        'tipo',
        'descrizione',
        'metadata',
        'pubblico'
    ];

    protected $casts = [
        'metadata' => 'array',
        'pubblico' => 'boolean',
        'file_size' => 'integer'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function ticket()
    {
        return $this->belongsTo(Ticket::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getUrlAttribute()
    {
        return $this->file_path ? asset('storage/' . $this->file_path) : null;
    }
}

--- AssegnazioneDpi.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class AssegnazioneDpi extends Model
{
    use HasFactory;

    protected $table = 'assegnazioni_dpi';

    protected $fillable = [
        'dpi_id',
        'volontario_id',
        'assegnato_da',
        'data_assegnazione',
        'data_restituzione',
        'restituito',
        'stato_consegna',
        'stato_restituzione',
        'motivo_assegnazione',
        'motivo_restituzione',
        'ricevuta_firmata',
        'documento_ricevuta',
        'formazione_effettuata',
        'data_formazione',
        'formatore_id',
        'ultima_verifica',
        'prossima_verifica',
        'note_verifica',
        'ore_utilizzo',
        'giorni_utilizzo',
        'note'
    ];

    protected $casts = [
        'data_assegnazione' => 'date',
        'data_restituzione' => 'date',
        'restituito' => 'boolean',
        'ricevuta_firmata' => 'boolean',
        'formazione_effettuata' => 'boolean',
        'data_formazione' => 'date',
        'ultima_verifica' => 'date',
        'prossima_verifica' => 'date',
        'ore_utilizzo' => 'integer',
        'giorni_utilizzo' => 'integer'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function dpi()
    {
        return $this->belongsTo(Dpi::class);
    }

    public function volontario()
    {
        return $this->belongsTo(Volontario::class);
    }

    public function assegnante()
    {
        return $this->belongsTo(User::class, 'assegnato_da');
    }

    public function formatore()
    {
        return $this->belongsTo(User::class, 'formatore_id');
    }
}

--- Avviso.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Avviso extends Model
{
    use HasFactory;

    protected $table = 'avvisi';

    protected $fillable = [
        'titolo',
        'contenuto',
        'tipo',
        'priorita',
        'data_pubblicazione',
        'data_scadenza',
        'destinatari',
        'autore_id',
        'pubblicato',
        'pin_in_alto',
        'allegati'
    ];

    protected $casts = [
        'data_pubblicazione' => 'datetime',
        'data_scadenza' => 'datetime',
        'destinatari' => 'array',
        'pubblicato' => 'boolean',
        'pin_in_alto' => 'boolean',
        'allegati' => 'array'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function autore()
    {
        return $this->belongsTo(User::class, 'autore_id');
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getTipoLabelAttribute()
    {
        $labels = [
            'generale' => 'Generale',
            'urgente' => 'Urgente',
            'formazione' => 'Formazione',
            'evento' => 'Evento',
            'manutenzione' => 'Manutenzione'
        ];
        
        return $labels[$this->tipo] ?? 'Generale';
    }

    public function getColoreTipoAttribute()
    {
        $colori = [
            'generale' => 'primary',
            'urgente' => 'danger',
            'formazione' => 'info',
            'evento' => 'success',
            'manutenzione' => 'warning'
        ];
        
        return $colori[$this->tipo] ?? 'primary';
    }

    public function getPrioritaLabelAttribute()
    {
        $labels = [
            'bassa' => 'Bassa',
            'normale' => 'Normale',
            'alta' => 'Alta',
            'critica' => 'Critica'
        ];
        
        return $labels[$this->priorita] ?? 'Normale';
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopePubblicati($query)
    {
        return $query->where('pubblicato', true);
    }

    public function scopeAttivi($query)
    {
        return $query->where('pubblicato', true)
                    ->where(function($q) {
                        $q->whereNull('data_scadenza')
                          ->orWhere('data_scadenza', '>=', now());
                    });
    }

    public function scopePinInAlto($query)
    {
        return $query->where('pin_in_alto', true);
    }

    public function scopePerTipo($query, $tipo)
    {
        return $query->where('tipo', $tipo);
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public function isAttivo()
    {
        return $this->pubblicato && 
               (!$this->data_scadenza || $this->data_scadenza >= now());
    }

    public function isScaduto()
    {
        return $this->data_scadenza && $this->data_scadenza < now();
    }
}
--- ChecklistCompilata.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class ChecklistCompilata extends Model
{
    use HasFactory;

    protected $table = 'checklist_compilate';

    protected $fillable = [
        'mezzo_id',
        'user_id',
        'template_id',
        'risultati',
        'conforme',
        'note_generali',
        'data_compilazione',
        'km_mezzo',
        'turno',
        'destinazione_servizio',
        'supervisore_id',
        'data_approvazione',
        'note_supervisore',
        'foto_anomalie'
    ];

    protected $casts = [
        'data_compilazione' => 'datetime',
        'data_approvazione' => 'datetime',
        'risultati' => 'array',
        'foto_anomalie' => 'array',
        'conforme' => 'boolean'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function mezzo()
    {
        return $this->belongsTo(Mezzo::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function template()
    {
        return $this->belongsTo(ChecklistTemplate::class, 'template_id');
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getStatoGeneraleLabelAttribute()
    {
        $labels = [
            'ottimo' => 'Ottimo',
            'buono' => 'Buono',
            'discreto' => 'Discreto',
            'problematico' => 'Problematico',
            'critico' => 'Critico'
        ];
        
        return $this->conforme ? 'Conforme' : 'Non conforme';
    }

    public function getColoreStatoAttribute()
    {
        $colori = [
            'ottimo' => 'success',
            'buono' => 'info',
            'discreto' => 'warning',
            'problematico' => 'warning',
            'critico' => 'danger'
        ];
        
        return $this->conforme ? 'success' : 'danger';
    }

    public function getPercentualeCompletamentoAttribute()
    {
        if (!$this->risultati) return 0;

        $totaleControlli = count($this->risultati);
        $controlliCompletati = count(array_filter($this->risultati, function($controllo) {
            return isset($controllo['eseguito']) && $controllo['eseguito'];
        }));
        
        return $totaleControlli > 0 ? round(($controlliCompletati / $totaleControlli) * 100) : 0;
    }

    public function getNumeroAnomalieAttribute()
    {
        return $this->foto_anomalie ? count($this->foto_anomalie) : 0;
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopePerMezzo($query, $mezzoId)
    {
        return $query->where('mezzo_id', $mezzoId);
    }

    public function scopeCompletate($query)
    {
        return $query->whereNotNull('data_approvazione');
    }

    public function scopeConAnomalie($query)
    {
        return $query->whereNotNull('foto_anomalie')
                    ->whereJsonLength('foto_anomalie', '>', 0);
    }

    public function scopePerPeriodo($query, $dataInizio, $dataFine)
    {
        return $query->whereBetween('data_compilazione', [$dataInizio, $dataFine]);
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public function hasAnomalie()
    {
        return $this->numero_anomalie > 0;
    }

    public function isCompletata()
    {
        return !is_null($this->data_approvazione);
    }

    public function aggiungiAnomalia($descrizione, $gravita = 'media', $note = null)
    {
        $anomalie = $this->foto_anomalie ?? [];
        
        $anomalie[] = [
            'descrizione' => $descrizione,
            'gravita' => $gravita,
            'note' => $note,
            'data_rilevazione' => now()->toDateTimeString()
        ];
        
        $this->update(['foto_anomalie' => $anomalie]);
    }

    public function completa()
    {
        $this->update([
            'data_approvazione' => now(),
            'supervisore_id' => auth()->id()
        ]);
    }
}
--- ChecklistTemplate.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class ChecklistTemplate extends Model
{
    use HasFactory;

    protected $table = 'checklist_templates';

    protected $fillable = [
        'nome',
        'descrizione',
        'tipo_mezzo',
        'controlli',
        'attivo',
        'ordine',
        'frequenza',
        'obbligatoria'
    ];

    protected $casts = [
        'controlli' => 'array',
        'attivo' => 'boolean',
        'obbligatoria' => 'boolean'
    ];

    // Relazioni
    public function checklistCompilate()
    {
        return $this->hasMany(ChecklistCompilata::class, 'template_id');
    }

    // Scope
    public function scopeAttivi($query)
    {
        return $query->where('attivo', true);
    }

    public function scopePerTipoMezzo($query, $tipo)
    {
        return $query->where(function($q) use ($tipo) {
            $q->where('tipo_mezzo', $tipo)
              ->orWhere('tipo_mezzo', 'tutti');
        });
    }
}
--- Documento.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;

class Documento extends Model
{
    use HasFactory;

    protected $table = 'documenti';

    protected $fillable = [
        'volontario_id',
        'caricato_da',
        'nome_documento',
        'tipo',
        'sottotipo',
        'file_path',
        'file_originale',
        'mime_type',
        'file_size',
        'hash_file',
        'data_rilascio',
        'data_scadenza',
        'ente_rilascio',
        'numero_documento',
        'stato_validazione',
        'validato_da',
        'data_validazione',
        'note_validazione',
        'notifica_scadenza',
        'giorni_preavviso',
        'ultima_notifica',
        'tags',
        'note',
        'obbligatorio',
        'pubblico',
        'versione',
        'documento_precedente'
    ];

    protected $casts = [
        'data_rilascio' => 'date',
        'data_scadenza' => 'date',
        'data_validazione' => 'datetime',
        'ultima_notifica' => 'datetime',
        'notifica_scadenza' => 'boolean',
        'obbligatorio' => 'boolean',
        'pubblico' => 'boolean',
        'tags' => 'array',
        'file_size' => 'integer',
        'giorni_preavviso' => 'integer',
        'versione' => 'integer'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function volontario()
    {
        return $this->belongsTo(Volontario::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class, 'caricato_da');
    }

    public function verificatoDa()
    {
        return $this->belongsTo(User::class, 'validato_da');
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getUrlDownloadAttribute()
    {
        if ($this->file_path) {
            return asset('storage/' . $this->file_path);
        }
        return null;
    }

    public function getDimensioneFormattataAttribute()
    {
        if (!$this->file_size) return 'N/A';

        $bytes = $this->file_size;
        $units = ['B', 'KB', 'MB', 'GB'];
        
        for ($i = 0; $bytes > 1024 && $i < count($units) - 1; $i++) {
            $bytes /= 1024;
        }
        
        return round($bytes, 2) . ' ' . $units[$i];
    }

    public function getGiorniAllaScadenzaAttribute()
    {
        if (!$this->data_scadenza) return null;
        
        return now()->diffInDays($this->data_scadenza, false);
    }

    public function getStatoScadenzaAttribute()
    {
        if (!$this->data_scadenza) return 'valido';
        
        $giorni = $this->giorni_alla_scadenza;
        
        if ($giorni < 0) return 'scaduto';
        if ($giorni <= 30) return 'in_scadenza';
        
        return 'valido';
    }

    public function getColoreStatoAttribute()
    {
        $colori = [
            'valido' => 'success',
            'in_scadenza' => 'warning',
            'scaduto' => 'danger'
        ];
        
        return $colori[$this->stato_scadenza] ?? 'secondary';
    }

    public function getTipoDocumentoLabelAttribute()
    {
        $labels = [
            'carta_identita' => 'Carta d\'Identità',
            'codice_fiscale' => 'Codice Fiscale',
            'patente' => 'Patente di Guida',
            'certificato_medico' => 'Certificato Medico',
            'attestato_corso' => 'Attestato Corso',
            'assicurazione' => 'Assicurazione',
            'altro' => 'Altro'
        ];
        
        return $labels[$this->tipo] ?? 'Documento';
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopeInScadenza($query, $giorni = 30)
    {
        return $query->whereNotNull('data_scadenza')
                    ->whereDate('data_scadenza', '>=', now())
                    ->whereDate('data_scadenza', '<=', now()->addDays($giorni));
    }

    public function scopeScaduti($query)
    {
        return $query->whereNotNull('data_scadenza')
                    ->whereDate('data_scadenza', '<', now());
    }

    public function scopeVerificati($query)
    {
        return $query->where('stato_validazione', 'validato');
    }

    public function scopePerTipo($query, $tipo)
    {
        return $query->where('tipo', $tipo);
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public function isScaduto()
    {
        return $this->stato_scadenza === 'scaduto';
    }

    public function isInScadenza($giorni = 30)
    {
        return $this->stato_scadenza === 'in_scadenza';
    }

    public function verifica($userId = null)
    {
        $this->update([
            'stato_validazione' => 'validato',
            'data_validazione' => now(),
            'validato_da' => $userId ?? auth()->id()
        ]);
    }

    public function rimuoviVerifica()
    {
        $this->update([
            'stato_validazione' => 'in_attesa',
            'data_validazione' => null,
            'validato_da' => null
        ]);
    }
}
--- Dpi.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Carbon\Carbon;

class Dpi extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'dpi';

    protected $fillable = [
        'nome',
        'descrizione',
        'codice_dpi',
        'categoria',
        'taglia',
        'colore',
        'materiale',
        'marca',
        'modello',
        'certificazione_ce',
        'normative_riferimento',
        'classe_protezione',
        'data_certificazione',
        'scadenza_certificazione',
        'data_acquisto',
        'scadenza',
        'durata_mesi',
        'max_utilizzi',
        'utilizzi_effettuati',
        'stato',
        'disponibile',
        'in_manutenzione',
        'data_ultima_verifica',
        'prossima_verifica',
        'costo_acquisto',
        'fornitore',
        'numero_fattura',
        'ubicazione',
        'armadio_scaffale',
        'istruzioni_uso',
        'istruzioni_manutenzione',
        'istruzioni_pulizia',
        'note',
        'foto'
    ];

    protected $casts = [
        'normative_riferimento' => 'array',
        'data_certificazione' => 'date',
        'scadenza_certificazione' => 'date',
        'data_acquisto' => 'date',
        'scadenza' => 'date',
        'disponibile' => 'boolean',
        'in_manutenzione' => 'boolean',
        'data_ultima_verifica' => 'date',
        'prossima_verifica' => 'date',
        'costo_acquisto' => 'decimal:2'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function assegnazioni()
    {
        return $this->hasMany(AssegnazioneDpi::class);
    }

    public function assegnazioneAttuale()
    {
        return $this->hasOne(AssegnazioneDpi::class)->where('restituito', false);
    }

    public function tickets()
    {
        return $this->hasMany(Ticket::class);
    }

    public function volontarioAttuale()
    {
        return $this->hasOneThrough(
            Volontario::class,
            AssegnazioneDpi::class,
            'dpi_id',
            'id',
            'id',
            'volontario_id'
        )->where('assegnazioni_dpi.restituito', false);
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getCategoriaLabelAttribute()
    {
        $categorie = [
            'protezione_testa' => 'Protezione Testa',
            'protezione_occhi' => 'Protezione Occhi',
            'protezione_respiratoria' => 'Protezione Respiratoria',
            'protezione_mani' => 'Protezione Mani',
            'protezione_piedi' => 'Protezione Piedi',
            'protezione_corpo' => 'Protezione Corpo',
            'protezione_cadute' => 'Protezione Cadute',
            'divise' => 'Divise e Abbigliamento',
            'altro' => 'Altro'
        ];
        
        return $categorie[$this->categoria] ?? $this->categoria;
    }

    public function getStatoLabelAttribute()
    {
        $stati = [
            'nuovo' => 'Nuovo',
            'buono' => 'Buone Condizioni',
            'usato' => 'Usato',
            'da_controllare' => 'Da Controllare',
            'da_sostituire' => 'Da Sostituire',
            'dismesso' => 'Dismesso'
        ];
        
        return $stati[$this->stato] ?? $this->stato;
    }

    public function getColoreStatoAttribute()
    {
        $colori = [
            'nuovo' => 'success',
            'buono' => 'primary',
            'usato' => 'info',
            'da_controllare' => 'warning',
            'da_sostituire' => 'danger',
            'dismesso' => 'secondary'
        ];
        
        return $colori[$this->stato] ?? 'secondary';
    }

    public function getInScadenzaAttribute()
    {
        return $this->scadenza && $this->scadenza->diffInDays(now()) <= 30;
    }

    public function getScadutoAttribute()
    {
        return $this->scadenza && $this->scadenza->isPast();
    }

    public function getInScadenzaCertificazioneAttribute()
    {
        return $this->scadenza_certificazione && $this->scadenza_certificazione->diffInDays(now()) <= 30;
    }

    public function getEtaDpiAttribute()
    {
        return $this->data_acquisto ? $this->data_acquisto->diffInMonths(now()) : null;
    }

    public function getPercentualeUtilizzoAttribute()
    {
        if (!$this->max_utilizzi) return null;
        
        return round(($this->utilizzi_effettuati / $this->max_utilizzi) * 100, 1);
    }

    public function getDisponibilePerAssegnazioneAttribute()
    {
        return $this->disponibile && 
               !$this->in_manutenzione && 
               !$this->scaduto && 
               in_array($this->stato, ['nuovo', 'buono']) &&
               !$this->assegnazioneAttuale;
    }

    public function getGiorniResiduiAttribute()
    {
        if (!$this->scadenza) return null;
        
        return now()->diffInDays($this->scadenza, false);
    }

    public function getUtilizziResiduiAttribute()
    {
        if (!$this->max_utilizzi) return null;
        
        return max(0, $this->max_utilizzi - $this->utilizzi_effettuati);
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public function assegnaA($volontarioId, $assegnatoDa = null, $datiExtra = [])
    {
        if (!$this->disponibile_per_assegnazione) {
            throw new \Exception("Il DPI non è disponibile per l'assegnazione");
        }

        $assegnazione = $this->assegnazioni()->create([
            'volontario_id' => $volontarioId,
            'assegnato_da' => $assegnatoDa ?? auth()->id(),
            'data_assegnazione' => now()->toDateString(),
            'stato_consegna' => $this->stato,
            ...$datiExtra
        ]);

        $this->update(['disponibile' => false]);

        $volontario = Volontario::find($volontarioId);
        LogAttivita::create([
            'user_id' => auth()->id(),
            'azione' => 'assegnazione_dpi',
            'modulo' => 'dpi',
            'risorsa_id' => $this->id,
            'descrizione' => "DPI '{$this->nome}' assegnato a {$volontario->user->nome_completo}",
            'ip_address' => request()->ip(),
            'user_agent' => request()->userAgent(),
            'data_ora' => now()
        ]);

        return $assegnazione;
    }

    public function registraRestituzione($statoRestituzione, $motivo = null, $datiExtra = [])
    {
        $assegnazione = $this->assegnazioneAttuale;
        
        if (!$assegnazione) {
            throw new \Exception("Nessuna assegnazione attiva trovata per questo DPI");
        }

        $assegnazione->update([
            'data_restituzione' => now()->toDateString(),
            'stato_restituzione' => $statoRestituzione,
            'motivo_restituzione' => $motivo,
            'restituito' => true,
            ...$datiExtra
        ]);

        $nuovoStato = $this->stato;
        $disponibile = true;

        switch ($statoRestituzione) {
            case 'danneggiato':
                $nuovoStato = 'da_sostituire';
                $disponibile = false;
                break;
            case 'usato':
                $nuovoStato = 'da_controllare';
                break;
            case 'perso':
            case 'non_restituito':
                $nuovoStato = 'dismesso';
                $disponibile = false;
                break;
        }

        $this->update([
            'stato' => $nuovoStato,
            'disponibile' => $disponibile
        ]);

        if ($this->max_utilizzi) {
            $this->increment('utilizzi_effettuati');
        }

        LogAttivita::create([
            'user_id' => auth()->id(),
            'azione' => 'restituzione_dpi',
            'modulo' => 'dpi',
            'risorsa_id' => $this->id,
            'descrizione' => "DPI '{$this->nome}' restituito da {$assegnazione->volontario->user->nome_completo}",
            'note' => "Stato restituzione: {$statoRestituzione}",
            'ip_address' => request()->ip(),
            'user_agent' => request()->userAgent(),
            'data_ora' => now()
        ]);

        return $assegnazione;
    }

    public function registraVerifica($esito, $note = null, $prossimaDaTesto = null)
    {
        $prossimaVerifica = null;
        
        if ($prossimaDaTesto) {
            try {
                $prossimaVerifica = Carbon::parse($prossimaDaTesto)->toDateString();
            } catch (\Exception $e) {
                $prossimaVerifica = now()->addMonths(6)->toDateString();
            }
        } else {
            $intervalliVerifica = [
                'protezione_testa' => 12,
                'protezione_cadute' => 6,
                'protezione_respiratoria' => 3,
                'default' => 6
            ];
            
            $mesi = $intervalliVerifica[$this->categoria] ?? $intervalliVerifica['default'];
            $prossimaVerifica = now()->addMonths($mesi)->toDateString();
        }

        $this->update([
            'data_ultima_verifica' => now()->toDateString(),
            'prossima_verifica' => $prossimaVerifica,
            'stato' => $esito ? 'buono' : 'da_controllare',
            'note' => $this->note . "\n[" . now()->format('d/m/Y') . "] Verifica: " . ($esito ? 'OK' : 'NON CONFORME') . ($note ? " - {$note}" : "")
        ]);

        LogAttivita::create([
            'user_id' => auth()->id(),
            'azione' => 'verifica_dpi',
            'modulo' => 'dpi',
            'risorsa_id' => $this->id,
            'descrizione' => "Verifica DPI '{$this->nome}': " . ($esito ? 'CONFORME' : 'NON CONFORME'),
            'note' => $note,
            'ip_address' => request()->ip(),
            'user_agent' => request()->userAgent(),
            'data_ora' => now()
        ]);

        return $this;
    }

    public function generaCodiceDpi()
    {
        $prefisso = strtoupper(substr($this->categoria, 0, 3));
        $ultimoCodice = self::where('codice_dpi', 'like', $prefisso . '%')->max('codice_dpi');

        if ($ultimoCodice) {
            $numero = intval(substr($ultimoCodice, -4)) + 1;
        } else {
            $numero = 1;
        }

        return $prefisso . str_pad($numero, 4, '0', STR_PAD_LEFT);
    }

    public function calcolaScadenzaAutomatica()
    {
        if ($this->durata_mesi && $this->data_acquisto) {
            return $this->data_acquisto->addMonths($this->durata_mesi);
        }
        
        return null;
    }

    // ===================================
    // STATISTICHE E REPORT
    // ===================================

    public static function getStatisticheDpi()
    {
        return [
            'totale_dpi' => self::count(),
            'dpi_disponibili' => self::where('disponibile', true)->count(),
            'dpi_assegnati' => self::whereHas('assegnazioneAttuale')->count(),
            'dpi_in_manutenzione' => self::where('in_manutenzione', true)->count(),
            'dpi_in_scadenza' => self::whereDate('scadenza', '<=', now()->addDays(30))
                                    ->whereDate('scadenza', '>=', now())
                                    ->count(),
            'dpi_scaduti' => self::whereDate('scadenza', '<', now())->count(),
            'dpi_da_verificare' => self::whereDate('prossima_verifica', '<=', now())->count(),
            'valore_totale_dpi' => self::sum('costo_acquisto') ?? 0
        ];
    }

    public static function getDpiInScadenza($giorni = 30)
    {
        return self::whereDate('scadenza', '<=', now()->addDays($giorni))
                   ->whereDate('scadenza', '>=', now())
                   ->orderBy('scadenza')
                   ->get();
    }

    public static function getDpiDaVerificare()
    {
        return self::whereDate('prossima_verifica', '<=', now())
                   ->where('disponibile', true)
                   ->orderBy('prossima_verifica')
                   ->get();
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopeDisponibili($query)
    {
        return $query->where('disponibile', true)
                     ->where('in_manutenzione', false)
                     ->whereIn('stato', ['nuovo', 'buono']);
    }

    public function scopeAssegnati($query)
    {
        return $query->whereHas('assegnazioneAttuale');
    }

    public function scopeInScadenza($query, $giorni = 30)
    {
        return $query->whereDate('scadenza', '<=', now()->addDays($giorni))
                     ->whereDate('scadenza', '>=', now());
    }

    public function scopeDaVerificare($query)
    {
        return $query->whereDate('prossima_verifica', '<=', now());
    }

    public function scopeCategoria($query, $categoria)
    {
        return $query->where('categoria', $categoria);
    }

    public function scopeTaglia($query, $taglia)
    {
        return $query->where('taglia', $taglia);
    }

    public function scopeRicerca($query, $termine)
    {
        return $query->where(function($q) use ($termine) {
            $q->where('nome', 'like', "%{$termine}%")
              ->orWhere('descrizione', 'like', "%{$termine}%")
              ->orWhere('codice_dpi', 'like', "%{$termine}%")
              ->orWhere('marca', 'like', "%{$termine}%")
              ->orWhere('modello', 'like', "%{$termine}%");
        });
    }
}
--- Evento.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Carbon\Carbon;

class Evento extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'eventi';

    protected $fillable = [
        'organizzatore_id',
        'titolo',
        'descrizione',
        'tipo',
        'categoria',
        'data_inizio',
        'data_fine',
        'evento_multiplo',
        'date_aggiuntive',
        'durata_ore',
        'luogo',
        'indirizzo_completo',
        'aula_sala',
        'latitudine',
        'longitudine',
        'max_partecipanti',
        'min_partecipanti',
        'richiede_conferma',
        'lista_attesa',
        'scadenza_iscrizioni',
        'costo_partecipazione',
        'rilascia_attestato',
        'tipo_attestato',
        'crediti_ecm',
        'provider_ecm',
        'docenti',
        'staff',
        'materiali_necessari',
        'prerequisiti',
        'stato',
        'motivo_annullamento',
        'data_annullamento',
        'invia_promemoria',
        'giorni_promemoria',
        'ultimo_promemoria',
        'abilita_feedback',
        'valutazione_media',
        'numero_valutazioni',
        'note',
        'locandina',
        'allegati'
    ];

    protected $casts = [
        'data_inizio' => 'datetime',
        'data_fine' => 'datetime',
        'scadenza_iscrizioni' => 'datetime',
        'data_annullamento' => 'datetime',
        'ultimo_promemoria' => 'datetime',
        'costo_partecipazione' => 'decimal:2',
        'evento_multiplo' => 'boolean',
        'richiede_conferma' => 'boolean',
        'lista_attesa' => 'boolean',
        'rilascia_attestato' => 'boolean',
        'docenti' => 'array',
        'staff' => 'array',
        'giorni_promemoria' => 'array',
        'abilita_feedback' => 'boolean'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function organizzatore()
    {
        return $this->belongsTo(User::class, 'organizzatore_id');
    }

    public function partecipazioni()
    {
        return $this->hasMany(PartecipazioneEvento::class);
    }

    public function volontari()
    {
        return $this->belongsToMany(Volontario::class, 'partecipazioni_eventi')
                    ->withPivot(['stato', 'data_iscrizione', 'note_presenza'])
                    ->withTimestamps();
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getStatoLabelAttribute()
    {
        $labels = [
            'bozza' => 'Bozza',
            'pubblicato' => 'Pubblicato',
            'in_corso' => 'In Corso',
            'completato' => 'Completato',
            'cancellato' => 'Cancellato'
        ];
        
        return $labels[$this->stato] ?? 'Sconosciuto';
    }

    public function getColoreStatoAttribute()
    {
        $colori = [
            'bozza' => 'secondary',
            'pubblicato' => 'primary',
            'in_corso' => 'warning',
            'completato' => 'success',
            'cancellato' => 'danger'
        ];
        
        return $colori[$this->stato] ?? 'secondary';
    }

    public function getDurataOreAttribute()
    {
        if (!$this->data_inizio || !$this->data_fine) {
            return 0;
        }
        
        return $this->data_inizio->diffInHours($this->data_fine);
    }

    public function getPostiDisponibiliAttribute()
    {
        if (!$this->max_partecipanti) {
            return null;
        }
        
        $partecipanti = $this->partecipazioni()
                            ->where('stato', 'confermato')
                            ->count();
                            
        return $this->max_partecipanti - $partecipanti;
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopePubblicati($query)
    {
        return $query->where('stato', 'pubblicato');
    }

    public function scopeFuturi($query)
    {
        return $query->where('data_inizio', '>', now());
    }

    public function scopePassati($query)
    {
        return $query->where('data_fine', '<', now());
    }

    public function scopeInCorso($query)
    {
        return $query->where('data_inizio', '<=', now())
                    ->where('data_fine', '>=', now());
    }

    public function scopePerTipo($query, $tipo)
    {
        return $query->where('tipo', $tipo);
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public function isFuturo()
    {
        return $this->data_inizio > now();
    }

    public function isPassato()
    {
        return $this->data_fine < now();
    }

    public function isInCorso()
    {
        return $this->data_inizio <= now() && $this->data_fine >= now();
    }

    public function postiEsauriti()
    {
        return $this->max_partecipanti && $this->posti_disponibili <= 0;
    }

    public function iscrizioniAperte()
    {
        if ($this->scadenza_iscrizioni && $this->scadenza_iscrizioni < now()) {
            return false;
        }
        
        return $this->stato === 'pubblicato' && !$this->postiEsauriti();
    }

    public function generateCodiceEvento()
    {
        $anno = $this->data_inizio ? $this->data_inizio->format('Y') : date('Y');
        $mese = $this->data_inizio ? $this->data_inizio->format('m') : date('m');
        $progressivo = str_pad($this->id, 3, '0', STR_PAD_LEFT);
        
        return "EVT{$anno}{$mese}{$progressivo}";
    }
}
--- LogAttivita.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class LogAttivita extends Model
{
    use HasFactory;

    protected $table = 'log_attivita';

    protected $fillable = [
        'user_id',
        'azione',
        'modulo',
        'record_id',
        'record_type',
        'dati_prima',
        'dati_dopo',
        'ip_address',
        'user_agent',
        'note'
    ];

    protected $casts = [
        'dati_prima' => 'array',
        'dati_dopo' => 'array'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function record()
    {
        return $this->morphTo();
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getAzioneLabelAttribute()
    {
        $labels = [
            'create' => 'Creazione',
            'update' => 'Modifica',
            'delete' => 'Eliminazione',
            'login' => 'Accesso',
            'logout' => 'Uscita',
            'view' => 'Visualizzazione',
            'download' => 'Download',
            'upload' => 'Upload'
        ];
        
        return $labels[$this->azione] ?? 'Azione';
    }

    public function getColoreAzioneAttribute()
    {
        $colori = [
            'create' => 'success',
            'update' => 'warning',
            'delete' => 'danger',
            'login' => 'info',
            'logout' => 'secondary',
            'view' => 'primary',
            'download' => 'info',
            'upload' => 'success'
        ];
        
        return $colori[$this->azione] ?? 'secondary';
    }

    public function getModuloLabelAttribute()
    {
        $labels = [
            'volontari' => 'Volontari',
            'mezzi' => 'Mezzi',
            'eventi' => 'Eventi',
            'dpi' => 'DPI',
            'magazzino' => 'Magazzino',
            'tickets' => 'Tickets',
            'auth' => 'Autenticazione',
            'admin' => 'Amministrazione'
        ];
        
        return $labels[$this->modulo] ?? 'Sistema';
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopePerUtente($query, $userId)
    {
        return $query->where('user_id', $userId);
    }

    public function scopePerModulo($query, $modulo)
    {
        return $query->where('modulo', $modulo);
    }

    public function scopePerAzione($query, $azione)
    {
        return $query->where('azione', $azione);
    }

    public function scopeRecenti($query, $giorni = 7)
    {
        return $query->where('created_at', '>=', now()->subDays($giorni));
    }

    // ===================================
    // METODI STATICI
    // ===================================

    public static function registra($azione, $modulo, $record = null, $datiPrima = null, $datiDopo = null, $note = null)
    {
        return self::create([
            'user_id' => auth()->id(),
            'azione' => $azione,
            'modulo' => $modulo,
            'record_id' => $record ? $record->id : null,
            'record_type' => $record ? get_class($record) : null,
            'dati_prima' => $datiPrima,
            'dati_dopo' => $datiDopo,
            'ip_address' => request()->ip(),
            'user_agent' => request()->userAgent(),
            'note' => $note
        ]);
    }
}
--- Magazzino.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Carbon\Carbon;

class Magazzino extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'magazzino';

    protected $fillable = [
        'nome_articolo',
        'descrizione',
        'codice_articolo',
        'codice_interno',
        'codice_fornitore',
        'quantita_attuale',
        'quantita_minima',
        'quantita_massima',
        'punto_riordino',
        'unita_misura',
        'categoria',
        'sottocategoria',
        'tags',
        'scadenza',
        'lotto',
        'gestione_lotti',
        'gestione_scadenze',
        'prezzo_unitario',
        'costo_ultimo_acquisto',
        'fornitore_principale',
        'fornitori_alternativi',
        'ubicazione',
        'zona_magazzino',
        'temperatura_conservazione_min',
        'temperatura_conservazione_max',
        'condizioni_conservazione',
        'farmaco',
        'stupefacente',
        'dispositivo_medico',
        'classe_dispositivo',
        'monouso',
        'attivo',
        'note',
        'foto',
        'responsabile_id'
    ];

    protected $casts = [
        'tags' => 'array',
        'scadenza' => 'date',
        'gestione_lotti' => 'boolean',
        'gestione_scadenze' => 'boolean',
        'prezzo_unitario' => 'decimal:2',
        'costo_ultimo_acquisto' => 'decimal:2',
        'fornitori_alternativi' => 'array',
        'temperatura_conservazione_min' => 'decimal:2',
        'temperatura_conservazione_max' => 'decimal:2',
        'farmaco' => 'boolean',
        'stupefacente' => 'boolean',
        'dispositivo_medico' => 'boolean',
        'monouso' => 'boolean',
        'attivo' => 'boolean'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function movimenti()
    {
        return $this->hasMany(MovimentoMagazzino::class, 'articolo_id');
    }

    public function ultimoMovimento()
    {
        return $this->hasOne(MovimentoMagazzino::class, 'articolo_id')->latest('created_at');
    }

    public function responsabile()
    {
        return $this->belongsTo(User::class, 'responsabile_id');
    }

    public function tickets()
    {
        return $this->hasMany(Ticket::class, 'articolo_magazzino_id');
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getSottoscortaAttribute()
    {
        return $this->quantita_attuale <= $this->quantita_minima;
    }

    public function getInScadenzaAttribute()
    {
        return $this->scadenza && $this->scadenza->diffInDays(now()) <= 30;
    }

    public function getScadutoAttribute()
    {
        return $this->scadenza && $this->scadenza->isPast();
    }

    public function getValoreStockAttribute()
    {
        return $this->quantita_attuale * ($this->prezzo_unitario ?? 0);
    }

    public function getColoreStatoAttribute()
    {
        if (!$this->attivo) return 'secondary';
        if ($this->scaduto) return 'danger';
        if ($this->sottoscorta) return 'warning';
        if ($this->in_scadenza) return 'info';
        return 'success';
    }

    public function getStatoDescrizioneAttribute()
    {
        if (!$this->attivo) return 'Non Attivo';
        if ($this->scaduto) return 'Scaduto';
        if ($this->sottoscorta) return 'Sottoscorta';
        if ($this->in_scadenza) return 'In Scadenza';
        return 'Disponibile';
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public function registraCarico($quantita, $motivo, $userId = null, $datiExtra = [])
    {
        $movimento = $this->movimenti()->create([
            'user_id' => $userId ?? auth()->id(),
            'tipo' => 'carico',
            'quantita' => $quantita,
            'motivo' => $motivo,
            'data_movimento' => now()->toDateString(),
            ...$datiExtra
        ]);

        $this->increment('quantita_attuale', $quantita);

        if (isset($datiExtra['prezzo_unitario'])) {
            $this->update(['costo_ultimo_acquisto' => $datiExtra['prezzo_unitario']]);
        }

        return $movimento;
    }

    public function registraScarico($quantita, $motivo, $userId = null, $datiExtra = [])
    {
        if ($this->quantita_attuale < $quantita) {
            throw new \Exception("Quantità insufficiente in magazzino. Disponibili: {$this->quantita_attuale} {$this->unita_misura}");
        }

        $movimento = $this->movimenti()->create([
            'user_id' => $userId ?? auth()->id(),
            'tipo' => 'scarico',
            'quantita' => $quantita,
            'motivo' => $motivo,
            'data_movimento' => now()->toDateString(),
            ...$datiExtra
        ]);

        $this->decrement('quantita_attuale', $quantita);

        if ($this->sottoscorta) {
            $this->creaNotificaSottoscorta();
        }

        return $movimento;
    }

    private function creaNotificaSottoscorta()
    {
        $utentiNotifica = collect();
        
        if ($this->responsabile_id) {
            $utentiNotifica->push($this->responsabile_id);
        }
        
        $utentiMezzi = User::where('ruolo', 'mezzi')->where('attivo', true)->pluck('id');
        $utentiNotifica = $utentiNotifica->merge($utentiMezzi)->unique();

        Notifica::create([
            'destinatari' => $utentiNotifica->toArray(),
            'titolo' => 'Articolo Sottoscorta',
            'messaggio' => "L'articolo '{$this->nome_articolo}' è sotto la quantità minima. Disponibili: {$this->quantita_attuale} {$this->unita_misura}",
            'tipo' => 'sottoscorta'
        ]);
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopeAttivi($query)
    {
        return $query->where('attivo', true);
    }

    public function scopeSottoscorta($query)
    {
        return $query->whereRaw('quantita_attuale <= quantita_minima');
    }

    public function scopeInScadenza($query, $giorni = 30)
    {
        return $query->whereDate('scadenza', '<=', now()->addDays($giorni))
                     ->whereDate('scadenza', '>=', now());
    }

    public function scopeRicerca($query, $termine)
    {
        return $query->where(function($q) use ($termine) {
            $q->where('nome_articolo', 'like', "%{$termine}%")
              ->orWhere('descrizione', 'like', "%{$termine}%")
              ->orWhere('codice_articolo', 'like', "%{$termine}%")
              ->orWhere('codice_interno', 'like', "%{$termine}%");
        });
    }
}

--- Manutenzione.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;

class Manutenzione extends Model
{
    use HasFactory;

    protected $table = 'manutenzioni';

    protected $fillable = [
        'mezzo_id',
        'tipo_manutenzione',
        'descrizione',
        'data_manutenzione',
        'km_effettuati',
        'costo',
        'fornitore',
        'numero_fattura',
        'prossima_manutenzione',
        'km_prossima_manutenzione',
        'stato',
        'note',
        'tecnico_responsabile',
        'allegati'
    ];

    protected $casts = [
        'data_manutenzione' => 'date',
        'prossima_manutenzione' => 'date',
        'costo' => 'decimal:2',
        'allegati' => 'array'
    ];

    // Relazioni
    public function mezzo()
    {
        return $this->belongsTo(Mezzo::class);
    }

    // Attributi computati
    public function getTipoLabelAttribute()
    {
        $tipi = [
            'tagliando' => 'Tagliando',
            'revisione' => 'Revisione',
            'riparazione' => 'Riparazione',
            'controllo' => 'Controllo',
            'altro' => 'Altro'
        ];
        
        return $tipi[$this->tipo_manutenzione] ?? 'Non specificato';
    }
}
--- Mezzo.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Carbon\Carbon;

class Mezzo extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'mezzi';

    protected $fillable = [
        'targa',
        'tipo',
        'marca',
        'modello',
        'anno',
        'numero_telaio',
        'colore',
        'alimentazione',
        'scadenza_revisione',
        'scadenza_assicurazione',
        'compagnia_assicurazione',
        'numero_polizza',
        'scadenza_bollo',
        'scadenza_collaudo',
        'km_attuali',
        'km_ultimo_tagliando',
        'km_prossimo_tagliando',
        'intervallo_tagliando',
        'data_ultimo_tagliando',
        'dotazioni_sanitarie',
        'dotazioni_tecniche',
        'aria_condizionata',
        'gps',
        'radio_ponte',
        'frequenza_radio',
        'note',
        'attivo',
        'in_servizio',
        'data_dismissione',
        'motivo_dismissione',
        'costo_acquisto',
        'data_acquisto',
        'fornitore',
        'posizione_attuale',
        'ultimo_user_id',
        'ultimo_utilizzo'
    ];

    protected $casts = [
        'scadenza_revisione' => 'date',
        'scadenza_assicurazione' => 'date',
        'scadenza_bollo' => 'date',
        'scadenza_collaudo' => 'date',
        'data_ultimo_tagliando' => 'date',
        'dotazioni_sanitarie' => 'array',
        'dotazioni_tecniche' => 'array',
        'aria_condizionata' => 'boolean',
        'gps' => 'boolean',
        'radio_ponte' => 'boolean',
        'attivo' => 'boolean',
        'in_servizio' => 'boolean',
        'data_dismissione' => 'datetime',
        'costo_acquisto' => 'decimal:2',
        'data_acquisto' => 'date',
        'ultimo_utilizzo' => 'datetime'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function manutenzioni()
    {
        return $this->hasMany(Manutenzione::class);
    }

    public function ultimaManutenzione()
    {
        return $this->hasOne(Manutenzione::class)->latest('data_manutenzione');
    }

    public function checklistCompilate()
    {
        return $this->hasMany(ChecklistCompilata::class);
    }

    public function ultimaChecklist()
    {
        return $this->hasOne(ChecklistCompilata::class)->latest('data_compilazione');
    }

    public function checklistNonConformi()
    {
        return $this->hasMany(ChecklistCompilata::class)->where('conforme', false);
    }

    public function ultimoUtente()
    {
        return $this->belongsTo(User::class, 'ultimo_user_id');
    }

    public function tickets()
    {
        return $this->hasMany(Ticket::class);
    }

    public function ticketsAperti()
    {
        return $this->hasMany(Ticket::class)->whereIn('stato', ['aperto', 'assegnato', 'in_corso']);
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getTipoDescrizioneAttribute()
    {
        $tipi = [
            'ambulanza_a' => 'Ambulanza Tipo A',
            'ambulanza_b' => 'Ambulanza Tipo B',
            'auto_medica' => 'Auto Medica',
            'auto_servizio' => 'Auto di Servizio',
            'furgone' => 'Furgone',
            'altro' => 'Altro Veicolo'
        ];
        
        return $tipi[$this->tipo] ?? 'Non Specificato';
    }

    public function getEtaVeicoloAttribute()
    {
        return now()->year - $this->anno;
    }

    public function getColoreStatoAttribute()
    {
        if (!$this->attivo) return 'danger';
        if (!$this->in_servizio) return 'warning';
        
        $scadenzeVicine = $this->scadenze_vicine;
        if ($scadenzeVicine->where('urgente', true)->isNotEmpty()) return 'danger';
        if ($scadenzeVicine->isNotEmpty()) return 'warning';
        
        return 'success';
    }

    public function getStatoDescrizioneAttribute()
    {
        if (!$this->attivo) return 'Fuori Servizio';
        if (!$this->in_servizio) return 'Manutenzione';
        
        $scadenzeVicine = $this->scadenze_vicine;
        if ($scadenzeVicine->where('urgente', true)->isNotEmpty()) return 'Scadenze Urgenti';
        if ($scadenzeVicine->isNotEmpty()) return 'Scadenze Vicine';
        
        return 'Operativo';
    }

    public function getScadenzeVicineAttribute()
    {
        $scadenze = collect();
        
        $campiScadenza = [
            'scadenza_revisione' => 'Revisione',
            'scadenza_assicurazione' => 'Assicurazione',
            'scadenza_bollo' => 'Bollo Auto',
            'scadenza_collaudo' => 'Collaudo'
        ];
        
        foreach ($campiScadenza as $campo => $tipo) {
            if ($this->$campo) {
                $giorni = now()->diffInDays($this->$campo, false);
                if ($giorni <= 30 && $giorni >= 0) {
                    $scadenze->push([
                        'tipo' => $tipo,
                        'data' => $this->$campo,
                        'giorni' => $giorni,
                        'urgente' => $giorni <= 7,
                        'url' => route('mezzi.edit', $this->id)
                    ]);
                }
            }
        }
        
        // Prossimo tagliando
        if ($this->km_prossimo_tagliando) {
            $kmMancanti = $this->km_prossimo_tagliando - $this->km_attuali;
            if ($kmMancanti <= 1000 && $kmMancanti >= 0) {
                $scadenze->push([
                    'tipo' => 'Tagliando',
                    'data' => null,
                    'km_mancanti' => $kmMancanti,
                    'urgente' => $kmMancanti <= 200,
                    'url' => route('mezzi.edit', $this->id)
                ]);
            }
        }
        
        return $scadenze->sortBy('giorni');
    }

    public function getCostoManutenzioniAnnoAttribute()
    {
        return $this->manutenzioni()
                   ->whereYear('data_manutenzione', now()->year)
                   ->sum('costo') ?? 0;
    }

    public function getKmMedioMensileAttribute()
    {
        if (!$this->data_acquisto) return 0;
        
        $mesiPossesso = $this->data_acquisto->diffInMonths(now());
        if ($mesiPossesso == 0) return 0;
        
        return round($this->km_attuali / $mesiPossesso);
    }

    public function getEfficienzaAttribute()
    {
        $costoTotale = $this->manutenzioni()->sum('costo');
        if ($costoTotale == 0) return null;
        
        return round($this->km_attuali / $costoTotale, 2);
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public function necessitaManutenzione()
    {
        // Verifica km per tagliando
        if ($this->km_prossimo_tagliando && $this->km_attuali >= $this->km_prossimo_tagliando) {
            return true;
        }
        
        // Verifica scadenze documenti
        $scadenzeScadute = $this->scadenze_vicine->where('giorni', '<=', 0);
        if ($scadenzeScadute->isNotEmpty()) {
            return true;
        }
        
        // Verifica checklist non conformi recenti
        $checklistNonConformi = $this->checklistNonConformi()
                                    ->where('data_compilazione', '>=', now()->subDays(7))
                                    ->count();
        
        return $checklistNonConformi > 0;
    }

    public function aggiornaKm($nuoviKm, $userId = null)
    {
        if ($nuoviKm > $this->km_attuali) {
            $this->update([
                'km_attuali' => $nuoviKm,
                'ultimo_user_id' => $userId ?? auth()->id(),
                'ultimo_utilizzo' => now()
            ]);
            
            // Verifica se necessita tagliando
            if ($this->km_prossimo_tagliando && $nuoviKm >= $this->km_prossimo_tagliando) {
                $this->creaNotificaTagliando();
            }
        }
    }

    private function creaNotificaTagliando()
    {
        $utentiMezzi = User::where('ruolo', 'mezzi')->where('attivo', true)->pluck('id');
        
        Notifica::create([
            'destinatari' => $utentiMezzi->toArray(),
            'titolo' => 'Tagliando Necessario',
            'messaggio' => "Il mezzo {$this->targa} ({$this->tipo_descrizione}) ha raggiunto i km per il tagliando programmato.",
            'tipo' => 'manutenzione'
        ]);
    }

    public function registraManutenzione($dati)
    {
        $manutenzione = $this->manutenzioni()->create($dati);
        
        // Aggiorna dati mezzo se è un tagliando
        if ($dati['tipo'] === 'tagliando') {
            $this->update([
                'km_ultimo_tagliando' => $dati['km_effettuati'],
                'km_prossimo_tagliando' => $dati['km_effettuati'] + $this->intervallo_tagliando,
                'data_ultimo_tagliando' => $dati['data_manutenzione']
            ]);
        }
        
        return $manutenzione;
    }

    public function mettiFuoriServizio($motivo = null)
    {
        $this->update([
            'in_servizio' => false,
            'posizione_attuale' => 'officina'
        ]);
        
        LogAttivita::create([
            'user_id' => auth()->id(),
            'azione' => 'fuori_servizio',
            'modulo' => 'mezzi',
            'risorsa_id' => $this->id,
            'descrizione' => "Mezzo {$this->targa} messo fuori servizio",
            'note' => $motivo,
            'ip_address' => request()->ip(),
            'user_agent' => request()->userAgent(),
            'data_ora' => now()
        ]);
    }

    public function rimettiInServizio()
    {
        $this->update([
            'in_servizio' => true,
            'posizione_attuale' => 'sede'
        ]);
        
        LogAttivita::create([
            'user_id' => auth()->id(),
            'azione' => 'in_servizio',
            'modulo' => 'mezzi',
            'risorsa_id' => $this->id,
            'descrizione' => "Mezzo {$this->targa} rimesso in servizio",
            'ip_address' => request()->ip(),
            'user_agent' => request()->userAgent(),
            'data_ora' => now()
        ]);
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopeAttivi($query)
    {
        return $query->where('attivo', true);
    }

    public function scopeInServizio($query)
    {
        return $query->where('in_servizio', true);
    }

    public function scopePerTipo($query, $tipo)
    {
        return $query->where('tipo', $tipo);
    }

    public function scopeConScadenzeVicine($query, $giorni = 30)
    {
        return $query->where(function($q) use ($giorni) {
            $q->whereDate('scadenza_revisione', '<=', now()->addDays($giorni))
              ->whereDate('scadenza_revisione', '>=', now())
              ->orWhereDate('scadenza_assicurazione', '<=', now()->addDays($giorni))
              ->whereDate('scadenza_assicurazione', '>=', now())
              ->orWhereDate('scadenza_bollo', '<=', now()->addDays($giorni))
              ->whereDate('scadenza_bollo', '>=', now());
        });
    }

    public function scopeRicerca($query, $termine)
    {
        return $query->where(function($q) use ($termine) {
            $q->where('targa', 'like', "%{$termine}%")
              ->orWhere('marca', 'like', "%{$termine}%")
              ->orWhere('modello', 'like', "%{$termine}%")
              ->orWhere('tipo', 'like', "%{$termine}%");
        });
    }
}
--- MovimentoMagazzino.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class MovimentoMagazzino extends Model
{
    use HasFactory;

    protected $table = 'movimenti_magazzino';

    protected $fillable = [
        'magazzino_id',
        'user_id',
        'tipo_movimento',
        'quantita',
        'quantita_precedente',
        'quantita_attuale',
        'prezzo_unitario',
        'valore_totale',
        'data_movimento',
        'causale',
        'numero_documento',
        'fornitore',
        'note',
        'approvato',
        'approvato_da',
        'data_approvazione'
    ];

    protected $casts = [
        'data_movimento' => 'datetime',
        'data_approvazione' => 'datetime',
        'quantita' => 'decimal:2',
        'quantita_precedente' => 'decimal:2',
        'quantita_attuale' => 'decimal:2',
        'prezzo_unitario' => 'decimal:2',
        'valore_totale' => 'decimal:2',
        'approvato' => 'boolean'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function articolo()
    {
        return $this->belongsTo(Magazzino::class, 'magazzino_id');
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function approvatoDa()
    {
        return $this->belongsTo(User::class, 'approvato_da');
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getTipoMovimentoLabelAttribute()
    {
        $labels = [
            'carico' => 'Carico',
            'scarico' => 'Scarico',
            'inventario' => 'Inventario',
            'rettifica' => 'Rettifica',
            'trasferimento' => 'Trasferimento',
            'perdita' => 'Perdita',
            'donazione' => 'Donazione'
        ];
        
        return $labels[$this->tipo_movimento] ?? 'Movimento';
    }

    public function getColoreTipoAttribute()
    {
        $colori = [
            'carico' => 'success',
            'scarico' => 'danger',
            'inventario' => 'info',
            'rettifica' => 'warning',
            'trasferimento' => 'primary',
            'perdita' => 'dark',
            'donazione' => 'secondary'
        ];
        
        return $colori[$this->tipo_movimento] ?? 'secondary';
    }

    public function getIconaTipoAttribute()
    {
        $icone = [
            'carico' => 'box-arrow-in-down',
            'scarico' => 'box-arrow-up',
            'inventario' => 'clipboard-check',
            'rettifica' => 'pencil-square',
            'trasferimento' => 'arrow-left-right',
            'perdita' => 'exclamation-triangle',
            'donazione' => 'gift'
        ];
        
        return $icone[$this->tipo_movimento] ?? 'box';
    }

    public function getVariazioneQuantitaAttribute()
    {
        if (in_array($this->tipo_movimento, ['carico', 'inventario'])) {
            return "+{$this->quantita}";
        } else {
            return "-{$this->quantita}";
        }
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopeCarichi($query)
    {
        return $query->whereIn('tipo_movimento', ['carico', 'inventario']);
    }

    public function scopeScarichi($query)
    {
        return $query->whereIn('tipo_movimento', ['scarico', 'perdita', 'donazione']);
    }

    public function scopePerArticolo($query, $articoloId)
    {
        return $query->where('magazzino_id', $articoloId);
    }

    public function scopePerPeriodo($query, $dataInizio, $dataFine)
    {
        return $query->whereBetween('data_movimento', [$dataInizio, $dataFine]);
    }

    public function scopeApprovati($query)
    {
        return $query->where('approvato', true);
    }

    public function scopeInAttesaApprovazione($query)
    {
        return $query->where('approvato', false);
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public function isCarico()
    {
        return in_array($this->tipo_movimento, ['carico', 'inventario']);
    }

    public function isScarico()
    {
        return in_array($this->tipo_movimento, ['scarico', 'perdita', 'donazione']);
    }

    public function approva($userId = null)
    {
        $this->update([
            'approvato' => true,
            'approvato_da' => $userId ?? auth()->id(),
            'data_approvazione' => now()
        ]);
    }

    public function calcolaValoreTotale()
    {
        if ($this->prezzo_unitario && $this->quantita) {
            $this->valore_totale = $this->prezzo_unitario * $this->quantita;
            $this->save();
        }
    }

    // ===================================
    // EVENTI MODEL
    // ===================================

    protected static function boot()
    {
        parent::boot();

        static::creating(function ($movimento) {
            // Calcola automaticamente il valore totale
            if ($movimento->prezzo_unitario && $movimento->quantita) {
                $movimento->valore_totale = $movimento->prezzo_unitario * $movimento->quantita;
            }

            // Imposta la data movimento se non specificata
            if (!$movimento->data_movimento) {
                $movimento->data_movimento = now();
            }
        });

        static::created(function ($movimento) {
            // Aggiorna la quantità dell'articolo in magazzino
            if ($movimento->approvato) {
                $movimento->aggiornaQuantitaArticolo();
            }
        });
    }

    public function aggiornaQuantitaArticolo()
    {
        $articolo = $this->articolo;
        if (!$articolo) return;

        if ($this->isCarico()) {
            $articolo->increment('quantita_attuale', $this->quantita);
        } else {
            $articolo->decrement('quantita_attuale', $this->quantita);
        }
    }
}
--- Notifica.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Notifica extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'notifiche';

    protected $fillable = [
        'user_id',
        'destinatari',
        'titolo',
        'messaggio',
        'tipo',
        'letta_da',
        'priorita',
        'url_azione',
        'testo_azione',
        'scade_il',
        'metadati',
        'read_at'
    ];

    protected $casts = [
        'destinatari' => 'array',
        'letta_da' => 'array',
        'metadati' => 'array',
        'scade_il' => 'datetime',
        'read_at' => 'datetime'
    ];

    // Relazioni
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    // Scope corretti
    public function scopePerUtente($query, $userId)
    {
        return $query->where('user_id', $userId);
    }

    public function scopeNonLette($query, $userId)
    {
        return $query->where('user_id', $userId)->whereNull('read_at');
    }

    public function scopeLette($query, $userId)
    {
        return $query->where('user_id', $userId)->whereNotNull('read_at');
    }

    // Metodi utility
    public function marcaComeLetta()
    {
        $this->update(['read_at' => now()]);
        return $this;
    }

    public static function crea($dati)
    {
        // Se destinatari è array, crea notifiche multiple
        if (isset($dati['destinatari']) && is_array($dati['destinatari'])) {
            $notifiche = [];
            foreach ($dati['destinatari'] as $userId) {
                $notificaData = $dati;
                $notificaData['user_id'] = $userId;
                unset($notificaData['destinatari']);
                $notifiche[] = self::create($notificaData);
            }
            return $notifiche;
        }
        
        return self::create($dati);
    }
}

--- PartecipazioneEvento.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class PartecipazioneEvento extends Model
{
    use HasFactory;

    // Tabella associata al modello
    protected $table = 'partecipazioni_eventi';

    protected $fillable = [
        'evento_id',
        'user_id',
        'stato',
        'data_iscrizione',
        'data_conferma',
        'data_annullamento',
        'presente',
        'ora_arrivo',
        'ora_uscita',
        'note_presenza',
        'superato',
        'voto',
        'numero_attestato',
        'data_rilascio_attestato',
        'file_attestato',
        'valutazione_evento',
        'feedback_evento',
        'valutazione_docenti',
        'feedback_docenti',
        'suggerimenti',
        'consiglia_evento',
        'motivo_rifiuto',
        'motivo_annullamento',
        'note'
    ];

    protected $casts = [
        'data_iscrizione' => 'datetime',
        'data_conferma' => 'datetime',
        'data_annullamento' => 'datetime',
        'presente' => 'boolean',
        'superato' => 'boolean',
        'data_rilascio_attestato' => 'date',
        'valutazione_evento' => 'integer',
        'valutazione_docenti' => 'integer',
        'consiglia_evento' => 'boolean'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function evento()
    {
        return $this->belongsTo(Evento::class);
    }

    public function volontario()
    {
        return $this->belongsTo(Volontario::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getStatoLabelAttribute()
    {
        $labels = [
            'iscritto' => 'Iscritto',
            'confermato' => 'Confermato',
            'presente' => 'Presente',
            'assente' => 'Assente',
            'cancellato' => 'Cancellato'
        ];
        
        return $labels[$this->stato] ?? 'Sconosciuto';
    }

    public function getColoreStatoAttribute()
    {
        $colori = [
            'iscritto' => 'info',
            'confermato' => 'primary',
            'presente' => 'success',
            'assente' => 'warning',
            'cancellato' => 'danger'
        ];
        
        return $colori[$this->stato] ?? 'secondary';
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopeConfermati($query)
    {
        return $query->where('stato', 'confermato');
    }

    public function scopePresenti($query)
    {
        return $query->where('stato', 'presente');
    }

    public function scopePerEvento($query, $eventoId)
    {
        return $query->where('evento_id', $eventoId);
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public function conferma()
    {
        $this->update([
            'stato' => 'confermato',
            'data_conferma' => now()
        ]);
    }

    public function marcaPresente($oreEffettive = null)
    {
        $this->update([
            'stato' => 'presente'
        ]);
    }

    public function marcaAssente()
    {
        $this->update([
            'stato' => 'assente'
        ]);
    }

    public function cancella()
    {
        $this->update([
            'stato' => 'cancellato'
        ]);
    }
}
--- Permission.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Cache;

class Permission extends Model
{
    use HasFactory;

    protected $fillable = [
        'modulo', 
        'ruolo', 
        'visualizza', 
        'crea', 
        'modifica', 
        'elimina',
        'configura',
        'note'
    ];

    protected $casts = [
        'visualizza' => 'boolean',
        'crea' => 'boolean',
        'modifica' => 'boolean',
        'elimina' => 'boolean',
        'configura' => 'boolean',
    ];

    // ===================================
    // COSTANTI
    // ===================================

    /**
     * Moduli disponibili nel sistema
     */
    public const MODULI = [
        'volontari' => 'Gestione Volontari',
        'mezzi' => 'Gestione Mezzi',
        'magazzino' => 'Gestione Magazzino',
        'dpi' => 'Dispositivi di Protezione',
        'documenti' => 'Gestione Documenti',
        'eventi' => 'Eventi e Formazione',
        'avvisi' => 'Bacheca Avvisi',
        'tickets' => 'Segnalazioni Interne',
        'archivio' => 'Archivio Digitale',
        'logs' => 'Registro Attività',
        'configurazione' => 'Configurazioni Sistema'
    ];

    /**
     * Ruoli disponibili
     */
    public const RUOLI = [
        'admin' => 'Amministratore',
        'direttivo' => 'Direttivo',
        'segreteria' => 'Segreteria',
        'mezzi' => 'Responsabile Mezzi',
        'dipendente' => 'Dipendente',
        'volontario' => 'Volontario'
    ];

    /**
     * Azioni disponibili
     */
    public const AZIONI = [
        'visualizza' => 'Visualizzare',
        'crea' => 'Creare',
        'modifica' => 'Modificare',
        'elimina' => 'Eliminare',
        'configura' => 'Configurare'
    ];

    // ===================================
    // METODI STATICI
    // ===================================

    /**
     * Ottieni permessi per ruolo
     */
    public static function getPermessiRuolo($ruolo)
    {
        return Cache::remember("permissions_role_{$ruolo}", 3600, function() use ($ruolo) {
            return self::where('ruolo', $ruolo)->get()->keyBy('modulo');
        });
    }

    /**
     * Ottieni tutti i permessi in formato matrice
     */
    public static function getMatricePermessi()
    {
        return Cache::remember('permissions_matrix', 3600, function() {
            $permessi = self::all();
            $matrice = [];
            
            foreach (self::MODULI as $modulo => $nome) {
                $matrice[$modulo] = ['nome' => $nome, 'ruoli' => []];
                
                foreach (self::RUOLI as $ruolo => $nomeRuolo) {
                    $permesso = $permessi->where('modulo', $modulo)
                                        ->where('ruolo', $ruolo)
                                        ->first();
                    
                    $matrice[$modulo]['ruoli'][$ruolo] = $permesso ?? new self([
                        'modulo' => $modulo,
                        'ruolo' => $ruolo,
                        'visualizza' => false,
                        'crea' => false,
                        'modifica' => false,
                        'elimina' => false,
                        'configura' => false
                    ]);
                }
            }
            
            return $matrice;
        });
    }

    /**
     * Inizializza permessi di default
     */
    public static function inizializzaPermessiDefault()
    {
        $permessiDefault = [
            'admin' => [
                '*' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => true, 'configura' => true]
            ],
            'direttivo' => [
                'volontari' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'mezzi' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'magazzino' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'dpi' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'documenti' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'eventi' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'avvisi' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'tickets' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'archivio' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'logs' => ['visualizza' => true, 'crea' => false, 'modifica' => false, 'elimina' => false]
            ],
            'segreteria' => [
                'volontari' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'mezzi' => ['visualizza' => true, 'crea' => false, 'modifica' => true, 'elimina' => false],
                'documenti' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'eventi' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'avvisi' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'archivio' => ['visualizza' => true, 'crea' => true, 'modifica' => false, 'elimina' => false]
            ],
            'mezzi' => [
                'mezzi' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'magazzino' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'dpi' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false],
                'tickets' => ['visualizza' => true, 'crea' => true, 'modifica' => true, 'elimina' => false]
            ],
            'dipendente' => [
                'volontari' => ['visualizza' => true, 'crea' => false, 'modifica' => false, 'elimina' => false],
                'eventi' => ['visualizza' => true, 'crea' => false, 'modifica' => false, 'elimina' => false],
                'avvisi' => ['visualizza' => true, 'crea' => false, 'modifica' => false, 'elimina' => false],
                'tickets' => ['visualizza' => true, 'crea' => true, 'modifica' => false, 'elimina' => false]
            ],
            'volontario' => [
                'eventi' => ['visualizza' => true, 'crea' => false, 'modifica' => false, 'elimina' => false],
                'avvisi' => ['visualizza' => true, 'crea' => false, 'modifica' => false, 'elimina' => false],
                'tickets' => ['visualizza' => true, 'crea' => true, 'modifica' => false, 'elimina' => false]
            ]
        ];

        foreach ($permessiDefault as $ruolo => $moduli) {
            foreach ($moduli as $modulo => $azioni) {
                if ($modulo === '*') {
                    // Admin ha accesso a tutto
                    foreach (self::MODULI as $mod => $nome) {
                        self::updateOrCreate(
                            ['modulo' => $mod, 'ruolo' => $ruolo],
                            $azioni
                        );
                    }
                } else {
                    self::updateOrCreate(
                        ['modulo' => $modulo, 'ruolo' => $ruolo],
                        $azioni
                    );
                }
            }
        }

        // Pulisci cache
        self::clearCache();
    }

    /**
     * Pulisci cache permessi
     */
    public static function clearCache()
    {
        Cache::forget('permissions_matrix');
        
        foreach (self::RUOLI as $ruolo => $nome) {
            Cache::forget("permissions_role_{$ruolo}");
        }
    }

    // ===================================
    // EVENTI MODEL
    // ===================================

    protected static function boot()
    {
        parent::boot();

        // Pulisci cache quando i permessi vengono modificati
        static::saved(function ($permission) {
            self::clearCache();
        });

        static::deleted(function ($permission) {
            self::clearCache();
        });
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    /**
     * Ottieni label del modulo
     */
    public function getModuloLabelAttribute()
    {
        return self::MODULI[$this->modulo] ?? $this->modulo;
    }

    /**
     * Ottieni label del ruolo
     */
    public function getRuoloLabelAttribute()
    {
        return self::RUOLI[$this->ruolo] ?? $this->ruolo;
    }

    /**
     * Verifica se ha almeno un permesso
     */
    public function hasAnyPermission()
    {
        return $this->visualizza || $this->crea || $this->modifica || $this->elimina || $this->configura;
    }

    /**
     * Ottieni array delle azioni permesse
     */
    public function getAzioniPermesse()
    {
        $azioni = [];
        
        if ($this->visualizza) $azioni[] = 'visualizza';
        if ($this->crea) $azioni[] = 'crea';
        if ($this->modifica) $azioni[] = 'modifica';
        if ($this->elimina) $azioni[] = 'elimina';
        if ($this->configura) $azioni[] = 'configura';
        
        return $azioni;
    }
}
--- Ticket.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Carbon\Carbon;

class Ticket extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'numero_ticket',
        'user_id',
        'assegnato_a',
        'titolo',
        'descrizione',
        'categoria',
        'sottocategoria',
        'priorita',
        'urgenza',
        'blocca_operativita',
        'stato',
        'data_apertura',
        'data_assegnazione',
        'data_inizio_lavori',
        'data_risoluzione',
        'data_chiusura',
        'tempo_risoluzione_ore',
        'mezzo_id',
        'dpi_id',
        'articolo_magazzino_id',
        'ubicazione_problema',
        'soluzione_adottata',
        'note_tecniche',
        'costo_riparazione',
        'fornitore_servizio',
        'richiede_follow_up',
        'data_follow_up',
        'valutazione_richiedente',
        'feedback_richiedente',
        'data_feedback',
        'richiede_approvazione',
        'approvato_da',
        'data_approvazione',
        'note_approvazione',
        'notificati',
        'ultima_notifica',
        'note'
    ];

    protected $casts = [
        'blocca_operativita' => 'boolean',
        'data_apertura' => 'datetime',
        'data_assegnazione' => 'datetime',
        'data_inizio_lavori' => 'datetime',
        'data_risoluzione' => 'datetime',
        'data_chiusura' => 'datetime',
        'data_follow_up' => 'date',
        'costo_riparazione' => 'decimal:2',
        'richiede_follow_up' => 'boolean',
        'data_feedback' => 'datetime',
        'richiede_approvazione' => 'boolean',
        'data_approvazione' => 'datetime',
        'notificati' => 'array',
        'ultima_notifica' => 'datetime'
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function assegnatario()
    {
        return $this->belongsTo(User::class, 'assegnato_a');
    }

    public function approvatore()
    {
        return $this->belongsTo(User::class, 'approvato_da');
    }

    public function mezzo()
    {
        return $this->belongsTo(Mezzo::class);
    }

    public function dpi()
    {
        return $this->belongsTo(Dpi::class);
    }

    public function articoloMagazzino()
    {
        return $this->belongsTo(Magazzino::class, 'articolo_magazzino_id');
    }

    public function allegati()
    {
        return $this->hasMany(AllegatoTicket::class);
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getCategoriaLabelAttribute()
    {
        $categorie = [
            'mezzi' => 'Mezzi e Veicoli',
            'dpi' => 'Dispositivi di Protezione',
            'magazzino' => 'Gestione Magazzino',
            'strutture' => 'Strutture e Impianti',
            'informatica' => 'Sistemi Informatici',
            'formazione' => 'Formazione e Corsi',
            'amministrativo' => 'Questioni Amministrative',
            'sicurezza' => 'Sicurezza e Normative',
            'altro' => 'Altro'
        ];
        
        return $categorie[$this->categoria] ?? $this->categoria;
    }

    public function getPrioritaLabelAttribute()
    {
        $priorita = [
            'bassa' => 'Bassa',
            'media' => 'Media',
            'alta' => 'Alta',
            'critica' => 'Critica'
        ];
        
        return $priorita[$this->priorita] ?? $this->priorita;
    }

    public function getUrgenzaLabelAttribute()
    {
        $urgenza = [
            'non_urgente' => 'Non Urgente',
            'normale' => 'Normale',
            'urgente' => 'Urgente',
            'critica' => 'Critica'
        ];
        
        return $urgenza[$this->urgenza] ?? $this->urgenza;
    }

    public function getStatoLabelAttribute()
    {
        $stati = [
            'aperto' => 'Aperto',
            'assegnato' => 'Assegnato',
            'in_corso' => 'In Corso',
            'in_attesa_parti' => 'In Attesa Parti',
            'in_attesa_approvazione' => 'In Attesa Approvazione',
            'risolto' => 'Risolto',
            'chiuso' => 'Chiuso',
            'annullato' => 'Annullato'
        ];
        
        return $stati[$this->stato] ?? $this->stato;
    }

    public function getColorePrioritaAttribute()
    {
        $colori = [
            'bassa' => 'success',
            'media' => 'info',
            'alta' => 'warning',
            'critica' => 'danger'
        ];
        
        return $colori[$this->priorita] ?? 'secondary';
    }

    public function getColoreStatoAttribute()
    {
        $colori = [
            'aperto' => 'danger',
            'assegnato' => 'warning',
            'in_corso' => 'info',
            'in_attesa_parti' => 'secondary',
            'in_attesa_approvazione' => 'warning',
            'risolto' => 'success',
            'chiuso' => 'dark',
            'annullato' => 'secondary'
        ];
        
        return $colori[$this->stato] ?? 'secondary';
    }

    public function getTempoRisoluzioneTotaleAttribute()
    {
        if ($this->data_risoluzione && $this->data_apertura) {
            return $this->data_apertura->diffInHours($this->data_risoluzione);
        }
        
        return null;
    }

    public function getTempoRispostaAttribute()
    {
        if ($this->data_assegnazione && $this->data_apertura) {
            return $this->data_apertura->diffInHours($this->data_assegnazione);
        }
        
        return null;
    }

    public function getInRitardoAttribute()
    {
        if (in_array($this->stato, ['risolto', 'chiuso', 'annullato'])) {
            return false;
        }

        $sla = $this->getSlaOre();
        $oreTrascorse = $this->data_apertura->diffInHours(now());
        
        return $oreTrascorse > $sla;
    }

    public function getOreResidueSlaAttribute()
    {
        if (in_array($this->stato, ['risolto', 'chiuso', 'annullato'])) {
            return null;
        }

        $sla = $this->getSlaOre();
        $oreTrascorse = $this->data_apertura->diffInHours(now());
        
        return max(0, $sla - $oreTrascorse);
    }

    private function getSlaOre()
    {
        $sla = [
            'critica' => 4,
            'alta' => 24,
            'media' => 72,
            'bassa' => 168
        ];
        
        return $sla[$this->priorita] ?? 72;
    }

    public function getProgressoAttribute()
    {
        $fasi = [
            'aperto' => 10,
            'assegnato' => 25,
            'in_corso' => 50,
            'in_attesa_parti' => 60,
            'in_attesa_approvazione' => 80,
            'risolto' => 90,
            'chiuso' => 100,
            'annullato' => 0
        ];
        
        return $fasi[$this->stato] ?? 0;
    }

    public function getRisorseCollegateAttribute()
    {
        $risorse = [];
        
        if ($this->mezzo) {
            $risorse[] = [
                'tipo' => 'Mezzo',
                'nome' => $this->mezzo->targa . ' - ' . $this->mezzo->tipo_descrizione,
                'url' => route('mezzi.show', $this->mezzo->id)
            ];
        }
        
        if ($this->dpi) {
            $risorse[] = [
                'tipo' => 'DPI',
                'nome' => $this->dpi->nome . ' (' . $this->dpi->codice_dpi . ')',
                'url' => route('dpi.show', $this->dpi->id)
            ];
        }
        
        if ($this->articoloMagazzino) {
            $risorse[] = [
                'tipo' => 'Magazzino',
                'nome' => $this->articoloMagazzino->nome_articolo,
                'url' => route('magazzino.show', $this->articoloMagazzino->id)
            ];
        }
        
        return $risorse;
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public static function generaNumeroTicket()
    {
        $anno = now()->year;
        $ultimoNumero = self::where('numero_ticket', 'like', 'T' . $anno . '%')
                           ->max('numero_ticket');
                           
        if ($ultimoNumero) {
            $numero = intval(substr($ultimoNumero, -5)) + 1;
        } else {
            $numero = 1;
        }
        
        return 'T' . $anno . str_pad($numero, 5, '0', STR_PAD_LEFT);
    }

    public function assegnaA($userId, $note = null)
    {
        $this->update([
            'assegnato_a' => $userId,
            'stato' => 'assegnato',
            'data_assegnazione' => now(),
            'note' => $this->note . ($note ? "\n[" . now()->format('d/m/Y H:i') . "] Assegnato: {$note}" : "")
        ]);

        // Notifica all'assegnatario
        $this->notificaUtente($userId, 'Ticket Assegnato', "Ti è stato assegnato il ticket #{$this->numero_ticket}: {$this->titolo}");

        // Log attività
        $assegnatario = User::find($userId);
        LogAttivita::create([
            'user_id' => auth()->id(),
            'azione' => 'assegnazione_ticket',
            'modulo' => 'tickets',
            'risorsa_id' => $this->id,
            'descrizione' => "Ticket #{$this->numero_ticket} assegnato a {$assegnatario->nome_completo}",
            'note' => $note,
            'ip_address' => request()->ip(),
            'user_agent' => request()->userAgent(),
            'data_ora' => now()
        ]);

        return $this;
    }

    public function iniziaLavori($note = null)
    {
        $this->update([
            'stato' => 'in_corso',
            'data_inizio_lavori' => now(),
            'note' => $this->note . "\n[" . now()->format('d/m/Y H:i') . "] Lavori iniziati" . ($note ? ": {$note}" : "")
        ]);

        // Notifica al richiedente
        $this->notificaUtente($this->user_id, 'Lavori Iniziati', "Sono iniziati i lavori per il ticket #{$this->numero_ticket}: {$this->titolo}");

        return $this;
    }

    public function risolvi($soluzione, $costo = null, $fornitore = null, $richiedeFollowUp = false, $dataFollowUp = null)
    {
        $datiAggiornamento = [
            'stato' => 'risolto',
            'data_risoluzione' => now(),
            'soluzione_adottata' => $soluzione,
            'tempo_risoluzione_ore' => $this->tempo_risoluzione_totale,
            'richiede_follow_up' => $richiedeFollowUp
        ];

        if ($costo) {
            $datiAggiornamento['costo_riparazione'] = $costo;
        }

        if ($fornitore) {
            $datiAggiornamento['fornitore_servizio'] = $fornitore;
        }

        if ($richiedeFollowUp && $dataFollowUp) {
            $datiAggiornamento['data_follow_up'] = $dataFollowUp;
        }

        $datiAggiornamento['note'] = $this->note . "\n[" . now()->format('d/m/Y H:i') . "] Risolto: {$soluzione}";

        $this->update($datiAggiornamento);

        // Notifica al richiedente
        $this->notificaUtente($this->user_id, 'Ticket Risolto', "Il ticket #{$this->numero_ticket} è stato risolto: {$this->titolo}");

        // Se blocca operatività, notifica responsabili
        if ($this->blocca_operativita) {
            $this->notificaRisoluzioneCritica();
        }

        return $this;
    }

    public function chiudi($valutazione = null, $feedback = null)
    {
        $datiAggiornamento = [
            'stato' => 'chiuso',
            'data_chiusura' => now()
        ];

        if ($valutazione) {
            $datiAggiornamento['valutazione_richiedente'] = $valutazione;
            $datiAggiornamento['data_feedback'] = now();
        }

        if ($feedback) {
            $datiAggiornamento['feedback_richiedente'] = $feedback;
        }

        $datiAggiornamento['note'] = $this->note . "\n[" . now()->format('d/m/Y H:i') . "] Chiuso" . ($feedback ? ": {$feedback}" : "");

        $this->update($datiAggiornamento);

        // Notifica all'assegnatario se diverso dal richiedente
        if ($this->assegnato_a && $this->assegnato_a != $this->user_id) {
            $this->notificaUtente($this->assegnato_a, 'Ticket Chiuso', "Il ticket #{$this->numero_ticket} è stato chiuso dal richiedente");
        }

        return $this;
    }

    public function annulla($motivo)
    {
        $this->update([
            'stato' => 'annullato',
            'data_chiusura' => now(),
            'note' => $this->note . "\n[" . now()->format('d/m/Y H:i') . "] Annullato: {$motivo}"
        ]);

        // Notifica all'assegnatario se presente
        if ($this->assegnato_a) {
            $this->notificaUtente($this->assegnato_a, 'Ticket Annullato', "Il ticket #{$this->numero_ticket} è stato annullato: {$motivo}");
        }

        return $this;
    }

    public function richiedeApprovazione($note = null)
    {
        $this->update([
            'stato' => 'in_attesa_approvazione',
            'richiede_approvazione' => true,
            'note' => $this->note . "\n[" . now()->format('d/m/Y H:i') . "] Richiesta approvazione" . ($note ? ": {$note}" : "")
        ]);

        // Notifica ai responsabili
        $responsabili = User::whereIn('ruolo', ['admin', 'direttivo'])->where('attivo', true)->pluck('id');
        
        foreach ($responsabili as $responsabileId) {
            $this->notificaUtente($responsabileId, 'Approvazione Richiesta', "Il ticket #{$this->numero_ticket} richiede approvazione: {$this->titolo}");
        }

        return $this;
    }

    public function approva($userId, $note = null)
    {
        $this->update([
            'stato' => 'risolto',
            'approvato_da' => $userId,
            'data_approvazione' => now(),
            'note_approvazione' => $note,
            'note' => $this->note . "\n[" . now()->format('d/m/Y H:i') . "] Approvato" . ($note ? ": {$note}" : "")
        ]);

        // Notifica al richiedente e assegnatario
        $this->notificaUtente($this->user_id, 'Ticket Approvato', "Il ticket #{$this->numero_ticket} è stato approvato e risolto");
        
        if ($this->assegnato_a && $this->assegnato_a != $this->user_id) {
            $this->notificaUtente($this->assegnato_a, 'Ticket Approvato', "Il ticket #{$this->numero_ticket} è stato approvato");
        }

        return $this;
    }

    private function notificaUtente($userId, $titolo, $messaggio)
    {
        Notifica::create([
            'destinatari' => [$userId],
            'titolo' => $titolo,
            'messaggio' => $messaggio,
            'tipo' => 'ticket'
        ]);
    }

    private function notificaRisoluzioneCritica()
    {
        $utentiNotifica = User::whereIn('ruolo', ['admin', 'direttivo', 'mezzi'])
                             ->where('attivo', true)
                             ->pluck('id');

        Notifica::create([
            'destinatari' => $utentiNotifica->toArray(),
            'titolo' => 'Problema Critico Risolto',
            'messaggio' => "È stato risolto un problema critico che bloccava l'operatività: Ticket #{$this->numero_ticket}",
            'tipo' => 'risoluzione_critica'
        ]);
    }

    // ===================================
    // STATISTICHE E REPORT
    // ===================================

    public static function getStatisticheTickets()
    {
        return [
            'totale_tickets' => self::count(),
            'tickets_aperti' => self::whereIn('stato', ['aperto', 'assegnato', 'in_corso'])->count(),
            'tickets_in_ritardo' => self::whereIn('stato', ['aperto', 'assegnato', 'in_corso'])
                                       ->get()
                                       ->filter(function($ticket) {
                                           return $ticket->in_ritardo;
                                       })
                                       ->count(),
            'tickets_critici' => self::where('priorita', 'critica')
                                    ->whereIn('stato', ['aperto', 'assegnato', 'in_corso'])
                                    ->count(),
            'tickets_mese' => self::whereMonth('created_at', now()->month)
                                 ->whereYear('created_at', now()->year)
                                 ->count(),
            'tempo_medio_risoluzione' => self::whereNotNull('tempo_risoluzione_ore')
                                            ->avg('tempo_risoluzione_ore'),
            'soddisfazione_media' => self::whereNotNull('valutazione_richiedente')
                                        ->avg('valutazione_richiedente')
        ];
    }

    public static function getTicketsInRitardo()
    {
        return self::whereIn('stato', ['aperto', 'assegnato', 'in_corso'])
                   ->get()
                   ->filter(function($ticket) {
                       return $ticket->in_ritardo;
                   });
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopeAperti($query)
    {
        return $query->whereIn('stato', ['aperto', 'assegnato', 'in_corso']);
    }

    public function scopePriorita($query, $priorita)
    {
        return $query->where('priorita', $priorita);
    }

    public function scopeCategoria($query, $categoria)
    {
        return $query->where('categoria', $categoria);
    }

    public function scopeAssegnatiA($query, $userId)
    {
        return $query->where('assegnato_a', $userId);
    }

    public function scopeCreatiDa($query, $userId)
    {
        return $query->where('user_id', $userId);
    }

    public function scopeInRitardo($query)
    {
        return $query->whereIn('stato', ['aperto', 'assegnato', 'in_corso'])
                     ->whereRaw(
                         "TIMESTAMPDIFF(HOUR, data_apertura, NOW()) > CASE priorita " .
                         "WHEN 'critica' THEN 4 " .
                         "WHEN 'alta' THEN 24 " .
                         "WHEN 'media' THEN 72 " .
                         "ELSE 168 END"
                     );
    }

    public function scopeRicerca($query, $termine)
    {
        return $query->where(function($q) use ($termine) {
            $q->where('numero_ticket', 'like', "%{$termine}%")
              ->orWhere('titolo', 'like', "%{$termine}%")
              ->orWhere('descrizione', 'like', "%{$termine}%")
              ->orWhere('soluzione_adottata', 'like', "%{$termine}%");
        });
    }
}
--- User.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Carbon\Carbon;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    protected $fillable = [
        'nome', 
        'cognome', 
        'email', 
        'password', 
        'telefono', 
        'data_nascita',
        'codice_fiscale', 
        'indirizzo', 
        'citta',
        'cap',
        'provincia',
        'ruolo', 
        'attivo',
        'avatar',
        'note',
        'dispositivi_autorizzati'
    ];

    protected $hidden = [
        'password', 
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'data_nascita' => 'date',
        'ultimo_accesso' => 'datetime',
        'attivo' => 'boolean',
        'password' => 'hashed',
        'dispositivi_autorizzati' => 'array',
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    /**
     * Relazione con volontario
     */
    public function volontario()
    {
        return $this->hasOne(Volontario::class);
    }
public function notifiche()
{
     return $this->hasMany(Notifica::class, 'user_id');
}

/**
 * Notifiche non lette dell'utente
 */
public function notificheNonLette()
{
     return $this->hasMany(Notifica::class, 'user_id')->whereNull('read_at');
}
    /**
     * Documenti attraverso volontario
     */
    public function documenti()
    {
        return $this->hasManyThrough(Documento::class, Volontario::class);
    }

    /**
     * Tickets creati dall'utente
     */
    public function tickets()
    {
        return $this->hasMany(Ticket::class);
    }

    /**
     * Tickets assegnati all'utente
     */
    public function ticketsAssegnati()
    {
        return $this->hasMany(Ticket::class, 'assegnato_a');
    }

    /**
     * Avvisi creati dall'utente
     */
    public function avvisi()
    {
        return $this->hasMany(Avviso::class);
    }

    /**
     * Eventi organizzati
     */
    public function eventiOrganizzati()
    {
        return $this->hasMany(Evento::class, 'organizzatore_id');
    }

    /**
     * Partecipazioni agli eventi
     */
    public function partecipazioniEventi()
    {
        return $this->hasMany(PartecipazioneEvento::class);
    }

    /**
     * Log attività dell'utente
     */
    public function logAttivita()
    {
        return $this->hasMany(LogAttivita::class);
    }

    /**
     * Checklist compilate
     */
    public function checklistCompilate()
    {
        return $this->hasMany(ChecklistCompilata::class);
    }

    /**
     * Movimenti magazzino effettuati
     */
    public function movimentiMagazzino()
    {
        return $this->hasMany(MovimentoMagazzino::class);
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    /**
     * Nome completo dell'utente
     */
    public function getNomeCompletoAttribute()
    {
        return trim($this->nome . ' ' . $this->cognome);
    }

    /**
     * Iniziali dell'utente per avatar
     */
    public function getInizialiAttribute()
    {
        return strtoupper(substr($this->nome, 0, 1) . substr($this->cognome, 0, 1));
    }

    /**
     * Età dell'utente
     */
    public function getEtaAttribute()
    {
        return $this->data_nascita ? $this->data_nascita->age : null;
    }

    /**
     * Avatar URL (file o iniziali)
     */
    public function getAvatarUrlAttribute()
    {
        if ($this->avatar && file_exists(storage_path('app/public/' . $this->avatar))) {
            return asset('storage/' . $this->avatar);
        }
        
        // Genera avatar con iniziali
        return "https://ui-avatars.com/api/?name=" . urlencode($this->nome_completo) . 
               "&background=007bff&color=fff&size=150&font-size=0.6";
    }

    /**
     * Colore badge per ruolo
     */
    public function getColoreRuoloAttribute()
    {
        $colori = [
            'admin' => 'danger',
            'direttivo' => 'warning', 
            'segreteria' => 'info',
            'mezzi' => 'success',
            'dipendente' => 'primary',
            'volontario' => 'secondary'
        ];
        
        return $colori[$this->ruolo] ?? 'secondary';
    }

    /**
     * Label leggibile del ruolo
     */
    public function getRuoloLabelAttribute()
    {
        $labels = [
            'admin' => 'Amministratore',
            'direttivo' => 'Direttivo',
            'segreteria' => 'Segreteria',
            'mezzi' => 'Responsabile Mezzi',
            'dipendente' => 'Dipendente',
            'volontario' => 'Volontario'
        ];
        
        return $labels[$this->ruolo] ?? 'Sconosciuto';
    }

    // ===================================
    // METODI ACL E PERMESSI
    // ===================================

    /**
     * Verifica se l'utente ha un permesso specifico
     */
    public function hasPermission($modulo, $azione)
    {
        // Admin ha sempre tutti i permessi
        if ($this->isAdmin()) {
            return true;
        }

        $permission = Permission::where('modulo', $modulo)
                                ->where('ruolo', $this->ruolo)
                                ->first();
        
        return $permission ? $permission->$azione : false;
    }

    /**
     * Verifica se è amministratore
     */
    public function isAdmin()
    {
        return $this->ruolo === 'admin';
    }

    /**
     * Verifica se può accedere alla sezione mezzi
     */
    public function canAccessMezzi()
    {
        return in_array($this->ruolo, ['admin', 'direttivo', 'segreteria', 'mezzi']);
    }

    /**
     * Verifica se può vedere statistiche magazzino
     */
    public function canViewStatisticheMagazzino()
    {
        return in_array($this->ruolo, ['admin', 'mezzi']);
    }

    /**
     * Verifica se può configurare ACL
     */
    public function canConfigureACL()
    {
        return $this->ruolo === 'admin';
    }

    /**
     * Verifica se può vedere i log
     */
    public function canViewLogs()
    {
        return in_array($this->ruolo, ['admin', 'direttivo']);
    }

    /**
     * Ottieni tutti i moduli accessibili dall'utente
     */
    public function getModuliAccessibili()
    {
        if ($this->isAdmin()) {
            return Permission::distinct('modulo')->pluck('modulo')->toArray();
        }

        return Permission::where('ruolo', $this->ruolo)
                        ->where('visualizza', true)
                        ->pluck('modulo')
                        ->toArray();
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    /**
     * Aggiorna ultimo accesso
     */
    public function updateUltimoAccesso()
    {
        $this->update(['ultimo_accesso' => now()]);
    }

    /**
     * Verifica se l'utente è attivo
     */
    public function isAttivo()
    {
        return $this->attivo;
    }

    /**
     * Verifica se è volontario
     */
    public function isVolontario()
    {
        return $this->ruolo === 'volontario' && $this->volontario;
    }

    /**
     * Ottieni notifiche non lette
     */
    public function getNotificheNonLette()
    {
        return Notifica::whereJsonContains('destinatari', $this->id)
                      ->whereJsonDoesntContain('letta_da', $this->id)
                      ->orderBy('created_at', 'desc')
                      ->get();
    }

    /**
     * Conta notifiche non lette
     */
    public function countNotificheNonLette()
    {
        return Notifica::whereJsonContains('destinatari', $this->id)
                      ->whereJsonDoesntContain('letta_da', $this->id)
                      ->count();
    }

    /**
     * Marca notifica come letta
     */
    public function marcaNotificaLetta($notificaId)
    {
        $notifica = Notifica::find($notificaId);
        if ($notifica) {
            $lettaDa = $notifica->letta_da ?? [];
            if (!in_array($this->id, $lettaDa)) {
                $lettaDa[] = $this->id;
                $notifica->update(['letta_da' => $lettaDa]);
            }
        }
    }

    /**
     * Ottieni scadenze personali vicine
     */
    public function getScadenzeVicine($giorni = 30)
    {
        $scadenze = collect();
        
        // Scadenze volontario se applicabile
        if ($this->volontario) {
            $scadenze = $scadenze->merge($this->volontario->scadenze_vicine);
        }
        
        // Scadenze documenti personali
        $documentiInScadenza = $this->documenti()
                                   ->whereNotNull('data_scadenza')
                                   ->whereDate('data_scadenza', '<=', now()->addDays($giorni))
                                   ->whereDate('data_scadenza', '>=', now())
                                   ->get();
                                   
        foreach ($documentiInScadenza as $doc) {
            $scadenze->push([
                'tipo' => 'Documento: ' . $doc->nome_documento,
                'data' => $doc->data_scadenza,
                'giorni' => now()->diffInDays($doc->data_scadenza),
                'url' => route('documenti.show', $doc->id)
            ]);
        }
        
        return $scadenze->sortBy('giorni');
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    /**
     * Scope per utenti attivi
     */
    public function scopeAttivi($query)
    {
        return $query->where('attivo', true);
    }

    /**
     * Scope per ruolo specifico
     */
    public function scopeConRuolo($query, $ruolo)
    {
        return $query->where('ruolo', $ruolo);
    }

    /**
     * Scope per ricerca
     */
    public function scopeRicerca($query, $termine)
    {
        return $query->where(function($q) use ($termine) {
            $q->where('nome', 'like', "%{$termine}%")
              ->orWhere('cognome', 'like', "%{$termine}%")
              ->orWhere('email', 'like', "%{$termine}%")
              ->orWhere('telefono', 'like', "%{$termine}%");
        });
    }
}
    // Relazioni notifiche corrette
    public function notifiche()
    {
        return $this->hasMany(Notifica::class);
    }

    public function notificheNonLette()
    {
        return $this->hasMany(Notifica::class)->whereNull('read_at');
    }

    public function countNotificheNonLette()
    {
        return $this->notificheNonLette()->count();
    }

    public function getNotificheNonLette()
    {
        return $this->notificheNonLette()->orderBy('created_at', 'desc')->get();
    }

    public function marcaNotificaLetta($notificaId)
    {
        $notifica = $this->notifiche()->find($notificaId);
        if ($notifica) {
            $notifica->marcaComeLetta();
        }
    }
}

--- Volontario.php ---
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Carbon\Carbon;

class Volontario extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'volontari';

    protected $fillable = [
        'user_id',
        'tessera_numero',
        'data_iscrizione',
        'data_visita_medica',
        'scadenza_visita_medica',
        'medico_competente',
        'stato_formazione',
        'ultimo_corso',
        'corsi_completati',
        'competenze',
        'disponibilita',
        'note_disponibilita',
        'allergie_patologie',
        'contatto_emergenza_nome',
        'contatto_emergenza_telefono',
        'gruppo_sanguigno',
        'ore_servizio_anno',
        'note',
        'attivo',
        'data_sospensione',
        'motivo_sospensione'
    ];

    protected $casts = [
        'data_iscrizione' => 'date',
        'data_visita_medica' => 'date',
        'scadenza_visita_medica' => 'date',
        'ultimo_corso' => 'date',
        'corsi_completati' => 'array',
        'competenze' => 'array',
        'ore_servizio_anno' => 'decimal:2',
        'attivo' => 'boolean',
        'data_sospensione' => 'datetime',
    ];

    // ===================================
    // RELAZIONI
    // ===================================

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function documenti()
    {
        return $this->hasMany(Documento::class);
    }

    public function assegnazioniDpi()
    {
        return $this->hasMany(AssegnazioneDpi::class);
    }

    public function dpiAssegnati()
    {
        return $this->hasMany(AssegnazioneDpi::class)->where('restituito', false);
    }

    public function partecipazioniEventi()
    {
        return $this->hasMany(PartecipazioneEvento::class, 'user_id', 'user_id');
    }

    // ===================================
    // ATTRIBUTI COMPUTATI
    // ===================================

    public function getAnniServizioAttribute()
    {
        return $this->data_iscrizione ? $this->data_iscrizione->diffInYears(now()) : 0;
    }

    public function getEtaAttribute()
    {
        return $this->user && $this->user->data_nascita ? $this->user->data_nascita->age : null;
    }

    public function getScadenzeVicineAttribute()
    {
        $scadenze = collect();
        
        if ($this->scadenza_visita_medica) {
            $giorni = now()->diffInDays($this->scadenza_visita_medica, false);
            if ($giorni <= 30 && $giorni >= 0) {
                $scadenze->push([
                    'tipo' => 'Visita Medica',
                    'data' => $this->scadenza_visita_medica,
                    'giorni' => $giorni,
                    'urgente' => $giorni <= 7
                ]);
            }
        }
        
        return $scadenze->sortBy('giorni');
    }

    // ===================================
    // METODI UTILITY
    // ===================================

    public static function generaNumeroTessera()
    {
        $anno = now()->year;
        $ultimoNumero = self::where('tessera_numero', 'like', $anno . '%')->max('tessera_numero');
        
        if ($ultimoNumero) {
            $numero = intval(substr($ultimoNumero, -4)) + 1;
        } else {
            $numero = 1;
        }
        
        return $anno . str_pad($numero, 4, '0', STR_PAD_LEFT);
    }

    public function sospendi($motivo = null)
    {
        $this->update([
            'attivo' => false,
            'data_sospensione' => now(),
            'motivo_sospensione' => $motivo
        ]);
    }

    public function riattiva()
    {
        $this->update([
            'attivo' => true,
            'data_sospensione' => null,
            'motivo_sospensione' => null
        ]);
    }

    // ===================================
    // SCOPE QUERIES
    // ===================================

    public function scopeAttivi($query)
    {
        return $query->where('attivo', true);
    }

    public function scopeRicerca($query, $termine)
    {
        return $query->whereHas('user', function($q) use ($termine) {
            $q->where('nome', 'like', "%{$termine}%")
              ->orWhere('cognome', 'like', "%{$termine}%")
              ->orWhere('email', 'like', "%{$termine}%");
        })->orWhere('tessera_numero', 'like', "%{$termine}%");
    }
}

=== MIDDLEWARE ===

--- Authenticate.php ---
<?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Http\Request;

class Authenticate extends Middleware
{
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     */
    protected function redirectTo(Request $request): ?string
    {
        return $request->expectsJson() ? null : route('login');
    }
}
--- CheckPermissions.php ---
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class CheckPermissions
{
    public function handle(Request $request, Closure $next, string $modulo, string $azione): Response
    {
        $user = auth()->user();

        if (!$user) {
            if ($request->expectsJson()) {
                return response()->json(['error' => 'Non autenticato'], 401);
            }
            return redirect()->route('login');
        }

        if (!$user->isAttivo()) {
            if ($request->expectsJson()) {
                return response()->json(['error' => 'Account disattivato'], 403);
            }
            abort(403, 'Account disattivato. Contatta l\'amministratore.');
        }

        if (!$user->hasPermission($modulo, $azione)) {
            if ($request->expectsJson()) {
                return response()->json(['error' => 'Permesso negato'], 403);
            }
            abort(403, 'Non hai i permessi per accedere a questa sezione.');
        }

        return $next($request);
    }
}

--- EncryptCookies.php ---
<?php

namespace App\Http\Middleware;

use Illuminate\Cookie\Middleware\EncryptCookies as Middleware;

class EncryptCookies extends Middleware
{
    /**
     * The names of the cookies that should not be encrypted.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}
--- RedirectIfAuthenticated.php ---
<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect('/dashboard');
            }
        }

        return $next($request);
    }
}
--- VerifyCsrfToken.php ---
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

=== PROVIDERS ===

--- AppServiceProvider.php ---
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Schema;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Fix per MySQL/MariaDB con charset utf8mb4
        Schema::defaultStringLength(191);
    }
}
--- AuthServiceProvider.php ---
<?php

namespace App\Providers;

use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Gate;
use App\Models\User;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The model to policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        //
    ];

    /**
     * Register any authentication / authorization services.
     */
    public function boot(): void
    {
        // Gates per il sistema ACL del gestionale
        Gate::define('admin', function (User $user) {
            return $user->ruolo === 'admin';
        });

        Gate::define('access-mezzi', function (User $user) {
            return $user->canAccessMezzi();
        });

        Gate::define('view-logs', function (User $user) {
            return $user->canViewLogs();
        });

        Gate::define('configure-acl', function (User $user) {
            return $user->canConfigureACL();
        });

        // Gate per permessi specifici per modulo
        Gate::define('permission', function (User $user, $modulo, $azione) {
            return $user->hasPermission($modulo, $azione);
        });
    }
}
--- EventServiceProvider.php ---
<?php

namespace App\Providers;

use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event to listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     */
    public function boot(): void
    {
        //
    }

    /**
     * Determine if events and listeners should be automatically discovered.
     */
    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}
--- RouteServiceProvider.php ---
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to your application's "home" route.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/dashboard';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }
}

=== VIEWS ===

--- resources/views/dashboard/index.blade.php ---
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>@yield('title', 'Dashboard') - Gestionale Protezione Civile</title>

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/lucide.min.css" rel="stylesheet">
    
    <!-- Styles -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Custom Styles -->
    <style>
        .sidebar-link {
            @apply flex items-center px-4 py-3 text-gray-300 hover:bg-blue-700 hover:text-white transition-all duration-200 rounded-lg mx-2;
        }
        .sidebar-link.active {
            @apply bg-blue-700 text-white;
        }
        .sidebar-link i {
            @apply w-5 h-5 mr-3;
        }
        .notification-badge {
            @apply absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center;
        }
        .quick-action-card {
            @apply bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow duration-200 cursor-pointer;
        }
        .stat-card {
            @apply bg-white rounded-xl shadow-sm border border-gray-200 p-6;
        }
    </style>

    @stack('styles')
</head>
<body class="bg-gray-50 font-sans antialiased">
    <div id="app" class="min-h-screen">
        <!-- Sidebar -->
        <aside class="fixed top-0 left-0 z-40 w-64 h-screen bg-blue-900 shadow-lg">
            <!-- Logo -->
            <div class="flex items-center justify-center h-16 bg-blue-800 border-b border-blue-700">
                <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 bg-white rounded-lg flex items-center justify-center">
                        <i data-lucide="shield" class="w-5 h-5 text-blue-900"></i>
                    </div>
                    <h1 class="text-xl font-bold text-white">Gestionale PC</h1>
                </div>
            </div>

            <!-- Navigation Menu -->
            <nav class="mt-8 space-y-2">
                <a href="{{ route('dashboard') }}" class="sidebar-link {{ request()->routeIs('dashboard') ? 'active' : '' }}">
                    <i data-lucide="home"></i>
                    <span>Dashboard</span>
                </a>

                <a href="{{ route('eventi.index') }}" class="sidebar-link {{ request()->routeIs('eventi.*') ? 'active' : '' }}">
                    <i data-lucide="calendar"></i>
                    <span>Eventi</span>
                </a>

                <a href="{{ route('volontari.index') }}" class="sidebar-link {{ request()->routeIs('volontari.*') ? 'active' : '' }}">
                    <i data-lucide="users"></i>
                    <span>Volontari</span>
                </a>

                @can('view', App\Models\Mezzo::class)
                <a href="{{ route('mezzi.index') }}" class="sidebar-link {{ request()->routeIs('mezzi.*') ? 'active' : '' }}">
                    <i data-lucide="truck"></i>
                    <span>Mezzi</span>
                </a>
                @endcan

                <a href="{{ route('tickets.index') }}" class="sidebar-link {{ request()->routeIs('tickets.*') ? 'active' : '' }}">
                    <i data-lucide="ticket"></i>
                    <span>Tickets</span>
                    @if(auth()->user()->tickets()->whereIn('stato', ['aperto', 'in_lavorazione'])->count() > 0)
                        <span class="notification-badge">
                            {{ auth()->user()->tickets()->whereIn('stato', ['aperto', 'in_lavorazione'])->count() }}
                        </span>
                    @endif
                </a>

                <a href="{{ route('magazzino.index') }}" class="sidebar-link {{ request()->routeIs('magazzino.*') ? 'active' : '' }}">
                    <i data-lucide="package"></i>
                    <span>Magazzino</span>
                </a>

                <a href="{{ route('dpi.index') }}" class="sidebar-link {{ request()->routeIs('dpi.*') ? 'active' : '' }}">
                    <i data-lucide="shield"></i>
                    <span>DPI</span>
                </a>

                <a href="{{ route('notifiche.index') }}" class="sidebar-link {{ request()->routeIs('notifiche.*') ? 'active' : '' }}">
                    <i data-lucide="bell"></i>
                    <span>Notifiche</span>
                    @if(auth()->user()->notifiche()->whereNull('read_at')->count() > 0)
                        <span class="notification-badge">
                            {{ auth()->user()->notifiche()->whereNull('read_at')->count() }}
                        </span>
                    @endif
                </a>

                @can('admin.access')
                <div class="border-t border-blue-700 mt-8 pt-4">
                    <a href="{{ route('configurazione.index') }}" class="sidebar-link {{ request()->routeIs('configurazione.*') ? 'active' : '' }}">
                        <i data-lucide="settings"></i>
                        <span>Configurazione</span>
                    </a>
                </div>
                @endcan
            </nav>

            <!-- User Info -->
            <div class="absolute bottom-0 left-0 right-0 p-4 border-t border-blue-700">
                <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 bg-blue-700 rounded-full flex items-center justify-center">
                        <i data-lucide="user" class="w-4 h-4 text-white"></i>
                    </div>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-white truncate">{{ auth()->user()->name }}</p>
                        <p class="text-xs text-blue-300 truncate">{{ ucfirst(auth()->user()->role) }}</p>
                    </div>
                </div>
            </div>
        </aside>

        <!-- Main Content -->
        <div class="ml-64">
            <!-- Top Navigation Bar -->
            <header class="bg-white shadow-sm border-b border-gray-200 h-16 flex items-center justify-between px-6">
                <!-- Page Title -->
                <div>
                    <h2 class="text-xl font-semibold text-gray-800">
                        @yield('page-title', 'Dashboard')
                    </h2>
                    @hasSection('breadcrumbs')
                        <nav class="text-sm text-gray-500 mt-1">
                            @yield('breadcrumbs')
                        </nav>
                    @endif
                </div>

                <!-- Right Side Actions -->
                <div class="flex items-center space-x-4">
                    <!-- Quick Search -->
                    <div class="relative">
                        <input type="text" id="quickSearch" placeholder="Cerca..." 
                               class="w-64 pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <i data-lucide="search" class="absolute left-3 top-2.5 w-4 h-4 text-gray-400"></i>
                        
                        <!-- Search Results -->
                        <div id="searchResults" class="hidden absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto">
                            <!-- Results populated by JS -->
                        </div>
                    </div>

                    <!-- Notifications Dropdown -->
                    <div class="relative" x-data="{ open: false }">
                        <button @click="open = !open" class="relative p-2 text-gray-400 hover:text-gray-600 transition-colors">
                            <i data-lucide="bell" class="w-5 h-5"></i>
                            @if(auth()->user()->notifiche()->whereNull('read_at')->count() > 0)
                                <span class="notification-badge">
                                    {{ auth()->user()->notifiche()->whereNull('read_at')->count() }}
                                </span>
                            @endif
                        </button>

                        <div x-show="open" @click.away="open = false" x-transition
                             class="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
                            <div class="p-4 border-b border-gray-200">
                                <div class="flex items-center justify-between">
                                    <h3 class="text-sm font-medium text-gray-900">Notifiche</h3>
                                    <a href="{{ route('notifiche.index') }}" class="text-xs text-blue-600 hover:text-blue-800">Vedi tutte</a>
                                </div>
                            </div>
                            
                            <div id="recentNotifications" class="max-h-64 overflow-y-auto">
                                <!-- Notifiche caricate via AJAX -->
                                <div class="p-4 text-center text-gray-500">
                                    <i data-lucide="loader" class="w-4 h-4 animate-spin mx-auto mb-2"></i>
                                    Caricamento...
                                </div>
                            </div>
                            
                            <div class="p-3 border-t border-gray-200">
                                <button onclick="markAllNotificationsRead()" 
                                        class="w-full text-xs text-blue-600 hover:text-blue-800 font-medium">
                                    Segna tutte come lette
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- User Menu -->
                    <div class="relative" x-data="{ open: false }">
                        <button @click="open = !open" class="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 transition-colors">
                            <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                                <span class="text-sm font-medium text-white">{{ substr(auth()->user()->name, 0, 1) }}</span>
                            </div>
                            <i data-lucide="chevron-down" class="w-4 h-4 text-gray-400"></i>
                        </button>

                        <div x-show="open" @click.away="open = false" x-transition
                             class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
                            <div class="p-3 border-b border-gray-200">
                                <p class="text-sm font-medium text-gray-900">{{ auth()->user()->name }}</p>
                                <p class="text-xs text-gray-500">{{ auth()->user()->email }}</p>
                            </div>
                            
                            <div class="py-1">
                                <a href="{{ route('profile.show') }}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    <i data-lucide="user" class="w-4 h-4 inline mr-2"></i>
                                    Profilo
                                </a>
                                <a href="{{ route('profile.security') }}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    <i data-lucide="lock" class="w-4 h-4 inline mr-2"></i>
                                    Sicurezza
                                </a>
                            </div>
                            
                            <div class="border-t border-gray-200">
                                <form method="POST" action="{{ route('logout') }}">
                                    @csrf
                                    <button type="submit" class="block w-full text-left px-4 py-2 text-sm text-red-700 hover:bg-red-50">
                                        <i data-lucide="log-out" class="w-4 h-4 inline mr-2"></i>
                                        Logout
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </header>

            <!-- Page Content -->
            <main class="p-6">
                <!-- Flash Messages -->
                @if(session('success'))
                    <div class="mb-6 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">
                        <div class="flex items-center">
                            <i data-lucide="check-circle" class="w-5 h-5 mr-2"></i>
                            {{ session('success') }}
                        </div>
                    </div>
                @endif

                @if(session('error'))
                    <div class="mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
                        <div class="flex items-center">
                            <i data-lucide="alert-circle" class="w-5 h-5 mr-2"></i>
                            {{ session('error') }}
                        </div>
                    </div>
                @endif

                @if(session('warning'))
                    <div class="mb-6 bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded-lg">
                        <div class="flex items-center">
                            <i data-lucide="alert-triangle" class="w-5 h-5 mr-2"></i>
                            {{ session('warning') }}
                        </div>
                    </div>
                @endif

                @if($errors->any())
                    <div class="mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
                        <div class="flex items-start">
                            <i data-lucide="alert-circle" class="w-5 h-5 mr-2 mt-0.5"></i>
                            <div>
                                <p class="font-medium">Ci sono degli errori nel modulo:</p>
                                <ul class="mt-2 list-disc list-inside text-sm">
                                    @foreach($errors->all() as $error)
                                        <li>{{ $error }}</li>
                                    @endforeach
                                </ul>
                            </div>
                        </div>
                    </div>
                @endif

                <!-- Main Content -->
                @yield('content')
            </main>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/lucide.min.js"></script>
    
    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        // Quick Search functionality
        let searchTimeout;
        document.getElementById('quickSearch').addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            const query = e.target.value.trim();
            
            if (query.length >= 3) {
                searchTimeout = setTimeout(() => {
                    performSearch(query);
                }, 300);
            } else {
                hideSearchResults();
            }
        });

        function performSearch(query) {
            fetch(`/api/search?q=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    showSearchResults(data);
                })
                .catch(error => {
                    console.error('Search error:', error);
                });
        }

        function showSearchResults(results) {
            const container = document.getElementById('searchResults');
            
            if (results.length === 0) {
                container.innerHTML = '<div class="p-4 text-gray-500 text-center">Nessun risultato trovato</div>';
            } else {
                container.innerHTML = results.map(result => `
                    <a href="${result.url}" class="block p-3 hover:bg-gray-50 border-b border-gray-100 last:border-b-0">
                        <div class="flex items-center space-x-3">
                            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                                <i data-lucide="${getIconForType(result.type)}" class="w-4 h-4 text-blue-600"></i>
                            </div>
                            <div class="flex-1 min-w-0">
                                <p class="text-sm font-medium text-gray-900 truncate">${result.text}</p>
                                <p class="text-xs text-gray-500">${getTypeLabel(result.type)}</p>
                            </div>
                        </div>
                    </a>
                `).join('');
                
                // Re-initialize icons for new content
                lucide.createIcons();
            }
            
            container.classList.remove('hidden');
        }

        function hideSearchResults() {
            document.getElementById('searchResults').classList.add('hidden');
        }

        function getIconForType(type) {
            const icons = {
                'volontario': 'user',
                'evento': 'calendar',
                'mezzo': 'truck',
                'ticket': 'ticket'
            };
            return icons[type] || 'search';
        }

        function getTypeLabel(type) {
            const labels = {
                'volontario': 'Volontario',
                'evento': 'Evento',
                'mezzo': 'Mezzo',
                'ticket': 'Ticket'
            };
            return labels[type] || type;
        }

        // Load recent notifications
        function loadRecentNotifications() {
            fetch('/notifiche/api/recent')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('recentNotifications');
                    
                    if (data.length === 0) {
                        container.innerHTML = '<div class="p-4 text-center text-gray-500">Nessuna notifica recente</div>';
                    } else {
                        container.innerHTML = data.map(notifica => `
                            <a href="${notifica.url}" class="block p-4 hover:bg-gray-50 border-b border-gray-100 last:border-b-0 ${!notifica.read_at ? 'bg-blue-50' : ''}">
                                <div class="flex items-start space-x-3">
                                    <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                                        <i data-lucide="${notifica.icon}" class="w-4 h-4 text-blue-600"></i>
                                    </div>
                                    <div class="flex-1 min-w-0">
                                        <p class="text-sm font-medium text-gray-900 truncate">${notifica.titolo}</p>
                                        <p class="text-xs text-gray-500 mt-1">${notifica.messaggio}</p>
                                        <p class="text-xs text-gray-400 mt-1">${notifica.created_at}</p>
                                    </div>
                                    ${!notifica.read_at ? '<div class="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0"></div>' : ''}
                                </div>
                            </a>
                        `).join('');
                        
                        // Re-initialize icons
                        lucide.createIcons();
                    }
                })
                .catch(error => {
                    console.error('Error loading notifications:', error);
                    document.getElementById('recentNotifications').innerHTML = 
                        '<div class="p-4 text-center text-red-500">Errore nel caricamento</div>';
                });
        }

        // Mark all notifications as read
        function markAllNotificationsRead() {
            fetch('/notifiche/mark-all-read', {
                method: 'PATCH',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Refresh notifications
                    loadRecentNotifications();
                    // Update badge count
                    location.reload();
                }
            })
            .catch(error => {
                console.error('Error marking notifications as read:', error);
            });
        }

        // Load notifications on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadRecentNotifications();
        });

        // Click outside to close search results
        document.addEventListener('click', function(e) {
            if (!e.target.closest('#quickSearch') && !e.target.closest('#searchResults')) {
                hideSearchResults();
            }
        });
    </script>

    @stack('scripts')
</body>
</html>
--- resources/views/auth/login.blade.php ---
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>Login - {{ config('app.name') }}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
        }
        .login-card {
            border: none;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        .login-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        .login-body {
            padding: 2rem;
            background: white;
        }
        .form-control {
            border-radius: 10px;
            border: 2px solid #e9ecef;
            padding: 0.75rem 1rem;
        }
        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        .btn-login {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 10px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            letter-spacing: 0.5px;
        }
        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        .logo-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        .forgot-link {
            color: #667eea;
            text-decoration: none;
        }
        .forgot-link:hover {
            color: #764ba2;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card login-card">
                    <!-- Header -->
                    <div class="login-header">
                        <div class="logo-icon">
                            <i class="bi bi-heart-pulse"></i>
                        </div>
                        <h3 class="mb-0">Gestionale Croce Verde</h3>
                        <p class="mb-0 opacity-75">Accedi al tuo account</p>
                    </div>
                    
                    <!-- Body -->
                    <div class="login-body">
                        <!-- Messaggi di successo -->
                        @if (session('success'))
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="bi bi-check-circle-fill me-2"></i>
                                {{ session('success') }}
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        @endif

                        <!-- Errori di validazione -->
                        @if ($errors->any())
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                <strong>Errore:</strong>
                                <ul class="mb-0 mt-2">
                                    @foreach ($errors->all() as $error)
                                        <li>{{ $error }}</li>
                                    @endforeach
                                </ul>
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        @endif

                        <!-- Form di login -->
                        <form method="POST" action="{{ route('login') }}">
                            @csrf
                            
                            <!-- Email -->
                            <div class="mb-3">
                                <label for="email" class="form-label">
                                    <i class="bi bi-envelope me-2"></i>Email
                                </label>
                                <input type="email" 
                                       class="form-control @error('email') is-invalid @enderror" 
                                       id="email" 
                                       name="email" 
                                       value="{{ old('email') }}" 
                                       required 
                                       autocomplete="username"
                                       placeholder="inserisci la tua email">
                                @error('email')
                                    <div class="invalid-feedback">{{ $message }}</div>
                                @enderror
                            </div>

                            <!-- Password -->
                            <div class="mb-3">
                                <label for="password" class="form-label">
                                    <i class="bi bi-lock me-2"></i>Password
                                </label>
                                <div class="input-group">
                                    <input type="password" 
                                           class="form-control @error('password') is-invalid @enderror" 
                                           id="password" 
                                           name="password" 
                                           required 
                                           autocomplete="current-password"
                                           placeholder="inserisci la tua password">
                                    <button class="btn btn-outline-secondary" 
                                            type="button" 
                                            onclick="togglePassword()">
                                        <i class="bi bi-eye" id="toggleIcon"></i>
                                    </button>
                                </div>
                                @error('password')
                                    <div class="invalid-feedback">{{ $message }}</div>
                                @enderror
                            </div>

                            <!-- Remember me -->
                            <div class="mb-3 form-check">
                                <input type="checkbox" 
                                       class="form-check-input" 
                                       id="remember" 
                                       name="remember">
                                <label class="form-check-label" for="remember">
                                    Ricordami
                                </label>
                            </div>

                            <!-- Submit button -->
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary btn-login">
                                    <i class="bi bi-box-arrow-in-right me-2"></i>
                                    Accedi
                                </button>
                            </div>

                            <!-- Links -->
                            <div class="text-center mt-3">
                                <a href="{{ route('password.request') }}" class="forgot-link">
                                    <i class="bi bi-question-circle me-1"></i>
                                    Hai dimenticato la password?
                                </a>
                            </div>

                            <hr class="my-4">

                            <div class="text-center">
                                <p class="mb-2">Non hai ancora un account?</p>
                                <a href="{{ route('register') }}" class="btn btn-outline-primary">
                                    <i class="bi bi-person-plus me-2"></i>
                                    Registrati
                                </a>
                            </div>
                        </form>
                    </div>
                </div>
                
                <!-- Footer -->
                <div class="text-center mt-4">
                    <p class="text-white-50">
                        <i class="bi bi-shield-check me-1"></i>
                        Sistema sicuro e protetto
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Mostra/nascondi password
        function togglePassword() {
            const passwordField = document.getElementById('password');
            const toggleIcon = document.getElementById('toggleIcon');
            
            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                toggleIcon.classList.remove('bi-eye');
                toggleIcon.classList.add('bi-eye-slash');
            } else {
                passwordField.type = 'password';
                toggleIcon.classList.remove('bi-eye-slash');
                toggleIcon.classList.add('bi-eye');
            }
        }

        // Auto-hide alerts
        setTimeout(function() {
            let alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                let bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    </script>
</body>
</html>
--- resources/views/layouts/app.blade.php ---
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Gestionale CV') }} - @yield('title', 'Dashboard')</title>

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Custom CSS -->
    <style>
        .sidebar {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .sidebar .nav-link {
            color: rgba(255,255,255,0.8);
            padding: 0.75rem 1rem;
            margin: 0.25rem 0;
            border-radius: 0.5rem;
            transition: all 0.3s;
        }
        .sidebar .nav-link:hover,
        .sidebar .nav-link.active {
            color: white;
            background: rgba(255,255,255,0.1);
            transform: translateX(5px);
        }
        .main-content {
            background-color: #f8f9fa;
            min-height: 100vh;
        }
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        .navbar-brand {
            font-weight: 600;
        }
        .badge-notification {
            background: #dc3545;
            color: white;
            border-radius: 50%;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
    </style>

    @stack('styles')
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block sidebar collapse">
                <div class="position-sticky pt-3">
                    <!-- Logo -->
                    <div class="text-center mb-4">
                        <h4 class="text-white fw-bold">
                            <i class="bi bi-heart-pulse"></i>
                            Gestionale CV
                        </h4>
                        <small class="text-white-50">{{ auth()->user()->ruolo_label ?? 'Utente' }}</small>
                    </div>

                    <!-- Menu Navigation -->
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link {{ request()->routeIs('dashboard') ? 'active' : '' }}" 
                               href="{{ route('dashboard') }}">
                                <i class="bi bi-speedometer2"></i>
                                Dashboard
                            </a>
                        </li>

                        @can('permission', ['volontari', 'visualizza'])
                        <li class="nav-item">
                            <a class="nav-link {{ request()->routeIs('volontari.*') ? 'active' : '' }}" 
                               href="{{ route('volontari.index') }}">
                                <i class="bi bi-people"></i>
                                Volontari
                            </a>
                        </li>
                        @endcan

                        @can('access-mezzi')
                        <li class="nav-item">
                            <a class="nav-link {{ request()->routeIs('mezzi.*') ? 'active' : '' }}" 
                               href="{{ route('mezzi.index') }}">
                                <i class="bi bi-truck"></i>
                                Mezzi
                            </a>
                        </li>
                        @endcan

                        @can('permission', ['dpi', 'visualizza'])
                        <li class="nav-item">
                            <a class="nav-link {{ request()->routeIs('dpi.*') ? 'active' : '' }}" 
                               href="{{ route('dpi.index') }}">
                                <i class="bi bi-shield-check"></i>
                                DPI
                            </a>
                        </li>
                        @endcan

                        @can('permission', ['magazzino', 'visualizza'])
                        <li class="nav-item">
                            <a class="nav-link {{ request()->routeIs('magazzino.*') ? 'active' : '' }}" 
                               href="{{ route('magazzino.index') }}">
                                <i class="bi bi-boxes"></i>
                                Magazzino
                            </a>
                        </li>
                        @endcan

                        @can('permission', ['eventi', 'visualizza'])
                        <li class="nav-item">
                            <a class="nav-link {{ request()->routeIs('eventi.*') ? 'active' : '' }}" 
                               href="{{ route('eventi.index') }}">
                                <i class="bi bi-calendar-event"></i>
                                Eventi
                            </a>
                        </li>
                        @endcan

                        @can('permission', ['tickets', 'visualizza'])
                        <li class="nav-item">
                            <a class="nav-link {{ request()->routeIs('tickets.*') ? 'active' : '' }}" 
                               href="{{ route('tickets.index') }}">
                                <i class="bi bi-ticket-perforated"></i>
                                Tickets
                                @if(auth()->user()->countNotificheNonLette() > 0)
                                <span class="badge-notification ms-2">
                                    {{ auth()->user()->countNotificheNonLette() }}
                                </span>
                                @endif
                            </a>
                        </li>
                        @endcan

                        @can('permission', ['notifiche', 'visualizza'])
                        <li class="nav-item">
                            <a class="nav-link {{ request()->routeIs('notifiche.*') ? 'active' : '' }}" 
                               href="{{ route('notifiche.index') }}">
                                <i class="bi bi-bell"></i>
                                Notifiche
                            </a>
                        </li>
                        @endcan

                        @can('configure-acl')
                        <li class="nav-item mt-3">
                            <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-white-50">
                                <span>Amministrazione</span>
                            </h6>
                            <a class="nav-link {{ request()->routeIs('permissions.*') ? 'active' : '' }}" 
                               href="{{ route('permissions.index') }}">
                                <i class="bi bi-gear"></i>
                                Permessi ACL
                            </a>
                        </li>
                        @endcan
                    </ul>

                    <!-- User Profile -->
                    <div class="mt-auto pt-3 border-top border-white-50">
                        <div class="d-flex align-items-center text-white">
                            <img src="{{ auth()->user()->avatar_url }}" 
                                 alt="Avatar" 
                                 class="rounded-circle me-2" 
                                 width="32" height="32">
                            <div class="flex-grow-1">
                                <div class="fw-semibold">{{ auth()->user()->nome_completo }}</div>
                                <small class="text-white-50">{{ auth()->user()->email }}</small>
                            </div>
                        </div>
                        
                        <div class="mt-2">
                            <a href="{{ route('profile.edit') }}" class="btn btn-outline-light btn-sm me-1">
                                <i class="bi bi-person"></i>
                            </a>
                            <form method="POST" action="{{ route('logout') }}" class="d-inline">
                                @csrf
                                <button type="submit" class="btn btn-outline-light btn-sm">
                                    <i class="bi bi-box-arrow-right"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <!-- Top Navigation -->
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">@yield('page-title', 'Dashboard')</h1>
                    
                    <div class="btn-toolbar mb-2 mb-md-0">
                        @yield('page-actions')
                    </div>
                </div>

                <!-- Alerts -->
                @if (session('success'))
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="bi bi-check-circle-fill"></i>
                        {{ session('success') }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                @endif

                @if (session('error'))
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle-fill"></i>
                        {{ session('error') }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                @endif

                @if ($errors->any())
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle-fill"></i>
                        <strong>Errori di validazione:</strong>
                        <ul class="mb-0 mt-2">
                            @foreach ($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                @endif

                <!-- Page Content -->
                <div class="content">
                    @yield('content')
                </div>
            </main>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Custom JS -->
    <script>
        // Auto-hide alerts after 5 seconds
        setTimeout(function() {
            let alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                let bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);

        // Update ultimo accesso
        if (navigator.sendBeacon) {
            navigator.sendBeacon('{{ route("user.update-accesso") }}', new FormData());
        }
    </script>

    @stack('scripts')
</body>
</html>
--- resources/views/welcome.blade.php ---
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Laravel</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=instrument-sans:400,500,600" rel="stylesheet" />

        <!-- Styles / Scripts -->
        @if (file_exists(public_path('build/manifest.json')) || file_exists(public_path('hot')))
        @else
            <style>
                /*! tailwindcss v4.0.7 | MIT License | https://tailwindcss.com */@layer theme{:root,:host{--font-sans:'Instrument Sans',ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--font-serif:ui-serif,Georgia,Cambria,"Times New Roman",Times,serif;--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--color-red-50:oklch(.971 .013 17.38);--color-red-100:oklch(.936 .032 17.717);--color-red-200:oklch(.885 .062 18.334);--color-red-300:oklch(.808 .114 19.571);--color-red-400:oklch(.704 .191 22.216);--color-red-500:oklch(.637 .237 25.331);--color-red-600:oklch(.577 .245 27.325);--color-red-700:oklch(.505 .213 27.518);--color-red-800:oklch(.444 .177 26.899);--color-red-900:oklch(.396 .141 25.723);--color-red-950:oklch(.258 .092 26.042);--color-orange-50:oklch(.98 .016 73.684);--color-orange-100:oklch(.954 .038 75.164);--color-orange-200:oklch(.901 .076 70.697);--color-orange-300:oklch(.837 .128 66.29);--color-orange-400:oklch(.75 .183 55.934);--color-orange-500:oklch(.705 .213 47.604);--color-orange-600:oklch(.646 .222 41.116);--color-orange-700:oklch(.553 .195 38.402);--color-orange-800:oklch(.47 .157 37.304);--color-orange-900:oklch(.408 .123 38.172);--color-orange-950:oklch(.266 .079 36.259);--color-amber-50:oklch(.987 .022 95.277);--color-amber-100:oklch(.962 .059 95.617);--color-amber-200:oklch(.924 .12 95.746);--color-amber-300:oklch(.879 .169 91.605);--color-amber-400:oklch(.828 .189 84.429);--color-amber-500:oklch(.769 .188 70.08);--color-amber-600:oklch(.666 .179 58.318);--color-amber-700:oklch(.555 .163 48.998);--color-amber-800:oklch(.473 .137 46.201);--color-amber-900:oklch(.414 .112 45.904);--color-amber-950:oklch(.279 .077 45.635);--color-yellow-50:oklch(.987 .026 102.212);--color-yellow-100:oklch(.973 .071 103.193);--color-yellow-200:oklch(.945 .129 101.54);--color-yellow-300:oklch(.905 .182 98.111);--color-yellow-400:oklch(.852 .199 91.936);--color-yellow-500:oklch(.795 .184 86.047);--color-yellow-600:oklch(.681 .162 75.834);--color-yellow-700:oklch(.554 .135 66.442);--color-yellow-800:oklch(.476 .114 61.907);--color-yellow-900:oklch(.421 .095 57.708);--color-yellow-950:oklch(.286 .066 53.813);--color-lime-50:oklch(.986 .031 120.757);--color-lime-100:oklch(.967 .067 122.328);--color-lime-200:oklch(.938 .127 124.321);--color-lime-300:oklch(.897 .196 126.665);--color-lime-400:oklch(.841 .238 128.85);--color-lime-500:oklch(.768 .233 130.85);--color-lime-600:oklch(.648 .2 131.684);--color-lime-700:oklch(.532 .157 131.589);--color-lime-800:oklch(.453 .124 130.933);--color-lime-900:oklch(.405 .101 131.063);--color-lime-950:oklch(.274 .072 132.109);--color-green-50:oklch(.982 .018 155.826);--color-green-100:oklch(.962 .044 156.743);--color-green-200:oklch(.925 .084 155.995);--color-green-300:oklch(.871 .15 154.449);--color-green-400:oklch(.792 .209 151.711);--color-green-500:oklch(.723 .219 149.579);--color-green-600:oklch(.627 .194 149.214);--color-green-700:oklch(.527 .154 150.069);--color-green-800:oklch(.448 .119 151.328);--color-green-900:oklch(.393 .095 152.535);--color-green-950:oklch(.266 .065 152.934);--color-emerald-50:oklch(.979 .021 166.113);--color-emerald-100:oklch(.95 .052 163.051);--color-emerald-200:oklch(.905 .093 164.15);--color-emerald-300:oklch(.845 .143 164.978);--color-emerald-400:oklch(.765 .177 163.223);--color-emerald-500:oklch(.696 .17 162.48);--color-emerald-600:oklch(.596 .145 163.225);--color-emerald-700:oklch(.508 .118 165.612);--color-emerald-800:oklch(.432 .095 166.913);--color-emerald-900:oklch(.378 .077 168.94);--color-emerald-950:oklch(.262 .051 172.552);--color-teal-50:oklch(.984 .014 180.72);--color-teal-100:oklch(.953 .051 180.801);--color-teal-200:oklch(.91 .096 180.426);--color-teal-300:oklch(.855 .138 181.071);--color-teal-400:oklch(.777 .152 181.912);--color-teal-500:oklch(.704 .14 182.503);--color-teal-600:oklch(.6 .118 184.704);--color-teal-700:oklch(.511 .096 186.391);--color-teal-800:oklch(.437 .078 188.216);--color-teal-900:oklch(.386 .063 188.416);--color-teal-950:oklch(.277 .046 192.524);--color-cyan-50:oklch(.984 .019 200.873);--color-cyan-100:oklch(.956 .045 203.388);--color-cyan-200:oklch(.917 .08 205.041);--color-cyan-300:oklch(.865 .127 207.078);--color-cyan-400:oklch(.789 .154 211.53);--color-cyan-500:oklch(.715 .143 215.221);--color-cyan-600:oklch(.609 .126 221.723);--color-cyan-700:oklch(.52 .105 223.128);--color-cyan-800:oklch(.45 .085 224.283);--color-cyan-900:oklch(.398 .07 227.392);--color-cyan-950:oklch(.302 .056 229.695);--color-sky-50:oklch(.977 .013 236.62);--color-sky-100:oklch(.951 .026 236.824);--color-sky-200:oklch(.901 .058 230.902);--color-sky-300:oklch(.828 .111 230.318);--color-sky-400:oklch(.746 .16 232.661);--color-sky-500:oklch(.685 .169 237.323);--color-sky-600:oklch(.588 .158 241.966);--color-sky-700:oklch(.5 .134 242.749);--color-sky-800:oklch(.443 .11 240.79);--color-sky-900:oklch(.391 .09 240.876);--color-sky-950:oklch(.293 .066 243.157);--color-blue-50:oklch(.97 .014 254.604);--color-blue-100:oklch(.932 .032 255.585);--color-blue-200:oklch(.882 .059 254.128);--color-blue-300:oklch(.809 .105 251.813);--color-blue-400:oklch(.707 .165 254.624);--color-blue-500:oklch(.623 .214 259.815);--color-blue-600:oklch(.546 .245 262.881);--color-blue-700:oklch(.488 .243 264.376);--color-blue-800:oklch(.424 .199 265.638);--color-blue-900:oklch(.379 .146 265.522);--color-blue-950:oklch(.282 .091 267.935);--color-indigo-50:oklch(.962 .018 272.314);--color-indigo-100:oklch(.93 .034 272.788);--color-indigo-200:oklch(.87 .065 274.039);--color-indigo-300:oklch(.785 .115 274.713);--color-indigo-400:oklch(.673 .182 276.935);--color-indigo-500:oklch(.585 .233 277.117);--color-indigo-600:oklch(.511 .262 276.966);--color-indigo-700:oklch(.457 .24 277.023);--color-indigo-800:oklch(.398 .195 277.366);--color-indigo-900:oklch(.359 .144 278.697);--color-indigo-950:oklch(.257 .09 281.288);--color-violet-50:oklch(.969 .016 293.756);--color-violet-100:oklch(.943 .029 294.588);--color-violet-200:oklch(.894 .057 293.283);--color-violet-300:oklch(.811 .111 293.571);--color-violet-400:oklch(.702 .183 293.541);--color-violet-500:oklch(.606 .25 292.717);--color-violet-600:oklch(.541 .281 293.009);--color-violet-700:oklch(.491 .27 292.581);--color-violet-800:oklch(.432 .232 292.759);--color-violet-900:oklch(.38 .189 293.745);--color-violet-950:oklch(.283 .141 291.089);--color-purple-50:oklch(.977 .014 308.299);--color-purple-100:oklch(.946 .033 307.174);--color-purple-200:oklch(.902 .063 306.703);--color-purple-300:oklch(.827 .119 306.383);--color-purple-400:oklch(.714 .203 305.504);--color-purple-500:oklch(.627 .265 303.9);--color-purple-600:oklch(.558 .288 302.321);--color-purple-700:oklch(.496 .265 301.924);--color-purple-800:oklch(.438 .218 303.724);--color-purple-900:oklch(.381 .176 304.987);--color-purple-950:oklch(.291 .149 302.717);--color-fuchsia-50:oklch(.977 .017 320.058);--color-fuchsia-100:oklch(.952 .037 318.852);--color-fuchsia-200:oklch(.903 .076 319.62);--color-fuchsia-300:oklch(.833 .145 321.434);--color-fuchsia-400:oklch(.74 .238 322.16);--color-fuchsia-500:oklch(.667 .295 322.15);--color-fuchsia-600:oklch(.591 .293 322.896);--color-fuchsia-700:oklch(.518 .253 323.949);--color-fuchsia-800:oklch(.452 .211 324.591);--color-fuchsia-900:oklch(.401 .17 325.612);--color-fuchsia-950:oklch(.293 .136 325.661);--color-pink-50:oklch(.971 .014 343.198);--color-pink-100:oklch(.948 .028 342.258);--color-pink-200:oklch(.899 .061 343.231);--color-pink-300:oklch(.823 .12 346.018);--color-pink-400:oklch(.718 .202 349.761);--color-pink-500:oklch(.656 .241 354.308);--color-pink-600:oklch(.592 .249 .584);--color-pink-700:oklch(.525 .223 3.958);--color-pink-800:oklch(.459 .187 3.815);--color-pink-900:oklch(.408 .153 2.432);--color-pink-950:oklch(.284 .109 3.907);--color-rose-50:oklch(.969 .015 12.422);--color-rose-100:oklch(.941 .03 12.58);--color-rose-200:oklch(.892 .058 10.001);--color-rose-300:oklch(.81 .117 11.638);--color-rose-400:oklch(.712 .194 13.428);--color-rose-500:oklch(.645 .246 16.439);--color-rose-600:oklch(.586 .253 17.585);--color-rose-700:oklch(.514 .222 16.935);--color-rose-800:oklch(.455 .188 13.697);--color-rose-900:oklch(.41 .159 10.272);--color-rose-950:oklch(.271 .105 12.094);--color-slate-50:oklch(.984 .003 247.858);--color-slate-100:oklch(.968 .007 247.896);--color-slate-200:oklch(.929 .013 255.508);--color-slate-300:oklch(.869 .022 252.894);--color-slate-400:oklch(.704 .04 256.788);--color-slate-500:oklch(.554 .046 257.417);--color-slate-600:oklch(.446 .043 257.281);--color-slate-700:oklch(.372 .044 257.287);--color-slate-800:oklch(.279 .041 260.031);--color-slate-900:oklch(.208 .042 265.755);--color-slate-950:oklch(.129 .042 264.695);--color-gray-50:oklch(.985 .002 247.839);--color-gray-100:oklch(.967 .003 264.542);--color-gray-200:oklch(.928 .006 264.531);--color-gray-300:oklch(.872 .01 258.338);--color-gray-400:oklch(.707 .022 261.325);--color-gray-500:oklch(.551 .027 264.364);--color-gray-600:oklch(.446 .03 256.802);--color-gray-700:oklch(.373 .034 259.733);--color-gray-800:oklch(.278 .033 256.848);--color-gray-900:oklch(.21 .034 264.665);--color-gray-950:oklch(.13 .028 261.692);--color-zinc-50:oklch(.985 0 0);--color-zinc-100:oklch(.967 .001 286.375);--color-zinc-200:oklch(.92 .004 286.32);--color-zinc-300:oklch(.871 .006 286.286);--color-zinc-400:oklch(.705 .015 286.067);--color-zinc-500:oklch(.552 .016 285.938);--color-zinc-600:oklch(.442 .017 285.786);--color-zinc-700:oklch(.37 .013 285.805);--color-zinc-800:oklch(.274 .006 286.033);--color-zinc-900:oklch(.21 .006 285.885);--color-zinc-950:oklch(.141 .005 285.823);--color-neutral-50:oklch(.985 0 0);--color-neutral-100:oklch(.97 0 0);--color-neutral-200:oklch(.922 0 0);--color-neutral-300:oklch(.87 0 0);--color-neutral-400:oklch(.708 0 0);--color-neutral-500:oklch(.556 0 0);--color-neutral-600:oklch(.439 0 0);--color-neutral-700:oklch(.371 0 0);--color-neutral-800:oklch(.269 0 0);--color-neutral-900:oklch(.205 0 0);--color-neutral-950:oklch(.145 0 0);--color-stone-50:oklch(.985 .001 106.423);--color-stone-100:oklch(.97 .001 106.424);--color-stone-200:oklch(.923 .003 48.717);--color-stone-300:oklch(.869 .005 56.366);--color-stone-400:oklch(.709 .01 56.259);--color-stone-500:oklch(.553 .013 58.071);--color-stone-600:oklch(.444 .011 73.639);--color-stone-700:oklch(.374 .01 67.558);--color-stone-800:oklch(.268 .007 34.298);--color-stone-900:oklch(.216 .006 56.043);--color-stone-950:oklch(.147 .004 49.25);--color-black:#000;--color-white:#fff;--spacing:.25rem;--breakpoint-sm:40rem;--breakpoint-md:48rem;--breakpoint-lg:64rem;--breakpoint-xl:80rem;--breakpoint-2xl:96rem;--container-3xs:16rem;--container-2xs:18rem;--container-xs:20rem;--container-sm:24rem;--container-md:28rem;--container-lg:32rem;--container-xl:36rem;--container-2xl:42rem;--container-3xl:48rem;--container-4xl:56rem;--container-5xl:64rem;--container-6xl:72rem;--container-7xl:80rem;--text-xs:.75rem;--text-xs--line-height:calc(1/.75);--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--text-base:1rem;--text-base--line-height: 1.5 ;--text-lg:1.125rem;--text-lg--line-height:calc(1.75/1.125);--text-xl:1.25rem;--text-xl--line-height:calc(1.75/1.25);--text-2xl:1.5rem;--text-2xl--line-height:calc(2/1.5);--text-3xl:1.875rem;--text-3xl--line-height: 1.2 ;--text-4xl:2.25rem;--text-4xl--line-height:calc(2.5/2.25);--text-5xl:3rem;--text-5xl--line-height:1;--text-6xl:3.75rem;--text-6xl--line-height:1;--text-7xl:4.5rem;--text-7xl--line-height:1;--text-8xl:6rem;--text-8xl--line-height:1;--text-9xl:8rem;--text-9xl--line-height:1;--font-weight-thin:100;--font-weight-extralight:200;--font-weight-light:300;--font-weight-normal:400;--font-weight-medium:500;--font-weight-semibold:600;--font-weight-bold:700;--font-weight-extrabold:800;--font-weight-black:900;--tracking-tighter:-.05em;--tracking-tight:-.025em;--tracking-normal:0em;--tracking-wide:.025em;--tracking-wider:.05em;--tracking-widest:.1em;--leading-tight:1.25;--leading-snug:1.375;--leading-normal:1.5;--leading-relaxed:1.625;--leading-loose:2;--radius-xs:.125rem;--radius-sm:.25rem;--radius-md:.375rem;--radius-lg:.5rem;--radius-xl:.75rem;--radius-2xl:1rem;--radius-3xl:1.5rem;--radius-4xl:2rem;--shadow-2xs:0 1px #0000000d;--shadow-xs:0 1px 2px 0 #0000000d;--shadow-sm:0 1px 3px 0 #0000001a,0 1px 2px -1px #0000001a;--shadow-md:0 4px 6px -1px #0000001a,0 2px 4px -2px #0000001a;--shadow-lg:0 10px 15px -3px #0000001a,0 4px 6px -4px #0000001a;--shadow-xl:0 20px 25px -5px #0000001a,0 8px 10px -6px #0000001a;--shadow-2xl:0 25px 50px -12px #00000040;--inset-shadow-2xs:inset 0 1px #0000000d;--inset-shadow-xs:inset 0 1px 1px #0000000d;--inset-shadow-sm:inset 0 2px 4px #0000000d;--drop-shadow-xs:0 1px 1px #0000000d;--drop-shadow-sm:0 1px 2px #00000026;--drop-shadow-md:0 3px 3px #0000001f;--drop-shadow-lg:0 4px 4px #00000026;--drop-shadow-xl:0 9px 7px #0000001a;--drop-shadow-2xl:0 25px 25px #00000026;--ease-in:cubic-bezier(.4,0,1,1);--ease-out:cubic-bezier(0,0,.2,1);--ease-in-out:cubic-bezier(.4,0,.2,1);--animate-spin:spin 1s linear infinite;--animate-ping:ping 1s cubic-bezier(0,0,.2,1)infinite;--animate-pulse:pulse 2s cubic-bezier(.4,0,.6,1)infinite;--animate-bounce:bounce 1s infinite;--blur-xs:4px;--blur-sm:8px;--blur-md:12px;--blur-lg:16px;--blur-xl:24px;--blur-2xl:40px;--blur-3xl:64px;--perspective-dramatic:100px;--perspective-near:300px;--perspective-normal:500px;--perspective-midrange:800px;--perspective-distant:1200px;--aspect-video:16/9;--default-transition-duration:.15s;--default-transition-timing-function:cubic-bezier(.4,0,.2,1);--default-font-family:var(--font-sans);--default-font-feature-settings:var(--font-sans--font-feature-settings);--default-font-variation-settings:var(--font-sans--font-variation-settings);--default-mono-font-family:var(--font-mono);--default-mono-font-feature-settings:var(--font-mono--font-feature-settings);--default-mono-font-variation-settings:var(--font-mono--font-variation-settings)}}@layer base{*,:after,:before,::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}html,:host{-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}body{line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}ol,ul,menu{list-style:none}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}button,input,select,optgroup,textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::file-selector-button{margin-inline-end:4px}::placeholder{opacity:1;color:color-mix(in oklab,currentColor 50%,transparent)}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit{padding-block:0}::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-month-field{padding-block:0}::-webkit-datetime-edit-day-field{padding-block:0}::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field{padding-block:0}::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-millisecond-field{padding-block:0}::-webkit-datetime-edit-meridiem-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){-webkit-appearance:button;-moz-appearance:button;appearance:button}::file-selector-button{-webkit-appearance:button;-moz-appearance:button;appearance:button}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components;@layer utilities{.absolute{position:absolute}.relative{position:relative}.static{position:static}.inset-0{inset:calc(var(--spacing)*0)}.-mt-\[4\.9rem\]{margin-top:-4.9rem}.-mb-px{margin-bottom:-1px}.mb-1{margin-bottom:calc(var(--spacing)*1)}.mb-2{margin-bottom:calc(var(--spacing)*2)}.mb-4{margin-bottom:calc(var(--spacing)*4)}.mb-6{margin-bottom:calc(var(--spacing)*6)}.-ml-8{margin-left:calc(var(--spacing)*-8)}.flex{display:flex}.hidden{display:none}.inline-block{display:inline-block}.inline-flex{display:inline-flex}.table{display:table}.aspect-\[335\/376\]{aspect-ratio:335/376}.h-1{height:calc(var(--spacing)*1)}.h-1\.5{height:calc(var(--spacing)*1.5)}.h-2{height:calc(var(--spacing)*2)}.h-2\.5{height:calc(var(--spacing)*2.5)}.h-3{height:calc(var(--spacing)*3)}.h-3\.5{height:calc(var(--spacing)*3.5)}.h-14{height:calc(var(--spacing)*14)}.h-14\.5{height:calc(var(--spacing)*14.5)}.min-h-screen{min-height:100vh}.w-1{width:calc(var(--spacing)*1)}.w-1\.5{width:calc(var(--spacing)*1.5)}.w-2{width:calc(var(--spacing)*2)}.w-2\.5{width:calc(var(--spacing)*2.5)}.w-3{width:calc(var(--spacing)*3)}.w-3\.5{width:calc(var(--spacing)*3.5)}.w-\[448px\]{width:448px}.w-full{width:100%}.max-w-\[335px\]{max-width:335px}.max-w-none{max-width:none}.flex-1{flex:1}.shrink-0{flex-shrink:0}.translate-y-0{--tw-translate-y:calc(var(--spacing)*0);translate:var(--tw-translate-x)var(--tw-translate-y)}.transform{transform:var(--tw-rotate-x)var(--tw-rotate-y)var(--tw-rotate-z)var(--tw-skew-x)var(--tw-skew-y)}.flex-col{flex-direction:column}.flex-col-reverse{flex-direction:column-reverse}.items-center{align-items:center}.justify-center{justify-content:center}.justify-end{justify-content:flex-end}.gap-3{gap:calc(var(--spacing)*3)}.gap-4{gap:calc(var(--spacing)*4)}:where(.space-x-1>:not(:last-child)){--tw-space-x-reverse:0;margin-inline-start:calc(calc(var(--spacing)*1)*var(--tw-space-x-reverse));margin-inline-end:calc(calc(var(--spacing)*1)*calc(1 - var(--tw-space-x-reverse)))}.overflow-hidden{overflow:hidden}.rounded-full{border-radius:3.40282e38px}.rounded-sm{border-radius:var(--radius-sm)}.rounded-t-lg{border-top-left-radius:var(--radius-lg);border-top-right-radius:var(--radius-lg)}.rounded-br-lg{border-bottom-right-radius:var(--radius-lg)}.rounded-bl-lg{border-bottom-left-radius:var(--radius-lg)}.border{border-style:var(--tw-border-style);border-width:1px}.border-\[\#19140035\]{border-color:#19140035}.border-\[\#e3e3e0\]{border-color:#e3e3e0}.border-black{border-color:var(--color-black)}.border-transparent{border-color:#0000}.bg-\[\#1b1b18\]{background-color:#1b1b18}.bg-\[\#FDFDFC\]{background-color:#fdfdfc}.bg-\[\#dbdbd7\]{background-color:#dbdbd7}.bg-\[\#fff2f2\]{background-color:#fff2f2}.bg-white{background-color:var(--color-white)}.p-6{padding:calc(var(--spacing)*6)}.px-5{padding-inline:calc(var(--spacing)*5)}.py-1{padding-block:calc(var(--spacing)*1)}.py-1\.5{padding-block:calc(var(--spacing)*1.5)}.py-2{padding-block:calc(var(--spacing)*2)}.pb-12{padding-bottom:calc(var(--spacing)*12)}.text-sm{font-size:var(--text-sm);line-height:var(--tw-leading,var(--text-sm--line-height))}.text-\[13px\]{font-size:13px}.leading-\[20px\]{--tw-leading:20px;line-height:20px}.leading-normal{--tw-leading:var(--leading-normal);line-height:var(--leading-normal)}.font-medium{--tw-font-weight:var(--font-weight-medium);font-weight:var(--font-weight-medium)}.text-\[\#1b1b18\]{color:#1b1b18}.text-\[\#706f6c\]{color:#706f6c}.text-\[\#F53003\],.text-\[\#f53003\]{color:#f53003}.text-white{color:var(--color-white)}.underline{text-decoration-line:underline}.underline-offset-4{text-underline-offset:4px}.opacity-100{opacity:1}.shadow-\[0px_0px_1px_0px_rgba\(0\,0\,0\,0\.03\)\,0px_1px_2px_0px_rgba\(0\,0\,0\,0\.06\)\]{--tw-shadow:0px 0px 1px 0px var(--tw-shadow-color,#00000008),0px 1px 2px 0px var(--tw-shadow-color,#0000000f);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-\[inset_0px_0px_0px_1px_rgba\(26\,26\,0\,0\.16\)\]{--tw-shadow:inset 0px 0px 0px 1px var(--tw-shadow-color,#1a1a0029);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.\!filter{filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}.filter{filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.transition-all{transition-property:all;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.transition-opacity{transition-property:opacity;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.delay-300{transition-delay:.3s}.duration-750{--tw-duration:.75s;transition-duration:.75s}.not-has-\[nav\]\:hidden:not(:has(:is(nav))){display:none}.before\:absolute:before{content:var(--tw-content);position:absolute}.before\:top-0:before{content:var(--tw-content);top:calc(var(--spacing)*0)}.before\:top-1\/2:before{content:var(--tw-content);top:50%}.before\:bottom-0:before{content:var(--tw-content);bottom:calc(var(--spacing)*0)}.before\:bottom-1\/2:before{content:var(--tw-content);bottom:50%}.before\:left-\[0\.4rem\]:before{content:var(--tw-content);left:.4rem}.before\:border-l:before{content:var(--tw-content);border-left-style:var(--tw-border-style);border-left-width:1px}.before\:border-\[\#e3e3e0\]:before{content:var(--tw-content);border-color:#e3e3e0}@media (hover:hover){.hover\:border-\[\#1915014a\]:hover{border-color:#1915014a}.hover\:border-\[\#19140035\]:hover{border-color:#19140035}.hover\:border-black:hover{border-color:var(--color-black)}.hover\:bg-black:hover{background-color:var(--color-black)}}@media (width>=64rem){.lg\:-mt-\[6\.6rem\]{margin-top:-6.6rem}.lg\:mb-0{margin-bottom:calc(var(--spacing)*0)}.lg\:mb-6{margin-bottom:calc(var(--spacing)*6)}.lg\:-ml-px{margin-left:-1px}.lg\:ml-0{margin-left:calc(var(--spacing)*0)}.lg\:block{display:block}.lg\:aspect-auto{aspect-ratio:auto}.lg\:w-\[438px\]{width:438px}.lg\:max-w-4xl{max-width:var(--container-4xl)}.lg\:grow{flex-grow:1}.lg\:flex-row{flex-direction:row}.lg\:justify-center{justify-content:center}.lg\:rounded-t-none{border-top-left-radius:0;border-top-right-radius:0}.lg\:rounded-tl-lg{border-top-left-radius:var(--radius-lg)}.lg\:rounded-r-lg{border-top-right-radius:var(--radius-lg);border-bottom-right-radius:var(--radius-lg)}.lg\:rounded-br-none{border-bottom-right-radius:0}.lg\:p-8{padding:calc(var(--spacing)*8)}.lg\:p-20{padding:calc(var(--spacing)*20)}}@media (prefers-color-scheme:dark){.dark\:block{display:block}.dark\:hidden{display:none}.dark\:border-\[\#3E3E3A\]{border-color:#3e3e3a}.dark\:border-\[\#eeeeec\]{border-color:#eeeeec}.dark\:bg-\[\#0a0a0a\]{background-color:#0a0a0a}.dark\:bg-\[\#1D0002\]{background-color:#1d0002}.dark\:bg-\[\#3E3E3A\]{background-color:#3e3e3a}.dark\:bg-\[\#161615\]{background-color:#161615}.dark\:bg-\[\#eeeeec\]{background-color:#eeeeec}.dark\:text-\[\#1C1C1A\]{color:#1c1c1a}.dark\:text-\[\#A1A09A\]{color:#a1a09a}.dark\:text-\[\#EDEDEC\]{color:#ededec}.dark\:text-\[\#F61500\]{color:#f61500}.dark\:text-\[\#FF4433\]{color:#f43}.dark\:shadow-\[inset_0px_0px_0px_1px_\#fffaed2d\]{--tw-shadow:inset 0px 0px 0px 1px var(--tw-shadow-color,#fffaed2d);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.dark\:before\:border-\[\#3E3E3A\]:before{content:var(--tw-content);border-color:#3e3e3a}@media (hover:hover){.dark\:hover\:border-\[\#3E3E3A\]:hover{border-color:#3e3e3a}.dark\:hover\:border-\[\#62605b\]:hover{border-color:#62605b}.dark\:hover\:border-white:hover{border-color:var(--color-white)}.dark\:hover\:bg-white:hover{background-color:var(--color-white)}}}@starting-style{.starting\:translate-y-4{--tw-translate-y:calc(var(--spacing)*4);translate:var(--tw-translate-x)var(--tw-translate-y)}}@starting-style{.starting\:translate-y-6{--tw-translate-y:calc(var(--spacing)*6);translate:var(--tw-translate-x)var(--tw-translate-y)}}@starting-style{.starting\:opacity-0{opacity:0}}}@keyframes spin{to{transform:rotate(360deg)}}@keyframes ping{75%,to{opacity:0;transform:scale(2)}}@keyframes pulse{50%{opacity:.5}}@keyframes bounce{0%,to{animation-timing-function:cubic-bezier(.8,0,1,1);transform:translateY(-25%)}50%{animation-timing-function:cubic-bezier(0,0,.2,1);transform:none}}@property --tw-translate-x{syntax:"*";inherits:false;initial-value:0}@property --tw-translate-y{syntax:"*";inherits:false;initial-value:0}@property --tw-translate-z{syntax:"*";inherits:false;initial-value:0}@property --tw-rotate-x{syntax:"*";inherits:false;initial-value:rotateX(0)}@property --tw-rotate-y{syntax:"*";inherits:false;initial-value:rotateY(0)}@property --tw-rotate-z{syntax:"*";inherits:false;initial-value:rotateZ(0)}@property --tw-skew-x{syntax:"*";inherits:false;initial-value:skewX(0)}@property --tw-skew-y{syntax:"*";inherits:false;initial-value:skewY(0)}@property --tw-space-x-reverse{syntax:"*";inherits:false;initial-value:0}@property --tw-border-style{syntax:"*";inherits:false;initial-value:solid}@property --tw-leading{syntax:"*";inherits:false}@property --tw-font-weight{syntax:"*";inherits:false}@property --tw-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:"*";inherits:false}@property --tw-inset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:"*";inherits:false}@property --tw-ring-color{syntax:"*";inherits:false}@property --tw-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:"*";inherits:false}@property --tw-inset-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:"*";inherits:false}@property --tw-ring-offset-width{syntax:"<length>";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:"*";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-blur{syntax:"*";inherits:false}@property --tw-brightness{syntax:"*";inherits:false}@property --tw-contrast{syntax:"*";inherits:false}@property --tw-grayscale{syntax:"*";inherits:false}@property --tw-hue-rotate{syntax:"*";inherits:false}@property --tw-invert{syntax:"*";inherits:false}@property --tw-opacity{syntax:"*";inherits:false}@property --tw-saturate{syntax:"*";inherits:false}@property --tw-sepia{syntax:"*";inherits:false}@property --tw-drop-shadow{syntax:"*";inherits:false}@property --tw-duration{syntax:"*";inherits:false}@property --tw-content{syntax:"*";inherits:false;initial-value:""}
            </style>
        @endif
    </head>
    <body class="bg-[#FDFDFC] dark:bg-[#0a0a0a] text-[#1b1b18] flex p-6 lg:p-8 items-center lg:justify-center min-h-screen flex-col">
        <header class="w-full lg:max-w-4xl max-w-[335px] text-sm mb-6 not-has-[nav]:hidden">
            @if (Route::has('login'))
                <nav class="flex items-center justify-end gap-4">
                    @auth
                        <a
                            href="{{ url('/dashboard') }}"
                            class="inline-block px-5 py-1.5 dark:text-[#EDEDEC] border-[#19140035] hover:border-[#1915014a] border text-[#1b1b18] dark:border-[#3E3E3A] dark:hover:border-[#62605b] rounded-sm text-sm leading-normal"
                        >
                            Dashboard
                        </a>
                    @else
                        <a
                            href="{{ route('login') }}"
                            class="inline-block px-5 py-1.5 dark:text-[#EDEDEC] text-[#1b1b18] border border-transparent hover:border-[#19140035] dark:hover:border-[#3E3E3A] rounded-sm text-sm leading-normal"
                        >
                            Log in
                        </a>

                        @if (Route::has('register'))
                            <a
                                href="{{ route('register') }}"
                                class="inline-block px-5 py-1.5 dark:text-[#EDEDEC] border-[#19140035] hover:border-[#1915014a] border text-[#1b1b18] dark:border-[#3E3E3A] dark:hover:border-[#62605b] rounded-sm text-sm leading-normal">
                                Register
                            </a>
                        @endif
                    @endauth
                </nav>
            @endif
        </header>
        <div class="flex items-center justify-center w-full transition-opacity opacity-100 duration-750 lg:grow starting:opacity-0">
            <main class="flex max-w-[335px] w-full flex-col-reverse lg:max-w-4xl lg:flex-row">
                <div class="text-[13px] leading-[20px] flex-1 p-6 pb-12 lg:p-20 bg-white dark:bg-[#161615] dark:text-[#EDEDEC] shadow-[inset_0px_0px_0px_1px_rgba(26,26,0,0.16)] dark:shadow-[inset_0px_0px_0px_1px_#fffaed2d] rounded-bl-lg rounded-br-lg lg:rounded-tl-lg lg:rounded-br-none">
                    <h1 class="mb-1 font-medium">Let's get started</h1>
                    <p class="mb-2 text-[#706f6c] dark:text-[#A1A09A]">Laravel has an incredibly rich ecosystem. <br>We suggest starting with the following.</p>
                    <ul class="flex flex-col mb-4 lg:mb-6">
                        <li class="flex items-center gap-4 py-2 relative before:border-l before:border-[#e3e3e0] dark:before:border-[#3E3E3A] before:top-1/2 before:bottom-0 before:left-[0.4rem] before:absolute">
                            <span class="relative py-1 bg-white dark:bg-[#161615]">
                                <span class="flex items-center justify-center rounded-full bg-[#FDFDFC] dark:bg-[#161615] shadow-[0px_0px_1px_0px_rgba(0,0,0,0.03),0px_1px_2px_0px_rgba(0,0,0,0.06)] w-3.5 h-3.5 border dark:border-[#3E3E3A] border-[#e3e3e0]">
                                    <span class="rounded-full bg-[#dbdbd7] dark:bg-[#3E3E3A] w-1.5 h-1.5"></span>
                                </span>
                            </span>
                            <span>
                                Read the
                                <a href="https://laravel.com/docs" target="_blank" class="inline-flex items-center space-x-1 font-medium underline underline-offset-4 text-[#f53003] dark:text-[#FF4433] ml-1">
                                    <span>Documentation</span>
                                    <svg
                                        width="10"
                                        height="11"
                                        viewBox="0 0 10 11"
                                        fill="none"
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="w-2.5 h-2.5"
                                    >
                                        <path
                                            d="M7.70833 6.95834V2.79167H3.54167M2.5 8L7.5 3.00001"
                                            stroke="currentColor"
                                            stroke-linecap="square"
                                        />
                                    </svg>
                                </a>
                            </span>
                        </li>
                        <li class="flex items-center gap-4 py-2 relative before:border-l before:border-[#e3e3e0] dark:before:border-[#3E3E3A] before:bottom-1/2 before:top-0 before:left-[0.4rem] before:absolute">
                            <span class="relative py-1 bg-white dark:bg-[#161615]">
                                <span class="flex items-center justify-center rounded-full bg-[#FDFDFC] dark:bg-[#161615] shadow-[0px_0px_1px_0px_rgba(0,0,0,0.03),0px_1px_2px_0px_rgba(0,0,0,0.06)] w-3.5 h-3.5 border dark:border-[#3E3E3A] border-[#e3e3e0]">
                                    <span class="rounded-full bg-[#dbdbd7] dark:bg-[#3E3E3A] w-1.5 h-1.5"></span>
                                </span>
                            </span>
                            <span>
                                Watch video tutorials at
                                <a href="https://laracasts.com" target="_blank" class="inline-flex items-center space-x-1 font-medium underline underline-offset-4 text-[#f53003] dark:text-[#FF4433] ml-1">
                                    <span>Laracasts</span>
                                    <svg
                                        width="10"
                                        height="11"
                                        viewBox="0 0 10 11"
                                        fill="none"
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="w-2.5 h-2.5"
                                    >
                                        <path
                                            d="M7.70833 6.95834V2.79167H3.54167M2.5 8L7.5 3.00001"
                                            stroke="currentColor"
                                            stroke-linecap="square"
                                        />
                                    </svg>
                                </a>
                            </span>
                        </li>
                    </ul>
                    <ul class="flex gap-3 text-sm leading-normal">
                        <li>
                            <a href="https://cloud.laravel.com" target="_blank" class="inline-block dark:bg-[#eeeeec] dark:border-[#eeeeec] dark:text-[#1C1C1A] dark:hover:bg-white dark:hover:border-white hover:bg-black hover:border-black px-5 py-1.5 bg-[#1b1b18] rounded-sm border border-black text-white text-sm leading-normal">
                                Deploy now
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="bg-[#fff2f2] dark:bg-[#1D0002] relative lg:-ml-px -mb-px lg:mb-0 rounded-t-lg lg:rounded-t-none lg:rounded-r-lg aspect-[335/376] lg:aspect-auto w-full lg:w-[438px] shrink-0 overflow-hidden">
                    {{-- Laravel Logo --}}
                    <svg class="w-full text-[#F53003] dark:text-[#F61500] transition-all translate-y-0 opacity-100 max-w-none duration-750 starting:opacity-0 starting:translate-y-6" viewBox="0 0 438 104" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M17.2036 -3H0V102.197H49.5189V86.7187H17.2036V-3Z" fill="currentColor" />
                        <path d="M110.256 41.6337C108.061 38.1275 104.945 35.3731 100.905 33.3681C96.8667 31.3647 92.8016 30.3618 88.7131 30.3618C83.4247 30.3618 78.5885 31.3389 74.201 33.2923C69.8111 35.2456 66.0474 37.928 62.9059 41.3333C59.7643 44.7401 57.3198 48.6726 55.5754 53.1293C53.8287 57.589 52.9572 62.274 52.9572 67.1813C52.9572 72.1925 53.8287 76.8995 55.5754 81.3069C57.3191 85.7173 59.7636 89.6241 62.9059 93.0293C66.0474 96.4361 69.8119 99.1155 74.201 101.069C78.5885 103.022 83.4247 103.999 88.7131 103.999C92.8016 103.999 96.8667 102.997 100.905 100.994C104.945 98.9911 108.061 96.2359 110.256 92.7282V102.195H126.563V32.1642H110.256V41.6337ZM108.76 75.7472C107.762 78.4531 106.366 80.8078 104.572 82.8112C102.776 84.8161 100.606 86.4183 98.0637 87.6206C95.5202 88.823 92.7004 89.4238 89.6103 89.4238C86.5178 89.4238 83.7252 88.823 81.2324 87.6206C78.7388 86.4183 76.5949 84.8161 74.7998 82.8112C73.004 80.8078 71.6319 78.4531 70.6856 75.7472C69.7356 73.0421 69.2644 70.1868 69.2644 67.1821C69.2644 64.1758 69.7356 61.3205 70.6856 58.6154C71.6319 55.9102 73.004 53.5571 74.7998 51.5522C76.5949 49.5495 78.738 47.9451 81.2324 46.7427C83.7252 45.5404 86.5178 44.9396 89.6103 44.9396C92.7012 44.9396 95.5202 45.5404 98.0637 46.7427C100.606 47.9451 102.776 49.5487 104.572 51.5522C106.367 53.5571 107.762 55.9102 108.76 58.6154C109.756 61.3205 110.256 64.1758 110.256 67.1821C110.256 70.1868 109.756 73.0421 108.76 75.7472Z" fill="currentColor" />
                        <path d="M242.805 41.6337C240.611 38.1275 237.494 35.3731 233.455 33.3681C229.416 31.3647 225.351 30.3618 221.262 30.3618C215.974 30.3618 211.138 31.3389 206.75 33.2923C202.36 35.2456 198.597 37.928 195.455 41.3333C192.314 44.7401 189.869 48.6726 188.125 53.1293C186.378 57.589 185.507 62.274 185.507 67.1813C185.507 72.1925 186.378 76.8995 188.125 81.3069C189.868 85.7173 192.313 89.6241 195.455 93.0293C198.597 96.4361 202.361 99.1155 206.75 101.069C211.138 103.022 215.974 103.999 221.262 103.999C225.351 103.999 229.416 102.997 233.455 100.994C237.494 98.9911 240.611 96.2359 242.805 92.7282V102.195H259.112V32.1642H242.805V41.6337ZM241.31 75.7472C240.312 78.4531 238.916 80.8078 237.122 82.8112C235.326 84.8161 233.156 86.4183 230.614 87.6206C228.07 88.823 225.251 89.4238 222.16 89.4238C219.068 89.4238 216.275 88.823 213.782 87.6206C211.289 86.4183 209.145 84.8161 207.35 82.8112C205.554 80.8078 204.182 78.4531 203.236 75.7472C202.286 73.0421 201.814 70.1868 201.814 67.1821C201.814 64.1758 202.286 61.3205 203.236 58.6154C204.182 55.9102 205.554 53.5571 207.35 51.5522C209.145 49.5495 211.288 47.9451 213.782 46.7427C216.275 45.5404 219.068 44.9396 222.16 44.9396C225.251 44.9396 228.07 45.5404 230.614 46.7427C233.156 47.9451 235.326 49.5487 237.122 51.5522C238.917 53.5571 240.312 55.9102 241.31 58.6154C242.306 61.3205 242.806 64.1758 242.806 67.1821C242.805 70.1868 242.305 73.0421 241.31 75.7472Z" fill="currentColor" />
                        <path d="M438 -3H421.694V102.197H438V-3Z" fill="currentColor" />
                        <path d="M139.43 102.197H155.735V48.2834H183.712V32.1665H139.43V102.197Z" fill="currentColor" />
                        <path d="M324.49 32.1665L303.995 85.794L283.498 32.1665H266.983L293.748 102.197H314.242L341.006 32.1665H324.49Z" fill="currentColor" />
                        <path d="M376.571 30.3656C356.603 30.3656 340.797 46.8497 340.797 67.1828C340.797 89.6597 356.094 104 378.661 104C391.29 104 399.354 99.1488 409.206 88.5848L398.189 80.0226C398.183 80.031 389.874 90.9895 377.468 90.9895C363.048 90.9895 356.977 79.3111 356.977 73.269H411.075C413.917 50.1328 398.775 30.3656 376.571 30.3656ZM357.02 61.0967C357.145 59.7487 359.023 43.3761 376.442 43.3761C393.861 43.3761 395.978 59.7464 396.099 61.0967H357.02Z" fill="currentColor" />
                    </svg>

                    {{-- Light Mode 12 SVG --}}
                    <svg class="w-[448px] max-w-none relative -mt-[4.9rem] -ml-8 lg:ml-0 lg:-mt-[6.6rem] dark:hidden" viewBox="0 0 440 376" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M188.263 355.73L188.595 355.73C195.441 348.845 205.766 339.761 219.569 328.477C232.93 317.193 242.978 308.205 249.714 301.511C256.34 294.626 260.867 287.358 263.296 279.708C265.725 272.058 264.565 264.121 259.816 255.896C254.516 246.716 247.062 239.352 237.454 233.805C227.957 228.067 217.908 225.198 207.307 225.198C196.927 225.197 190.136 227.97 186.934 233.516C183.621 238.872 184.726 246.331 190.247 255.894L125.647 255.891C116.371 239.825 112.395 225.481 113.72 212.858C115.265 200.235 121.559 190.481 132.602 183.596C143.754 176.52 158.607 172.982 177.159 172.983C196.594 172.984 215.863 176.523 234.968 183.6C253.961 190.486 271.299 200.241 286.98 212.864C302.661 225.488 315.14 239.833 324.416 255.899C333.03 270.817 336.841 283.918 335.847 295.203C335.075 306.487 331.376 316.336 324.75 324.751C318.346 333.167 308.408 343.494 294.936 355.734L377.094 355.737L405.917 405.656L217.087 405.649L188.263 355.73Z" fill="black" />
                            <path d="M9.11884 226.339L-13.7396 226.338L-42.7286 176.132L43.0733 176.135L175.595 405.649L112.651 405.647L9.11884 226.339Z" fill="black" />
                            <path d="M188.263 355.73L188.595 355.73C195.441 348.845 205.766 339.761 219.569 328.477C232.93 317.193 242.978 308.205 249.714 301.511C256.34 294.626 260.867 287.358 263.296 279.708C265.725 272.058 264.565 264.121 259.816 255.896C254.516 246.716 247.062 239.352 237.454 233.805C227.957 228.067 217.908 225.198 207.307 225.198C196.927 225.197 190.136 227.97 186.934 233.516C183.621 238.872 184.726 246.331 190.247 255.894L125.647 255.891C116.371 239.825 112.395 225.481 113.72 212.858C115.265 200.235 121.559 190.481 132.602 183.596C143.754 176.52 158.607 172.982 177.159 172.983C196.594 172.984 215.863 176.523 234.968 183.6C253.961 190.486 271.299 200.241 286.98 212.864C302.661 225.488 315.14 239.833 324.416 255.899C333.03 270.817 336.841 283.918 335.847 295.203C335.075 306.487 331.376 316.336 324.75 324.751C318.346 333.167 308.408 343.494 294.936 355.734L377.094 355.737L405.917 405.656L217.087 405.649L188.263 355.73Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M9.11884 226.339L-13.7396 226.338L-42.7286 176.132L43.0733 176.135L175.595 405.649L112.651 405.647L9.11884 226.339Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M204.592 327.449L204.923 327.449C211.769 320.564 222.094 311.479 235.897 300.196C249.258 288.912 259.306 279.923 266.042 273.23C272.668 266.345 277.195 259.077 279.624 251.427C282.053 243.777 280.893 235.839 276.145 227.615C270.844 218.435 263.39 211.071 253.782 205.524C244.285 199.786 234.236 196.917 223.635 196.916C213.255 196.916 206.464 199.689 203.262 205.235C199.949 210.59 201.054 218.049 206.575 227.612L141.975 227.61C132.699 211.544 128.723 197.2 130.048 184.577C131.593 171.954 137.887 162.2 148.93 155.315C160.083 148.239 174.935 144.701 193.487 144.702C212.922 144.703 232.192 148.242 251.296 155.319C270.289 162.205 287.627 171.96 303.308 184.583C318.989 197.207 331.468 211.552 340.745 227.618C349.358 242.536 353.169 255.637 352.175 266.921C351.403 278.205 347.704 288.055 341.078 296.47C334.674 304.885 324.736 315.213 311.264 327.453L393.422 327.456L422.246 377.375L233.415 377.368L204.592 327.449Z" fill="#F8B803" />
                            <path d="M25.447 198.058L2.58852 198.057L-26.4005 147.851L59.4015 147.854L191.923 377.368L128.979 377.365L25.447 198.058Z" fill="#F8B803" />
                            <path d="M204.592 327.449L204.923 327.449C211.769 320.564 222.094 311.479 235.897 300.196C249.258 288.912 259.306 279.923 266.042 273.23C272.668 266.345 277.195 259.077 279.624 251.427C282.053 243.777 280.893 235.839 276.145 227.615C270.844 218.435 263.39 211.071 253.782 205.524C244.285 199.786 234.236 196.917 223.635 196.916C213.255 196.916 206.464 199.689 203.262 205.235C199.949 210.59 201.054 218.049 206.575 227.612L141.975 227.61C132.699 211.544 128.723 197.2 130.048 184.577C131.593 171.954 137.887 162.2 148.93 155.315C160.083 148.239 174.935 144.701 193.487 144.702C212.922 144.703 232.192 148.242 251.296 155.319C270.289 162.205 287.627 171.96 303.308 184.583C318.989 197.207 331.468 211.552 340.745 227.618C349.358 242.536 353.169 255.637 352.175 266.921C351.403 278.205 347.704 288.055 341.078 296.47C334.674 304.885 324.736 315.213 311.264 327.453L393.422 327.456L422.246 377.375L233.415 377.368L204.592 327.449Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M25.447 198.058L2.58852 198.057L-26.4005 147.851L59.4015 147.854L191.923 377.368L128.979 377.365L25.447 198.058Z" stroke="#1B1B18" stroke-width="1" />
                        </g>
                        <g style="mix-blend-mode: hard-light" class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.725 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" fill="#F0ACB8" />
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" fill="#F0ACB8" />
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.725 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" stroke="#1B1B18" stroke-width="1" />
                        </g>
                        <g style="mix-blend-mode: plus-darker" class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M230.951 281.792L231.282 281.793C238.128 274.907 248.453 265.823 262.256 254.539C275.617 243.256 285.666 234.267 292.402 227.573C299.027 220.688 303.554 213.421 305.983 205.771C308.412 198.12 307.253 190.183 302.504 181.959C297.203 172.778 289.749 165.415 280.142 159.868C270.645 154.13 260.596 151.26 249.995 151.26C239.615 151.26 232.823 154.033 229.621 159.579C226.309 164.934 227.413 172.393 232.935 181.956L168.335 181.954C159.058 165.888 155.082 151.543 156.407 138.92C157.953 126.298 164.247 116.544 175.289 109.659C186.442 102.583 201.294 99.045 219.846 99.0457C239.281 99.0464 258.551 102.585 277.655 109.663C296.649 116.549 313.986 126.303 329.667 138.927C345.349 151.551 357.827 165.895 367.104 181.961C375.718 196.88 379.528 209.981 378.535 221.265C377.762 232.549 374.063 242.399 367.438 250.814C361.033 259.229 351.095 269.557 337.624 281.796L419.782 281.8L448.605 331.719L259.774 331.712L230.951 281.792Z" fill="#F3BEC7" />
                            <path d="M51.8063 152.402L28.9479 152.401L-0.0411453 102.195L85.7608 102.198L218.282 331.711L155.339 331.709L51.8063 152.402Z" fill="#F3BEC7" />
                            <path d="M230.951 281.792L231.282 281.793C238.128 274.907 248.453 265.823 262.256 254.539C275.617 243.256 285.666 234.267 292.402 227.573C299.027 220.688 303.554 213.421 305.983 205.771C308.412 198.12 307.253 190.183 302.504 181.959C297.203 172.778 289.749 165.415 280.142 159.868C270.645 154.13 260.596 151.26 249.995 151.26C239.615 151.26 232.823 154.033 229.621 159.579C226.309 164.934 227.413 172.393 232.935 181.956L168.335 181.954C159.058 165.888 155.082 151.543 156.407 138.92C157.953 126.298 164.247 116.544 175.289 109.659C186.442 102.583 201.294 99.045 219.846 99.0457C239.281 99.0464 258.551 102.585 277.655 109.663C296.649 116.549 313.986 126.303 329.667 138.927C345.349 151.551 357.827 165.895 367.104 181.961C375.718 196.88 379.528 209.981 378.535 221.265C377.762 232.549 374.063 242.399 367.438 250.814C361.033 259.229 351.095 269.557 337.624 281.796L419.782 281.8L448.605 331.719L259.774 331.712L230.951 281.792Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M51.8063 152.402L28.9479 152.401L-0.0411453 102.195L85.7608 102.198L218.282 331.711L155.339 331.709L51.8063 152.402Z" stroke="#1B1B18" stroke-width="1" />
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M188.467 355.363L188.798 355.363C195.644 348.478 205.969 339.393 219.772 328.11C233.133 316.826 243.181 307.837 249.917 301.144C253.696 297.217 256.792 293.166 259.205 288.991C261.024 285.845 262.455 282.628 263.499 279.341C265.928 271.691 264.768 263.753 260.02 255.529C254.719 246.349 247.265 238.985 237.657 233.438C228.16 227.7 218.111 224.831 207.51 224.83C197.13 224.83 190.339 227.603 187.137 233.149C183.824 238.504 184.929 245.963 190.45 255.527L125.851 255.524C116.574 239.458 112.598 225.114 113.923 212.491C114.615 206.836 116.261 201.756 118.859 197.253C122.061 191.704 126.709 187.03 132.805 183.229C143.958 176.153 158.81 172.615 177.362 172.616C196.797 172.617 216.067 176.156 235.171 183.233C254.164 190.119 271.502 199.874 287.183 212.497C302.864 225.121 315.343 239.466 324.62 255.532C333.233 270.45 337.044 283.551 336.05 294.835C335.46 303.459 333.16 311.245 329.151 318.194C327.915 320.337 326.515 322.4 324.953 324.384C318.549 332.799 308.611 343.127 295.139 355.367L377.297 355.37L406.121 405.289L217.29 405.282L188.467 355.363Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M9.32197 225.972L-13.5365 225.971L-42.5255 175.765L43.2765 175.768L175.798 405.282L112.854 405.279L9.32197 225.972Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M345.247 111.915C329.566 99.2919 312.229 89.5371 293.235 82.6512L235.167 183.228C254.161 190.114 271.498 199.869 287.179 212.492L345.247 111.915Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M382.686 154.964C373.41 138.898 360.931 124.553 345.25 111.93L287.182 212.506C302.863 225.13 315.342 239.475 324.618 255.541L382.686 154.964Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M293.243 82.6472C274.139 75.57 254.869 72.031 235.434 72.0303L177.366 172.607C196.801 172.608 216.071 176.147 235.175 183.224L293.243 82.6472Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M394.118 194.257C395.112 182.973 391.301 169.872 382.688 154.953L324.619 255.53C333.233 270.448 337.044 283.55 336.05 294.834L394.118 194.257Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M235.432 72.0311C216.88 72.0304 202.027 75.5681 190.875 82.6442L132.806 183.221C143.959 176.145 158.812 172.607 177.363 172.608L235.432 72.0311Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M265.59 124.25C276.191 124.251 286.24 127.12 295.737 132.858L237.669 233.435C228.172 227.697 218.123 224.828 207.522 224.827L265.59 124.25Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M295.719 132.859C305.326 138.406 312.78 145.77 318.081 154.95L260.013 255.527C254.712 246.347 247.258 238.983 237.651 233.436L295.719 132.859Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M387.218 217.608C391.227 210.66 393.527 202.874 394.117 194.25L336.049 294.827C335.459 303.451 333.159 311.237 329.15 318.185L387.218 217.608Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M245.211 132.577C248.413 127.03 255.204 124.257 265.584 124.258L207.516 224.835C197.136 224.834 190.345 227.607 187.143 233.154L245.211 132.577Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M318.094 154.945C322.842 163.17 324.002 171.107 321.573 178.757L263.505 279.334C265.934 271.684 264.774 263.746 260.026 255.522L318.094 154.945Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M176.925 96.6737C180.127 91.1249 184.776 86.4503 190.871 82.6499L132.803 183.227C126.708 187.027 122.059 191.702 118.857 197.25L176.925 96.6737Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M387.226 217.606C385.989 219.749 384.59 221.813 383.028 223.797L324.96 324.373C326.522 322.39 327.921 320.326 329.157 318.183L387.226 217.606Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M317.269 188.408C319.087 185.262 320.519 182.045 321.562 178.758L263.494 279.335C262.451 282.622 261.019 285.839 259.201 288.985L317.269 188.408Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M245.208 132.573C241.895 137.928 243 145.387 248.522 154.95L190.454 255.527C184.932 245.964 183.827 238.505 187.14 233.15L245.208 132.573Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M176.93 96.6719C174.331 101.175 172.686 106.255 171.993 111.91L113.925 212.487C114.618 206.831 116.263 201.752 118.862 197.249L176.93 96.6719Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M317.266 188.413C314.853 192.589 311.757 196.64 307.978 200.566L249.91 301.143C253.689 297.216 256.785 293.166 259.198 288.99L317.266 188.413Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M464.198 304.708L435.375 254.789L377.307 355.366L406.13 405.285L464.198 304.708Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M353.209 254.787C366.68 242.548 376.618 232.22 383.023 223.805L324.955 324.382C318.55 332.797 308.612 343.124 295.141 355.364L353.209 254.787Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M435.37 254.787L353.212 254.784L295.144 355.361L377.302 355.364L435.37 254.787Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M183.921 154.947L248.521 154.95L190.453 255.527L125.853 255.524L183.921 154.947Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M171.992 111.914C170.668 124.537 174.643 138.881 183.92 154.947L125.852 255.524C116.575 239.458 112.599 225.114 113.924 212.491L171.992 111.914Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M307.987 200.562C301.251 207.256 291.203 216.244 277.842 227.528L219.774 328.105C233.135 316.821 243.183 307.832 249.919 301.139L307.987 200.562Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M15.5469 75.1797L44.5359 125.386L-13.5321 225.963L-42.5212 175.756L15.5469 75.1797Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M277.836 227.536C264.033 238.82 253.708 247.904 246.862 254.789L188.794 355.366C195.64 348.481 205.965 339.397 219.768 328.113L277.836 227.536Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M275.358 304.706L464.189 304.713L406.12 405.29L217.29 405.283L275.358 304.706Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M44.5279 125.39L67.3864 125.39L9.31834 225.967L-13.5401 225.966L44.5279 125.39Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M101.341 75.1911L233.863 304.705L175.795 405.282L43.2733 175.768L101.341 75.1911ZM15.5431 75.19L-42.525 175.767L43.277 175.77L101.345 75.1932L15.5431 75.19Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M246.866 254.784L246.534 254.784L188.466 355.361L188.798 355.361L246.866 254.784Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M246.539 254.781L275.362 304.701L217.294 405.277L188.471 355.358L246.539 254.781Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M67.3906 125.391L170.923 304.698L112.855 405.275L9.32257 225.967L67.3906 125.391Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M170.921 304.699L233.865 304.701L175.797 405.278L112.853 405.276L170.921 304.699Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                        </g>
                        <g style="mix-blend-mode: hard-light" class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M246.544 254.79L246.875 254.79C253.722 247.905 264.046 238.82 277.849 227.537C291.21 216.253 301.259 207.264 307.995 200.57C314.62 193.685 319.147 186.418 321.577 178.768C324.006 171.117 322.846 163.18 318.097 154.956C312.796 145.775 305.342 138.412 295.735 132.865C286.238 127.127 276.189 124.258 265.588 124.257C255.208 124.257 248.416 127.03 245.214 132.576C241.902 137.931 243.006 145.39 248.528 154.953L183.928 154.951C174.652 138.885 170.676 124.541 172 111.918C173.546 99.2946 179.84 89.5408 190.882 82.6559C202.035 75.5798 216.887 72.0421 235.439 72.0428C254.874 72.0435 274.144 75.5825 293.248 82.6598C312.242 89.5457 329.579 99.3005 345.261 111.924C360.942 124.548 373.421 138.892 382.697 154.958C391.311 169.877 395.121 182.978 394.128 194.262C393.355 205.546 389.656 215.396 383.031 223.811C376.627 232.226 366.688 242.554 353.217 254.794L435.375 254.797L464.198 304.716L275.367 304.709L246.544 254.79Z" fill="#F0ACB8" />
                            <path d="M246.544 254.79L246.875 254.79C253.722 247.905 264.046 238.82 277.849 227.537C291.21 216.253 301.259 207.264 307.995 200.57C314.62 193.685 319.147 186.418 321.577 178.768C324.006 171.117 322.846 163.18 318.097 154.956C312.796 145.775 305.342 138.412 295.735 132.865C286.238 127.127 276.189 124.258 265.588 124.257C255.208 124.257 248.416 127.03 245.214 132.576C241.902 137.931 243.006 145.39 248.528 154.953L183.928 154.951C174.652 138.885 170.676 124.541 172 111.918C173.546 99.2946 179.84 89.5408 190.882 82.6559C202.035 75.5798 216.887 72.0421 235.439 72.0428C254.874 72.0435 274.144 75.5825 293.248 82.6598C312.242 89.5457 329.579 99.3005 345.261 111.924C360.942 124.548 373.421 138.892 382.697 154.958C391.311 169.877 395.121 182.978 394.128 194.262C393.355 205.546 389.656 215.396 383.031 223.811C376.627 232.226 366.688 242.554 353.217 254.794L435.375 254.797L464.198 304.716L275.367 304.709L246.544 254.79Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="round" />
                        </g>
                        <g style="mix-blend-mode: hard-light" class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M67.41 125.402L44.5515 125.401L15.5625 75.1953L101.364 75.1985L233.886 304.712L170.942 304.71L67.41 125.402Z" fill="#F0ACB8" />
                            <path d="M67.41 125.402L44.5515 125.401L15.5625 75.1953L101.364 75.1985L233.886 304.712L170.942 304.71L67.41 125.402Z" stroke="#1B1B18" stroke-width="1" />
                        </g>
                    </svg>

                    {{-- Dark Mode 12 SVG --}}
                    <svg class="w-[448px] max-w-none relative -mt-[4.9rem] -ml-8 lg:ml-0 lg:-mt-[6.6rem] hidden dark:block" viewBox="0 0 440 376" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M188.263 355.73L188.595 355.73C195.441 348.845 205.766 339.761 219.569 328.477C232.93 317.193 242.978 308.205 249.714 301.511C256.34 294.626 260.867 287.358 263.296 279.708C265.725 272.058 264.565 264.121 259.816 255.896C254.516 246.716 247.062 239.352 237.454 233.805C227.957 228.067 217.908 225.198 207.307 225.198C196.927 225.197 190.136 227.97 186.934 233.516C183.621 238.872 184.726 246.331 190.247 255.894L125.647 255.891C116.371 239.825 112.395 225.481 113.72 212.858C115.265 200.235 121.559 190.481 132.602 183.596C143.754 176.52 158.607 172.982 177.159 172.983C196.594 172.984 215.863 176.523 234.968 183.6C253.961 190.486 271.299 200.241 286.98 212.864C302.661 225.488 315.14 239.833 324.416 255.899C333.03 270.817 336.841 283.918 335.847 295.203C335.075 306.487 331.376 316.336 324.75 324.751C318.346 333.167 308.408 343.494 294.936 355.734L377.094 355.737L405.917 405.656L217.087 405.649L188.263 355.73Z" fill="black"/>
                            <path d="M9.11884 226.339L-13.7396 226.338L-42.7286 176.132L43.0733 176.135L175.595 405.649L112.651 405.647L9.11884 226.339Z" fill="black"/>
                            <path d="M188.263 355.73L188.595 355.73C195.441 348.845 205.766 339.761 219.569 328.477C232.93 317.193 242.978 308.205 249.714 301.511C256.34 294.626 260.867 287.358 263.296 279.708C265.725 272.058 264.565 264.121 259.816 255.896C254.516 246.716 247.062 239.352 237.454 233.805C227.957 228.067 217.908 225.198 207.307 225.198C196.927 225.197 190.136 227.97 186.934 233.516C183.621 238.872 184.726 246.331 190.247 255.894L125.647 255.891C116.371 239.825 112.395 225.481 113.72 212.858C115.265 200.235 121.559 190.481 132.602 183.596C143.754 176.52 158.607 172.982 177.159 172.983C196.594 172.984 215.863 176.523 234.968 183.6C253.961 190.486 271.299 200.241 286.98 212.864C302.661 225.488 315.14 239.833 324.416 255.899C333.03 270.817 336.841 283.918 335.847 295.203C335.075 306.487 331.376 316.336 324.75 324.751C318.346 333.167 308.408 343.494 294.936 355.734L377.094 355.737L405.917 405.656L217.087 405.649L188.263 355.73Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M9.11884 226.339L-13.7396 226.338L-42.7286 176.132L43.0733 176.135L175.595 405.649L112.651 405.647L9.11884 226.339Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M204.592 327.449L204.923 327.449C211.769 320.564 222.094 311.479 235.897 300.196C249.258 288.912 259.306 279.923 266.042 273.23C272.668 266.345 277.195 259.077 279.624 251.427C282.053 243.777 280.893 235.839 276.145 227.615C270.844 218.435 263.39 211.071 253.782 205.524C244.285 199.786 234.236 196.917 223.635 196.916C213.255 196.916 206.464 199.689 203.262 205.235C199.949 210.59 201.054 218.049 206.575 227.612L141.975 227.61C132.699 211.544 128.723 197.2 130.048 184.577C131.593 171.954 137.887 162.2 148.93 155.315C160.083 148.239 174.935 144.701 193.487 144.702C212.922 144.703 232.192 148.242 251.296 155.319C270.289 162.205 287.627 171.96 303.308 184.583C318.989 197.207 331.468 211.552 340.745 227.618C349.358 242.536 353.169 255.637 352.175 266.921C351.403 278.205 347.704 288.055 341.078 296.47C334.674 304.885 324.736 315.213 311.264 327.453L393.422 327.456L422.246 377.375L233.415 377.368L204.592 327.449Z" fill="#391800"/>
                            <path d="M25.447 198.058L2.58852 198.057L-26.4005 147.851L59.4015 147.854L191.923 377.368L128.979 377.365L25.447 198.058Z" fill="#391800"/>
                            <path d="M204.592 327.449L204.923 327.449C211.769 320.564 222.094 311.479 235.897 300.196C249.258 288.912 259.306 279.923 266.042 273.23C272.668 266.345 277.195 259.077 279.624 251.427C282.053 243.777 280.893 235.839 276.145 227.615C270.844 218.435 263.39 211.071 253.782 205.524C244.285 199.786 234.236 196.917 223.635 196.916C213.255 196.916 206.464 199.689 203.262 205.235C199.949 210.59 201.054 218.049 206.575 227.612L141.975 227.61C132.699 211.544 128.723 197.2 130.048 184.577C131.593 171.954 137.887 162.2 148.93 155.315C160.083 148.239 174.935 144.701 193.487 144.702C212.922 144.703 232.192 148.242 251.296 155.319C270.289 162.205 287.627 171.96 303.308 184.583C318.989 197.207 331.468 211.552 340.745 227.618C349.358 242.536 353.169 255.637 352.175 266.921C351.403 278.205 347.704 288.055 341.078 296.47C334.674 304.885 324.736 315.213 311.264 327.453L393.422 327.456L422.246 377.375L233.415 377.368L204.592 327.449Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M25.447 198.058L2.58852 198.057L-26.4005 147.851L59.4015 147.854L191.923 377.368L128.979 377.365L25.447 198.058Z" stroke="#FF750F" stroke-width="1"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4" style="mix-blend-mode:hard-light">
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.725 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" fill="#733000"/>
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" fill="#733000"/>
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.725 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" stroke="#FF750F" stroke-width="1"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.726 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" stroke="#FF750F" stroke-width="1"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M188.467 355.363L188.798 355.363C195.644 348.478 205.969 339.393 219.772 328.11C233.133 316.826 243.181 307.837 249.917 301.144C253.696 297.217 256.792 293.166 259.205 288.991C261.024 285.845 262.455 282.628 263.499 279.341C265.928 271.691 264.768 263.753 260.02 255.529C254.719 246.349 247.265 238.985 237.657 233.438C228.16 227.7 218.111 224.831 207.51 224.83C197.13 224.83 190.339 227.603 187.137 233.149C183.824 238.504 184.929 245.963 190.45 255.527L125.851 255.524C116.574 239.458 112.598 225.114 113.923 212.491C114.615 206.836 116.261 201.756 118.859 197.253C122.061 191.704 126.709 187.03 132.805 183.229C143.958 176.153 158.81 172.615 177.362 172.616C196.797 172.617 216.067 176.156 235.171 183.233C254.164 190.119 271.502 199.874 287.183 212.497C302.864 225.121 315.343 239.466 324.62 255.532C333.233 270.45 337.044 283.551 336.05 294.835C335.46 303.459 333.16 311.245 329.151 318.194C327.915 320.337 326.515 322.4 324.953 324.384C318.549 332.799 308.611 343.127 295.139 355.367L377.297 355.37L406.121 405.289L217.29 405.282L188.467 355.363Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M9.32197 225.972L-13.5365 225.971L-42.5255 175.765L43.2765 175.768L175.798 405.282L112.854 405.279L9.32197 225.972Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M345.247 111.915C329.566 99.2919 312.229 89.5371 293.235 82.6512L235.167 183.228C254.161 190.114 271.498 199.869 287.179 212.492L345.247 111.915Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M382.686 154.964C373.41 138.898 360.931 124.553 345.25 111.93L287.182 212.506C302.863 225.13 315.342 239.475 324.618 255.541L382.686 154.964Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M293.243 82.6472C274.139 75.57 254.869 72.031 235.434 72.0303L177.366 172.607C196.801 172.608 216.071 176.147 235.175 183.224L293.243 82.6472Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M394.118 194.257C395.112 182.973 391.301 169.872 382.688 154.953L324.619 255.53C333.233 270.448 337.044 283.55 336.05 294.834L394.118 194.257Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M235.432 72.0311C216.88 72.0304 202.027 75.5681 190.875 82.6442L132.806 183.221C143.959 176.145 158.812 172.607 177.363 172.608L235.432 72.0311Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M265.59 124.25C276.191 124.251 286.24 127.12 295.737 132.858L237.669 233.435C228.172 227.697 218.123 224.828 207.522 224.827L265.59 124.25Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M295.719 132.859C305.326 138.406 312.78 145.77 318.081 154.95L260.013 255.527C254.712 246.347 247.258 238.983 237.651 233.436L295.719 132.859Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M387.218 217.608C391.227 210.66 393.527 202.874 394.117 194.25L336.049 294.827C335.459 303.451 333.159 311.237 329.15 318.185L387.218 217.608Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M245.211 132.577C248.413 127.03 255.204 124.257 265.584 124.258L207.516 224.835C197.136 224.834 190.345 227.607 187.143 233.154L245.211 132.577Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M318.094 154.945C322.842 163.17 324.002 171.107 321.573 178.757L263.505 279.334C265.934 271.684 264.774 263.746 260.026 255.522L318.094 154.945Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M176.925 96.6737C180.127 91.1249 184.776 86.4503 190.871 82.6499L132.803 183.227C126.708 187.027 122.059 191.702 118.857 197.25L176.925 96.6737Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M387.226 217.606C385.989 219.749 384.59 221.813 383.028 223.797L324.96 324.373C326.522 322.39 327.921 320.326 329.157 318.183L387.226 217.606Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M317.269 188.408C319.087 185.262 320.519 182.045 321.562 178.758L263.494 279.335C262.451 282.622 261.019 285.839 259.201 288.985L317.269 188.408Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M245.208 132.573C241.895 137.928 243 145.387 248.522 154.95L190.454 255.527C184.932 245.964 183.827 238.505 187.14 233.15L245.208 132.573Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M176.93 96.6719C174.331 101.175 172.686 106.255 171.993 111.91L113.925 212.487C114.618 206.831 116.263 201.752 118.862 197.249L176.93 96.6719Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M317.266 188.413C314.853 192.589 311.757 196.64 307.978 200.566L249.91 301.143C253.689 297.216 256.785 293.166 259.198 288.99L317.266 188.413Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M464.198 304.708L435.375 254.789L377.307 355.366L406.13 405.285L464.198 304.708Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M353.209 254.787C366.68 242.548 376.618 232.22 383.023 223.805L324.955 324.382C318.55 332.797 308.612 343.124 295.141 355.364L353.209 254.787Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M435.37 254.787L353.212 254.784L295.144 355.361L377.302 355.364L435.37 254.787Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M183.921 154.947L248.521 154.95L190.453 255.527L125.853 255.524L183.921 154.947Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M171.992 111.914C170.668 124.537 174.643 138.881 183.92 154.947L125.852 255.524C116.575 239.458 112.599 225.114 113.924 212.491L171.992 111.914Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M307.987 200.562C301.251 207.256 291.203 216.244 277.842 227.528L219.774 328.105C233.135 316.821 243.183 307.832 249.919 301.139L307.987 200.562Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M15.5469 75.1797L44.5359 125.386L-13.5321 225.963L-42.5212 175.756L15.5469 75.1797Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M277.836 227.536C264.033 238.82 253.708 247.904 246.862 254.789L188.794 355.366C195.64 348.481 205.965 339.397 219.768 328.113L277.836 227.536Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M275.358 304.706L464.189 304.713L406.12 405.29L217.29 405.283L275.358 304.706Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M44.5279 125.39L67.3864 125.39L9.31834 225.967L-13.5401 225.966L44.5279 125.39Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M101.341 75.1911L233.863 304.705L175.795 405.282L43.2733 175.768L101.341 75.1911ZM15.5431 75.19L-42.525 175.767L43.277 175.77L101.345 75.1932L15.5431 75.19Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M246.866 254.784L246.534 254.784L188.466 355.361L188.798 355.361L246.866 254.784Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M246.539 254.781L275.362 304.701L217.294 405.277L188.471 355.358L246.539 254.781Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M67.3906 125.391L170.923 304.698L112.855 405.275L9.32257 225.967L67.3906 125.391Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M170.921 304.699L233.865 304.701L175.797 405.278L112.853 405.276L170.921 304.699Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4" style="mix-blend-mode:hard-light">
                            <path d="M246.544 254.79L246.875 254.79C253.722 247.905 264.046 238.82 277.849 227.537C291.21 216.253 301.259 207.264 307.995 200.57C314.62 193.685 319.147 186.418 321.577 178.768C324.006 171.117 322.846 163.18 318.097 154.956C312.796 145.775 305.342 138.412 295.735 132.865C286.238 127.127 276.189 124.258 265.588 124.257C255.208 124.257 248.416 127.03 245.214 132.576C241.902 137.931 243.006 145.39 248.528 154.953L183.928 154.951C174.652 138.885 170.676 124.541 172 111.918C173.546 99.2946 179.84 89.5408 190.882 82.6559C202.035 75.5798 216.887 72.0421 235.439 72.0428C254.874 72.0435 274.144 75.5825 293.248 82.6598C312.242 89.5457 329.579 99.3005 345.261 111.924C360.942 124.548 373.421 138.892 382.697 154.958C391.311 169.877 395.121 182.978 394.128 194.262C393.355 205.546 389.656 215.396 383.031 223.811C376.627 232.226 366.688 242.554 353.217 254.794L435.375 254.797L464.198 304.716L275.367 304.709L246.544 254.79Z" fill="#4B0600"/>
                            <path d="M246.544 254.79L246.875 254.79C253.722 247.905 264.046 238.82 277.849 227.537C291.21 216.253 301.259 207.264 307.995 200.57C314.62 193.685 319.147 186.418 321.577 178.768C324.006 171.117 322.846 163.18 318.097 154.956C312.796 145.775 305.342 138.412 295.735 132.865C286.238 127.127 276.189 124.258 265.588 124.257C255.208 124.257 248.416 127.03 245.214 132.576C241.902 137.931 243.006 145.39 248.528 154.953L183.928 154.951C174.652 138.885 170.676 124.541 172 111.918C173.546 99.2946 179.84 89.5408 190.882 82.6559C202.035 75.5798 216.887 72.0421 235.439 72.0428C254.874 72.0435 274.144 75.5825 293.248 82.6598C312.242 89.5457 329.579 99.3005 345.261 111.924C360.942 124.548 373.421 138.892 382.697 154.958C391.311 169.877 395.121 182.978 394.128 194.262C393.355 205.546 389.656 215.396 383.031 223.811C376.627 232.226 366.688 242.554 353.217 254.794L435.375 254.797L464.198 304.716L275.367 304.709L246.544 254.79Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="round"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4" style="mix-blend-mode:hard-light">
                            <path d="M67.41 125.402L44.5515 125.401L15.5625 75.1953L101.364 75.1985L233.886 304.712L170.942 304.71L67.41 125.402Z" fill="#4B0600"/>
                            <path d="M67.41 125.402L44.5515 125.401L15.5625 75.1953L101.364 75.1985L233.886 304.712L170.942 304.71L67.41 125.402Z" stroke="#FF750F" stroke-width="1"/>
                        </g>
                    </svg>
                    <div class="absolute inset-0 rounded-t-lg lg:rounded-t-none lg:rounded-r-lg shadow-[inset_0px_0px_0px_1px_rgba(26,26,0,0.16)] dark:shadow-[inset_0px_0px_0px_1px_#fffaed2d]"></div>
                </div>
            </main>
        </div>

        @if (Route::has('login'))
            <div class="h-14.5 hidden lg:block"></div>
        @endif
    </body>
</html>


=== ROUTES ===

--- web.php ---
<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Auth;
use Illuminate\Http\Request;
use App\Http\Controllers\{
    AuthController,
    EventiController,
    VolontariController,
    MezziController,
    TicketsController,
    MagazzinoController,
    DpiController,
    NotificheController,
    DashboardController,
    PermissionController
};

/*
|--------------------------------------------------------------------------
| ROUTES DI AUTENTICAZIONE
|--------------------------------------------------------------------------
*/

// Route pubbliche (guest)
Route::middleware('guest')->group(function () {
    // Login
    Route::get('/login', [AuthController::class, 'showLoginForm'])->name('login');
    Route::post('/login', [AuthController::class, 'login']);
    
    // Registrazione
    Route::get('/register', [AuthController::class, 'showRegistrationForm'])->name('register');
    Route::post('/register', [AuthController::class, 'register']);
    
    // Password reset
    Route::get('/forgot-password', [AuthController::class, 'showForgotPasswordForm'])->name('password.request');
});

// Route protette (auth)
Route::middleware('auth')->group(function () {
    // Logout
    Route::post('/logout', [AuthController::class, 'logout'])->name('logout');
    
    // Aggiorna ultimo accesso (AJAX)
    Route::post('/user/update-accesso', [AuthController::class, 'updateAccesso'])->name('user.update-accesso');
    
    // Profilo utente
    Route::get('/profile', [AuthController::class, 'showProfile'])->name('profile.edit');
    Route::put('/profile', [AuthController::class, 'updateProfile'])->name('profile.update');
    Route::put('/profile/password', [AuthController::class, 'changePassword'])->name('profile.password');
});

/*
|--------------------------------------------------------------------------
| REDIRECT ROUTES
|--------------------------------------------------------------------------
*/

// Redirect root
Route::get('/', function () {
    if (Auth::check()) {
        return redirect()->route('dashboard');
    }
    return redirect()->route('login');
})->name('home');

// Redirect home
Route::get('/home', function () {
    return redirect()->route('dashboard');
});

/*
|--------------------------------------------------------------------------
| ROUTES AUTENTICATE DEL GESTIONALE
|--------------------------------------------------------------------------
*/

Route::middleware(['auth'])->group(function () {
    
    // Dashboard principale
    Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
    
    /*
    |--------------------------------------------------------------------------
    | EVENTI - Gestione Eventi Formativi
    |--------------------------------------------------------------------------
    */
    Route::prefix('eventi')->name('eventi.')->group(function () {
        Route::get('/', [EventiController::class, 'index'])->name('index');
        Route::get('/create', [EventiController::class, 'create'])->name('create');
        Route::post('/', [EventiController::class, 'store'])->name('store');
        Route::get('/{evento}', [EventiController::class, 'show'])->name('show');
        Route::get('/{evento}/edit', [EventiController::class, 'edit'])->name('edit');
        Route::put('/{evento}', [EventiController::class, 'update'])->name('update');
        Route::delete('/{evento}', [EventiController::class, 'destroy'])->name('destroy');
        
        // Routes aggiuntive per eventi
        Route::patch('/{evento}/status', [EventiController::class, 'changeStatus'])->name('change-status');
        Route::post('/{evento}/duplicate', [EventiController::class, 'duplicate'])->name('duplicate');
        Route::post('/{evento}/partecipa', [EventiController::class, 'partecipa'])->name('partecipa');
        Route::delete('/{evento}/partecipa', [EventiController::class, 'rimuoviPartecipazione'])->name('rimuovi-partecipazione');
        
        // Export e Reports
        Route::get('/export/pdf', [EventiController::class, 'exportPdf'])->name('export.pdf');
        Route::get('/export/excel', [EventiController::class, 'exportExcel'])->name('export.excel');
        Route::get('/calendario', [EventiController::class, 'calendario'])->name('calendario');
    });

    /*
    |--------------------------------------------------------------------------
    | VOLONTARI - Gestione Volontari
    |--------------------------------------------------------------------------
    */
    Route::prefix('volontari')->name('volontari.')->group(function () {
        Route::get('/', [VolontariController::class, 'index'])->name('index');
        Route::get('/create', [VolontariController::class, 'create'])->name('create');
        Route::post('/', [VolontariController::class, 'store'])->name('store');
        Route::get('/{volontario}', [VolontariController::class, 'show'])->name('show');
        Route::get('/{volontario}/edit', [VolontariController::class, 'edit'])->name('edit');
        Route::put('/{volontario}', [VolontariController::class, 'update'])->name('update');
        Route::delete('/{volontario}', [VolontariController::class, 'destroy'])->name('destroy');
        
        // Routes aggiuntive per volontari
        Route::patch('/{volontario}/status', [VolontariController::class, 'changeStatus'])->name('change-status');
        Route::get('/{volontario}/eventi', [VolontariController::class, 'eventi'])->name('eventi');
        Route::get('/{volontario}/disponibilita', [VolontariController::class, 'disponibilita'])->name('disponibilita');
        Route::post('/{volontario}/certificazioni', [VolontariController::class, 'addCertificazione'])->name('add-certificazione');
        Route::get('/{volontario}/documenti', [VolontariController::class, 'documenti'])->name('documenti');
        Route::post('/{volontario}/documenti', [VolontariController::class, 'uploadDocumento'])->name('documenti.upload');
        
        // Import/Export
        Route::get('/import/template', [VolontariController::class, 'downloadTemplate'])->name('import.template');
        Route::post('/import', [VolontariController::class, 'import'])->name('import');
        Route::get('/export/excel', [VolontariController::class, 'exportExcel'])->name('export.excel');
    });

    /*
    |--------------------------------------------------------------------------
    | MEZZI - Gestione Mezzi di Trasporto
    |--------------------------------------------------------------------------
    */
    Route::prefix('mezzi')->name('mezzi.')->group(function () {
        Route::get('/', [MezziController::class, 'index'])->name('index');
        Route::get('/create', [MezziController::class, 'create'])->name('create');
        Route::post('/', [MezziController::class, 'store'])->name('store');
        Route::get('/{mezzo}', [MezziController::class, 'show'])->name('show');
        Route::get('/{mezzo}/edit', [MezziController::class, 'edit'])->name('edit');
        Route::put('/{mezzo}', [MezziController::class, 'update'])->name('update');
        Route::delete('/{mezzo}', [MezziController::class, 'destroy'])->name('destroy');
        
        // Manutenzioni
        Route::get('/{mezzo}/manutenzioni', [MezziController::class, 'manutenzioni'])->name('manutenzioni');
        Route::post('/{mezzo}/manutenzioni', [MezziController::class, 'addManutenzione'])->name('add-manutenzione');
        Route::patch('/manutenzioni/{manutenzione}', [MezziController::class, 'updateManutenzione'])->name('update-manutenzione');
        
        // Checklist
        Route::get('/{mezzo}/checklist', [MezziController::class, 'checklist'])->name('checklist');
        Route::post('/{mezzo}/checklist', [MezziController::class, 'saveChecklist'])->name('checklist.store');
        
        // Controlli e scadenze
        Route::get('/scadenze', [MezziController::class, 'scadenze'])->name('scadenze');
        Route::patch('/{mezzo}/status', [MezziController::class, 'changeStatus'])->name('change-status');
        
        // Utilizzo e statistiche
        Route::get('/{mezzo}/utilizzo', [MezziController::class, 'utilizzo'])->name('utilizzo');
        Route::get('/statistiche', [MezziController::class, 'statistiche'])->name('statistiche');
    });

    /*
    |--------------------------------------------------------------------------
    | TICKETS - Sistema Ticketing
    |--------------------------------------------------------------------------
    */
    Route::prefix('tickets')->name('tickets.')->group(function () {
        Route::get('/', [TicketsController::class, 'index'])->name('index');
        Route::get('/create', [TicketsController::class, 'create'])->name('create');
        Route::post('/', [TicketsController::class, 'store'])->name('store');
        Route::get('/{ticket}', [TicketsController::class, 'show'])->name('show');
        Route::get('/{ticket}/edit', [TicketsController::class, 'edit'])->name('edit');
        Route::put('/{ticket}', [TicketsController::class, 'update'])->name('update');
        Route::delete('/{ticket}', [TicketsController::class, 'destroy'])->name('destroy');
        
        // Gestione stato ticket
        Route::patch('/{ticket}/status', [TicketsController::class, 'changeStatus'])->name('change-status');
        Route::patch('/{ticket}/assign', [TicketsController::class, 'assign'])->name('assign');
        Route::post('/{ticket}/assign', [TicketsController::class, 'assign'])->name('assign.post');
        Route::post('/{ticket}/close', [TicketsController::class, 'close'])->name('close');
        Route::post('/{ticket}/comment', [TicketsController::class, 'addComment'])->name('add-comment');
        Route::post('/{ticket}/allegati', [TicketsController::class, 'uploadAllegato'])->name('allegati.upload');
        
        // Filtri e viste speciali
        Route::get('/my/assigned', [TicketsController::class, 'myAssigned'])->name('my-assigned');
        Route::get('/my/created', [TicketsController::class, 'myCreated'])->name('my-created');
        Route::get('/category/{category}', [TicketsController::class, 'byCategory'])->name('by-category');
        Route::get('/priority/{priority}', [TicketsController::class, 'byPriority'])->name('by-priority');
    });

    /*
    |--------------------------------------------------------------------------
    | MAGAZZINO - Gestione Inventario
    |--------------------------------------------------------------------------
    */
    Route::prefix('magazzino')->name('magazzino.')->group(function () {
        Route::get('/', [MagazzinoController::class, 'index'])->name('index');
        Route::get('/create', [MagazzinoController::class, 'create'])->name('create');
        Route::post('/', [MagazzinoController::class, 'store'])->name('store');
        Route::get('/{item}', [MagazzinoController::class, 'show'])->name('show');
        Route::get('/{item}/edit', [MagazzinoController::class, 'edit'])->name('edit');
        Route::put('/{item}', [MagazzinoController::class, 'update'])->name('update');
        Route::delete('/{item}', [MagazzinoController::class, 'destroy'])->name('destroy');
        
        // Movimenti magazzino
        Route::post('/{item}/carico', [MagazzinoController::class, 'carico'])->name('carico');
        Route::post('/{item}/scarico', [MagazzinoController::class, 'scarico'])->name('scarico');
        Route::post('/{item}/movimento', [MagazzinoController::class, 'addMovimento'])->name('movimento');
        Route::get('/{item}/movimenti', [MagazzinoController::class, 'movimenti'])->name('movimenti');
        
        // Inventari e controlli
        Route::get('/inventario/nuovo', [MagazzinoController::class, 'nuovoInventario'])->name('nuovo-inventario');
        Route::post('/inventario', [MagazzinoController::class, 'salvaInventario'])->name('salva-inventario');
        Route::get('/scorte-minime', [MagazzinoController::class, 'scorteMinime'])->name('scorte-minime');
        Route::get('/scadenze', [MagazzinoController::class, 'scadenze'])->name('scadenze');
        
        // Reports
        Route::get('/reports/giacenze', [MagazzinoController::class, 'reportGiacenze'])->name('report-giacenze');
        Route::get('/report/inventario', [MagazzinoController::class, 'reportInventario'])->name('report.inventario');
        Route::get('/reports/movimenti', [MagazzinoController::class, 'reportMovimenti'])->name('report-movimenti');
    });

    /*
    |--------------------------------------------------------------------------
    | DPI - Dispositivi di Protezione Individuale
    |--------------------------------------------------------------------------
    */
    Route::prefix('dpi')->name('dpi.')->group(function () {
        Route::get('/', [DpiController::class, 'index'])->name('index');
        Route::get('/create', [DpiController::class, 'create'])->name('create');
        Route::post('/', [DpiController::class, 'store'])->name('store');
        Route::get('/{dpi}', [DpiController::class, 'show'])->name('show');
        Route::get('/{dpi}/edit', [DpiController::class, 'edit'])->name('edit');
        Route::put('/{dpi}', [DpiController::class, 'update'])->name('update');
        Route::delete('/{dpi}', [DpiController::class, 'destroy'])->name('destroy');
        
        // Assegnazioni DPI
        Route::get('/{dpi}/assegnazioni', [DpiController::class, 'assegnazioni'])->name('assegnazioni');
        Route::post('/{dpi}/assegna', [DpiController::class, 'assegna'])->name('assegna');
        Route::post('/{dpi}/ritira', [DpiController::class, 'ritira'])->name('ritira');
        Route::patch('/assegnazioni/{assegnazione}/restituisci', [DpiController::class, 'restituisci'])->name('restituisci');
        
        // Controlli e manutenzioni
        Route::post('/{dpi}/controllo', [DpiController::class, 'addControllo'])->name('add-controllo');
        Route::get('/scadenze', [DpiController::class, 'scadenze'])->name('scadenze');
        Route::get('/controlli-periodici', [DpiController::class, 'controlliPeriodici'])->name('controlli-periodici');
        
        // Reports DPI
        Route::get('/reports/assegnazioni', [DpiController::class, 'reportAssegnazioni'])->name('report-assegnazioni');
        Route::get('/reports/scadenze', [DpiController::class, 'reportScadenze'])->name('report-scadenze');
    });

    /*
    |--------------------------------------------------------------------------
    | NOTIFICHE - Centro Notifiche
    |--------------------------------------------------------------------------
    */
    Route::prefix('notifiche')->name('notifiche.')->group(function () {
        Route::get('/', [NotificheController::class, 'index'])->name('index');
        Route::get('/create', [NotificheController::class, 'create'])->name('create');
        Route::post('/', [NotificheController::class, 'store'])->name('store');
        Route::get('/{notifica}', [NotificheController::class, 'show'])->name('show');
        Route::patch('/{notifica}/read', [NotificheController::class, 'markAsRead'])->name('mark-read');
        Route::post('/{notifica}/mark-read', [NotificheController::class, 'markAsRead'])->name('mark-read.post');
        Route::delete('/{notifica}', [NotificheController::class, 'destroy'])->name('destroy');
        
        // Azioni multiple
        Route::patch('/mark-all-read', [NotificheController::class, 'markAllRead'])->name('mark-all-read');
        Route::post('/mark-all-read', [NotificheController::class, 'markAllAsRead'])->name('mark-all-read.post');
        Route::delete('/clear-read', [NotificheController::class, 'clearRead'])->name('clear-read');
        
        // API per notifiche real-time
        Route::get('/api/unread-count', [NotificheController::class, 'unreadCount'])->name('api.unread-count');
        Route::get('/api/recent', [NotificheController::class, 'recent'])->name('api.recent');
    });

    /*
    |--------------------------------------------------------------------------
    | AMMINISTRAZIONE - Gestione Permessi e Sistema
    |--------------------------------------------------------------------------
    */
    Route::prefix('admin')->name('admin.')->middleware('can:admin')->group(function () {
        Route::get('/', [DashboardController::class, 'admin'])->name('index');
        
        // Gestione permessi ACL
       Route::get('/permissions', [PermissionController::class, 'index'])->name('permissions.index');
Route::put('/permissions', [PermissionController::class, 'update'])->name('permissions.update');
        
        // Gestione utenti
        Route::get('/utenti', [DashboardController::class, 'utenti'])->name('utenti');
        Route::get('/utenti/{user}/edit', [DashboardController::class, 'editUtente'])->name('utenti.edit');
        Route::put('/utenti/{user}', [DashboardController::class, 'updateUtente'])->name('utenti.update');
        Route::patch('/utenti/{user}/toggle-status', [DashboardController::class, 'toggleUserStatus'])->name('utenti.toggle-status');
        
        // Logs di sistema
        Route::get('/logs', [DashboardController::class, 'logs'])->name('logs');
        Route::get('/logs/{file}', [DashboardController::class, 'showLog'])->name('logs.show');
        Route::delete('/logs/{file}', [DashboardController::class, 'deleteLog'])->name('logs.delete');
        
        // Statistiche sistema
        Route::get('/statistiche', [DashboardController::class, 'statistiche'])->name('statistiche');
        
        // Impostazioni
        Route::get('/settings', [DashboardController::class, 'settings'])->name('settings');
        Route::put('/settings', [DashboardController::class, 'updateSettings'])->name('settings.update');
    });

    /*
    |--------------------------------------------------------------------------
    | API ROUTES - Per chiamate AJAX
    |--------------------------------------------------------------------------
    */
    Route::prefix('api')->name('api.')->group(function () {
        
        // Volontari disponibili per evento
        Route::get('/volontari/disponibili', [VolontariController::class, 'apiDisponibili'])->name('volontari.disponibili');
        
        // Mezzi disponibili per periodo
        Route::get('/mezzi/disponibili', [MezziController::class, 'apiDisponibili'])->name('mezzi.disponibili');
        
        // Ricerca rapida
        Route::get('/search', function(Request $request) {
            $query = $request->get('q');
            $results = [];
            
            if (strlen($query) >= 3) {
                // Cerca in volontari
                $volontari = App\Models\Volontario::where('nome', 'like', "%{$query}%")
                    ->orWhere('cognome', 'like', "%{$query}%")
                    ->limit(5)->get(['id', 'nome', 'cognome']);
                
                foreach ($volontari as $vol) {
                    $results[] = [
                        'type' => 'volontario',
                        'id' => $vol->id,
                        'text' => "{$vol->cognome} {$vol->nome}",
                        'url' => route('volontari.show', $vol->id)
                    ];
                }
                
                // Cerca in eventi
                $eventi = App\Models\Evento::where('titolo', 'like', "%{$query}%")
                    ->limit(5)->get(['id', 'titolo', 'data_inizio']);
                
                foreach ($eventi as $evento) {
                    $results[] = [
                        'type' => 'evento',
                        'id' => $evento->id,
                        'text' => $evento->titolo,
                        'url' => route('eventi.show', $evento->id)
                    ];
                }
            }
            
            return response()->json($results);
        })->name('search');
        
        // Statistiche dashboard
        Route::get('/dashboard/stats', [DashboardController::class, 'apiStats'])->name('dashboard.stats');
        
        // Check disponibilità in tempo reale
        Route::post('/check-availability', function(Request $request) {
            $data = $request->validate([
                'type' => 'required|in:volontario,mezzo',
                'id' => 'required|integer',
                'data_inizio' => 'required|date',
                'data_fine' => 'required|date|after_or_equal:data_inizio',
                'evento_id' => 'nullable|integer'
            ]);
            
            $available = true;
            $conflicts = [];
            
            if ($data['type'] === 'volontario') {
                $conflicts = App\Models\Evento::whereHas('volontari', function($q) use ($data) {
                    $q->where('volontario_id', $data['id']);
                })
                ->where('stato', '!=', 'cancellato')
                ->where('id', '!=', $data['evento_id'] ?? 0)
                ->where(function($q) use ($data) {
                    $q->whereBetween('data_inizio', [$data['data_inizio'], $data['data_fine']])
                      ->orWhereBetween('data_fine', [$data['data_inizio'], $data['data_fine']])
                      ->orWhere(function($subQ) use ($data) {
                          $subQ->where('data_inizio', '<=', $data['data_inizio'])
                               ->where('data_fine', '>=', $data['data_fine']);
                      });
                })->get(['id', 'titolo', 'data_inizio', 'data_fine']);
            }
            
            $available = $conflicts->isEmpty();
            
            return response()->json([
                'available' => $available,
                'conflicts' => $conflicts
            ]);
        })->name('check-availability');
    });

});

/*
|--------------------------------------------------------------------------
| FALLBACK ROUTE
|--------------------------------------------------------------------------
*/
Route::fallback(function () {
    return response()->view('errors.404', [], 404);
});

/*
|--------------------------------------------------------------------------
| DEVELOPMENT ROUTES (solo in ambiente di sviluppo)
|--------------------------------------------------------------------------
*/
if (app()->environment('local')) {
    Route::get('/test/email', function() {
        return new App\Mail\EventoCreato(App\Models\Evento::first());
    });
    
    Route::get('/test/notification', function() {
        $user = Auth::user();
        $user->notify(new App\Notifications\EventoAssegnato(App\Models\Evento::first()));
        return 'Notifica inviata!';
    });
}
--- api.php ---
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

// API routes per il gestionale (future implementazioni)
Route::prefix('v1')->group(function () {
    // Dashboard stats
    Route::middleware('auth:sanctum')->group(function () {
        Route::get('/dashboard/stats', function () {
            return response()->json(['message' => 'API in sviluppo']);
        });
    });
});
--- console.php ---
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');


=== CONFIGURAZIONI ===

--- bootstrap/app.php ---
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware): void {
        $middleware->alias([
            'permission' => \App\Http\Middleware\CheckPermissions::class,
        ]);
    })
    ->withExceptions(function (Exceptions $exceptions): void {
        //
    })->create();
--- config/app.php ---
<?php

use Illuminate\Support\Facades\Facade;
use Illuminate\Support\ServiceProvider;

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    */

    'name' => env('APP_NAME', 'Gestionale Croce Verde'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    */

    'url' => env('APP_URL', 'http://localhost'),

    'asset_url' => env('ASSET_URL'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    */

    'timezone' => 'Europe/Rome',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    */

    'locale' => 'it',

    'fallback_locale' => 'en',

    'faker_locale' => 'it_IT',

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    */

    'key' => env('APP_KEY'),

    'cipher' => 'AES-256-CBC',

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    */

    'maintenance' => [
        'driver' => 'file',
    ],

    /*
    |--------------------------------------------------------------------------
    | Autoloaded Service Providers
    |--------------------------------------------------------------------------
    */

    'providers' => ServiceProvider::defaultProviders()->merge([
        /*
         * Package Service Providers...
         */

        /*
         * Application Service Providers...
         */
        App\Providers\AppServiceProvider::class,
        App\Providers\AuthServiceProvider::class,
        // App\Providers\BroadcastServiceProvider::class,
        App\Providers\EventServiceProvider::class,
        App\Providers\RouteServiceProvider::class,
    ])->toArray(),

    /*
    |--------------------------------------------------------------------------
    | Class Aliases
    |--------------------------------------------------------------------------
    */

    'aliases' => Facade::defaultAliases()->merge([
        // 'Example' => App\Facades\Example::class,
    ])->toArray(),

];
--- config/database.php ---
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    */

    'default' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'gestionale_cv'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    */

    'migrations' => 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];
--- config/auth.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the number of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];

--- config/cache.php ---
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];

--- config/session.php ---
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "memcached",
    |            "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];


=== FILE PROGETTO ===

--- composer.json ---
{
    "name": "croce-verde/gestionale",
    "type": "project",
    "description": "Gestionale Croce Verde Ascoli Piceno",
    "keywords": ["laravel", "croce-verde", "gestionale", "volontariato"],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "laravel/framework": "^11.0",
        "laravel/sanctum": "^4.0",
        "laravel/tinker": "^2.9",
        "laravel/ui": "^4.0",
        "intervention/image": "^3.0",
        "maatwebsite/excel": "^3.1",
        "barryvdh/laravel-dompdf": "^2.0",
        "spatie/laravel-permission": "^6.0",
        "yajra/laravel-datatables-oracle": "^11.0"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.26",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.0",
        "phpunit/phpunit": "^11.0"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}

--- package.json ---
{
    "name": "gestionale-croce-verde",
    "version": "1.0.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        "preview": "vite preview"
    },
    "devDependencies": {
        "axios": "^1.6.4",
        "bootstrap": "^5.3.0",
        "laravel-vite-plugin": "^1.0",
        "vite": "^5.0"
    }
}

--- .env.example ---
APP_NAME="Gestionale Croce Verde"
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=gestionale_cv
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="noreply@gestionalecv.local"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
--- artisan ---
#!/usr/bin/env php
<?php

use Illuminate\Foundation\Application;
use Symfony\Component\Console\Input\ArgvInput;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
/** @var Application $app */
$app = require_once __DIR__.'/bootstrap/app.php';

$status = $app->handleCommand(new ArgvInput);

exit($status);

--- vite.config.js ---
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: true,
        }),
    ],
});


=== MIGRAZIONI ===

Lista migrazioni:
total 132
drwxr-xr-x 2 root root 4096 Jun 30 22:13 .
drwxr-xr-x 5 root root 4096 Jun 30 16:17 ..
-rw-r--r-- 1 root root 1898 Jun 30 16:27 2024_01_01_000000_create_users_table.php
-rw-r--r-- 1 root root 1350 Jun 30 16:27 2024_01_01_000001_create_permissions_table.php
-rw-r--r-- 1 root root 2388 Jun 30 16:27 2024_01_01_000002_create_volontari_table.php
-rw-r--r-- 1 root root 3398 Jun 30 16:27 2024_01_01_000003_create_mezzi_table.php
-rw-r--r-- 1 root root 2224 Jun 30 16:27 2024_01_01_000004_create_manutenzioni_table.php
-rw-r--r-- 1 root root 1856 Jun 30 16:27 2024_01_01_000005_create_checklist_templates_table.php
-rw-r--r-- 1 root root 2229 Jun 30 21:24 2024_01_01_000006_create_checklist_compilate_table.php
-rw-r--r-- 1 root root 3525 Jun 30 16:27 2024_01_01_000007_create_magazzino_table.php
-rw-r--r-- 1 root root 3607 Jun 30 16:27 2024_01_01_000008_create_dpi_table.php
-rw-r--r-- 1 root root 2800 Jun 30 21:24 2024_01_01_000009_create_assegnazioni_dpi_table.php
-rw-r--r-- 1 root root 3468 Jun 30 21:24 2024_01_01_000010_create_documenti_table.php
-rw-r--r-- 1 root root 4282 Jun 30 16:27 2024_01_01_000011_create_eventi_table.php
-rw-r--r-- 1 root root 2857 Jun 30 21:24 2024_01_01_000012_create_partecipazioni_eventi_table.php
-rw-r--r-- 1 root root 4399 Jun 30 21:24 2024_01_01_000013_create_tickets_table.php
-rw-r--r-- 1 root root 1674 Jun 30 21:24 2024_01_01_000014_create_allegati_tickets_table.php
-rw-r--r-- 1 root root 3303 Jun 30 16:27 2024_01_01_000015_create_avvisi_table.php
-rw-r--r-- 1 root root 3957 Jun 30 16:29 2024_01_01_000016_create_archivio_digitale_table.php
-rw-r--r-- 1 root root 3427 Jun 30 16:27 2024_01_01_000017_create_log_attivita_table.php
-rw-r--r-- 1 root root  510 Jun 30 17:27 2025_06_30_192424_add_soft_deletes_to_tickets_table.php
-rw-r--r-- 1 root root 1473 Jun 30 21:24 2025_06_30_200000_create_notifiche_table.php
-rw-r--r-- 1 root root 1902 Jun 30 21:24 2025_06_30_210000_create_movimenti_magazzino_table.php
-rw-r--r-- 1 root root  492 Jun 30 21:24 2025_07_01_000001_add_soft_deletes_to_volontari_table.php
-rw-r--r-- 1 root root  484 Jun 30 21:24 2025_07_01_000002_add_soft_deletes_to_mezzi_table.php
-rw-r--r-- 1 root root  492 Jun 30 21:24 2025_07_01_000003_add_soft_deletes_to_magazzino_table.php
-rw-r--r-- 1 root root  480 Jun 30 21:24 2025_07_01_000004_add_soft_deletes_to_dpi_table.php
-rw-r--r-- 1 root root  486 Jun 30 21:24 2025_07_01_000005_add_soft_deletes_to_eventi_table.php
-rw-r--r-- 1 root root  758 Jun 30 22:03 2025_07_01_000041_create_cache_table.php
-rw-r--r-- 1 root root  696 Jun 30 22:03 2025_07_01_000041_create_sessions_table.php
-rw-r--r-- 1 root root  551 Jun 30 22:15 2025_07_01_000050_create_password_reset_tokens_table.php


=== SEEDERS ===

--- DatabaseSeeder.php ---
<?php

namespace Database\Seeders;

use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // Crea utente Admin principale
        User::create([
            'nome' => 'Admin',
            'cognome' => 'Sistema',
            'email' => 'admin@croceverde.it',
            'password' => Hash::make('admin123'),
            'telefono' => '123456789',
            'data_nascita' => '1980-01-01',
            'codice_fiscale' => 'ADMSIS80A01H501A',
            'indirizzo' => 'Via Principale 1',
            'citta' => 'Milano',
            'cap' => '20100',
            'provincia' => 'MI',
            'ruolo' => 'admin',
            'attivo' => true,
        ]);

        // Crea utente Direttivo
        User::create([
            'nome' => 'Mario',
            'cognome' => 'Rossi',
            'email' => 'direttivo@croceverde.it',
            'password' => Hash::make('direttivo123'),
            'telefono' => '987654321',
            'data_nascita' => '1975-06-15',
            'codice_fiscale' => 'RSSMRA75H15F205A',
            'indirizzo' => 'Via Roma 10',
            'citta' => 'Milano',
            'cap' => '20100',
            'provincia' => 'MI',
            'ruolo' => 'direttivo',
            'attivo' => true,
        ]);

        // Crea utente Volontario
        User::create([
            'nome' => 'Giulia',
            'cognome' => 'Bianchi',
            'email' => 'volontario@croceverde.it',
            'password' => Hash::make('volontario123'),
            'telefono' => '555123456',
            'data_nascita' => '1995-03-20',
            'codice_fiscale' => 'BNCGLI95C20F205A',
            'indirizzo' => 'Via Garibaldi 5',
            'citta' => 'Milano',
            'cap' => '20100',
            'provincia' => 'MI',
            'ruolo' => 'volontario',
            'attivo' => true,
        ]);

        // Crea utente Responsabile Mezzi
        User::create([
            'nome' => 'Luca',
            'cognome' => 'Verdi',
            'email' => 'mezzi@croceverde.it',
            'password' => Hash::make('mezzi123'),
            'telefono' => '333789012',
            'data_nascita' => '1985-11-10',
            'codice_fiscale' => 'VRDLCU85S10F205A',
            'indirizzo' => 'Via Manzoni 8',
            'citta' => 'Milano',
            'cap' => '20100',
            'provincia' => 'MI',
            'ruolo' => 'mezzi',
            'attivo' => true,
        ]);

        echo "\n✅ GESTIONALE CROCE VERDE - UTENTI CREATI:\n";
        echo "===============================================\n";
        echo "👤 ADMIN:      admin@croceverde.it / admin123\n";
        echo "👤 DIRETTIVO:  direttivo@croceverde.it / direttivo123\n";
        echo "👤 VOLONTARIO: volontario@croceverde.it / volontario123\n";
        echo "👤 MEZZI:      mezzi@croceverde.it / mezzi123\n";
        echo "===============================================\n";
        echo "🚀 Ora puoi fare login su: http://your-ip:8000/login\n\n";
    }
}
        // Inizializza permessi di default
        try {
            \App\Models\Permission::inizializzaPermessiDefault();
            echo "✅ PERMESSI INIZIALIZZATI\n";
        } catch (\Exception $e) {
            echo "⚠️  Errore inizializzazione permessi: " . $e->getMessage() . "\n";
        }


=== INFORMAZIONI SISTEMA ===

PHP Version: PHP 8.3.11 (cli) (built: Mar 18 2025 19:13:26) (NTS)
Laravel Version: Laravel Framework 11.45.1
Composer packages:
            "name": "barryvdh/laravel-dompdf",
                    "name": "Barry vd. Heuvel",
            "name": "brick/math",
            "name": "carbonphp/carbon-doctrine-types",
                    "name": "KyleKatarn",
            "name": "composer/pcre",
                    "name": "Jordi Boggiano",
            "name": "composer/semver",
                    "name": "Nils Adermann",
                    "name": "Jordi Boggiano",
                    "name": "Rob Bast",
            "name": "dflydev/dot-access-data",
                    "name": "Dragonfly Development Inc.",
                    "name": "Beau Simensen",
                    "name": "Carlos Frutos",
                    "name": "Colin O'Dell",
            "name": "doctrine/inflector",
                    "name": "Guilherme Blanco",
                    "name": "Roman Borschel",
                    "name": "Benjamin Eberlei",


=== STATO DATABASE ===

Stato migrazioni:

  Migration name ......................................................... Batch / Status  
  2024_01_01_000000_create_users_table .......................................... [1] Ran  
  2024_01_01_000001_create_permissions_table .................................... [1] Ran  
  2024_01_01_000002_create_volontari_table ...................................... [1] Ran  
  2024_01_01_000003_create_mezzi_table .......................................... [1] Ran  
  2024_01_01_000004_create_manutenzioni_table ................................... [1] Ran  
  2024_01_01_000005_create_checklist_templates_table ............................ [1] Ran  
  2024_01_01_000006_create_checklist_compilate_table ............................ [1] Ran  
  2024_01_01_000007_create_magazzino_table ...................................... [1] Ran  
  2024_01_01_000008_create_dpi_table ............................................ [1] Ran  
  2024_01_01_000009_create_assegnazioni_dpi_table ............................... [1] Ran  
  2024_01_01_000010_create_documenti_table ...................................... [1] Ran  
  2024_01_01_000011_create_eventi_table ......................................... [1] Ran  
  2024_01_01_000012_create_partecipazioni_eventi_table .......................... [1] Ran  
  2024_01_01_000013_create_tickets_table ........................................ [1] Ran  
  2024_01_01_000014_create_allegati_tickets_table ............................... [1] Ran  
  2024_01_01_000015_create_avvisi_table ......................................... [1] Ran  
  2024_01_01_000016_create_archivio_digitale_table .............................. [1] Ran  
  2024_01_01_000017_create_log_attivita_table ................................... [1] Ran  
  2025_06_30_192424_add_soft_deletes_to_tickets_table ........................... [1] Ran  
  2025_06_30_200000_create_notifiche_table ...................................... [1] Ran  
  2025_06_30_210000_create_movimenti_magazzino_table ............................ [1] Ran  
  2025_07_01_000001_add_soft_deletes_to_volontari_table ......................... [1] Ran  
  2025_07_01_000002_add_soft_deletes_to_mezzi_table ............................. [1] Ran  
  2025_07_01_000003_add_soft_deletes_to_magazzino_table ......................... [1] Ran  
  2025_07_01_000004_add_soft_deletes_to_dpi_table ............................... [1] Ran  
  2025_07_01_000005_add_soft_deletes_to_eventi_table ............................ [1] Ran  
  2025_07_01_000041_create_cache_table .......................................... [2] Ran  
  2025_07_01_000041_create_sessions_table ....................................... [2] Ran  
  2025_07_01_000050_create_password_reset_tokens_table .......................... [3] Ran  


===========================================
FINE ESPORTAZIONE
===========================================

File generato: gestionale_completo_20250630_221657.txt
Data completamento: Mon Jun 30 10:16:57 PM UTC 2025
Dimensione finale: 476K
